{"version":3,"file":"homepage.mjs","sources":["../../../../../server/src/services/homepage.ts"],"sourcesContent":["import type { Core, Modules, Schema } from '@strapi/types';\nimport { contentTypes } from '@strapi/utils';\nimport type { GetRecentDocuments, RecentDocument } from '../../../shared/contracts/homepage';\n\nconst createHomepageService = ({ strapi }: { strapi: Core.Strapi }) => {\n  const MAX_DOCUMENTS = 4;\n\n  const metadataService = strapi.plugin('content-manager').service('document-metadata');\n  const permissionService = strapi.admin.services.permission as typeof import('./permission');\n\n  type ContentTypeConfiguration = {\n    uid: RecentDocument['contentTypeUid'];\n    settings: { mainField: string };\n  };\n  const getConfiguration = async (\n    contentTypeUids: RecentDocument['contentTypeUid'][]\n  ): Promise<ContentTypeConfiguration[]> => {\n    /**\n     * Don't use the strapi.store util because we need to make\n     * more precise queries than exact key matches, in order to make as few queries as possible.\n     */\n    const coreStore = strapi.db.query('strapi::core-store');\n    const rawConfigurations = await coreStore.findMany({\n      where: {\n        key: {\n          $in: contentTypeUids.map(\n            (contentType) => `plugin_content_manager_configuration_content_types::${contentType}`\n          ),\n        },\n      },\n    });\n\n    return rawConfigurations.map((rawConfiguration) => {\n      return JSON.parse(rawConfiguration.value);\n    });\n  };\n\n  const getPermittedContentTypes = async () => {\n    const readPermissions = await permissionService.findMany({\n      where: {\n        role: { users: { id: strapi.requestContext.get()?.state?.user.id } },\n        action: 'plugin::content-manager.explorer.read',\n      },\n    });\n\n    return readPermissions\n      .map((permission) => permission.subject)\n      .filter(Boolean) as RecentDocument['contentTypeUid'][];\n  };\n\n  type ContentTypeMeta = {\n    fields: string[];\n    mainField: string;\n    contentType: Schema.ContentType;\n    hasDraftAndPublish: boolean;\n    uid: RecentDocument['contentTypeUid'];\n  };\n\n  const getContentTypesMeta = (\n    allowedContentTypeUids: RecentDocument['contentTypeUid'][],\n    configurations: ContentTypeConfiguration[]\n  ): ContentTypeMeta[] => {\n    return allowedContentTypeUids.map((uid) => {\n      const configuration = configurations.find((config) => config.uid === uid);\n      const contentType = strapi.contentType(uid);\n      const fields = ['documentId', 'updatedAt'];\n\n      // Add fields required to get the status if D&P is enabled\n      const hasDraftAndPublish = contentTypes.hasDraftAndPublish(contentType);\n      if (hasDraftAndPublish) {\n        fields.push('publishedAt');\n      }\n\n      // Only add the main field if it's defined\n      if (configuration?.settings.mainField) {\n        fields.push(configuration.settings.mainField);\n      }\n\n      // Only add locale if it's localized\n      const isLocalized = (contentType.pluginOptions?.i18n as any)?.localized;\n      if (isLocalized) {\n        fields.push('locale');\n      }\n\n      return {\n        fields,\n        mainField: configuration!.settings.mainField,\n        contentType,\n        hasDraftAndPublish,\n        uid,\n      };\n    });\n  };\n\n  const formatDocuments = (documents: Modules.Documents.AnyDocument[], meta: ContentTypeMeta) => {\n    return documents.map((document) => {\n      return {\n        documentId: document.documentId,\n        locale: document.locale ?? null,\n        updatedAt: new Date(document.updatedAt),\n        title: document[meta.mainField ?? 'documentId'],\n        publishedAt:\n          meta.hasDraftAndPublish && document.publishedAt ? new Date(document.publishedAt) : null,\n        contentTypeUid: meta.uid,\n        contentTypeDisplayName: meta.contentType.info.displayName,\n        kind: meta.contentType.kind,\n      };\n    });\n  };\n\n  const addStatusToDocuments = async (documents: RecentDocument[]): Promise<RecentDocument[]> => {\n    return Promise.all(\n      documents.map(async (recentDocument) => {\n        const hasDraftAndPublish = contentTypes.hasDraftAndPublish(\n          strapi.contentType(recentDocument.contentTypeUid)\n        );\n        /**\n         * Tries to query the other version of the document if draft and publish is enabled,\n         * so that we know when to give the \"modified\" status.\n         */\n        const { availableStatus } = await metadataService.getMetadata(\n          recentDocument.contentTypeUid,\n          recentDocument,\n          {\n            availableStatus: hasDraftAndPublish,\n            availableLocales: false,\n          }\n        );\n        const status: RecentDocument['status'] = metadataService.getStatus(\n          recentDocument,\n          availableStatus\n        );\n\n        return {\n          ...recentDocument,\n          status: hasDraftAndPublish ? status : undefined,\n        };\n      })\n    );\n  };\n\n  const permissionCheckerService = strapi.plugin('content-manager').service('permission-checker');\n  const getPermissionChecker = (uid: string) =>\n    permissionCheckerService.create({\n      userAbility: strapi.requestContext.get()?.state.userAbility,\n      model: uid,\n    });\n\n  return {\n    async getRecentlyPublishedDocuments(): Promise<GetRecentDocuments.Response['data']> {\n      const permittedContentTypes = await getPermittedContentTypes();\n      const allowedContentTypeUids = permittedContentTypes.filter((uid) => {\n        return contentTypes.hasDraftAndPublish(strapi.contentType(uid));\n      });\n      // Fetch the configuration for each content type in a single query\n      const configurations = await getConfiguration(allowedContentTypeUids);\n      // Get the necessary metadata for the documents\n      const contentTypesMeta = getContentTypesMeta(allowedContentTypeUids, configurations);\n      // Now actually fetch and format the documents\n      const recentDocuments = await Promise.all(\n        contentTypesMeta.map(async (meta) => {\n          const permissionQuery = await getPermissionChecker(meta.uid).sanitizedQuery.read({\n            limit: MAX_DOCUMENTS,\n            sort: 'publishedAt:desc',\n            fields: meta.fields,\n            status: 'published',\n          });\n\n          const docs = await strapi.documents(meta.uid).findMany(permissionQuery);\n\n          return formatDocuments(docs, meta);\n        })\n      );\n\n      const overallRecentDocuments = recentDocuments\n        .flat()\n        .sort((a, b) => {\n          if (!a.publishedAt || !b.publishedAt) return 0;\n          return b.publishedAt.valueOf() - a.publishedAt.valueOf();\n        })\n        .slice(0, MAX_DOCUMENTS);\n\n      return addStatusToDocuments(overallRecentDocuments);\n    },\n\n    async getRecentlyUpdatedDocuments(): Promise<GetRecentDocuments.Response['data']> {\n      const allowedContentTypeUids = await getPermittedContentTypes();\n      // Fetch the configuration for each content type in a single query\n      const configurations = await getConfiguration(allowedContentTypeUids);\n      // Get the necessary metadata for the documents\n      const contentTypesMeta = getContentTypesMeta(allowedContentTypeUids, configurations);\n      // Now actually fetch and format the documents\n      const recentDocuments = await Promise.all(\n        contentTypesMeta.map(async (meta) => {\n          const permissionQuery = await getPermissionChecker(meta.uid).sanitizedQuery.read({\n            limit: MAX_DOCUMENTS,\n            sort: 'updatedAt:desc',\n            fields: meta.fields,\n          });\n\n          const docs = await strapi.documents(meta.uid).findMany(permissionQuery);\n\n          return formatDocuments(docs, meta);\n        })\n      );\n\n      const overallRecentDocuments = recentDocuments\n        .flat()\n        .sort((a, b) => {\n          return b.updatedAt.valueOf() - a.updatedAt.valueOf();\n        })\n        .slice(0, MAX_DOCUMENTS);\n\n      return addStatusToDocuments(overallRecentDocuments);\n    },\n  };\n};\n\nexport { createHomepageService };\n"],"names":["createHomepageService","strapi","MAX_DOCUMENTS","metadataService","plugin","service","permissionService","admin","services","permission","getConfiguration","contentTypeUids","coreStore","db","query","rawConfigurations","findMany","where","key","$in","map","contentType","rawConfiguration","JSON","parse","value","getPermittedContentTypes","readPermissions","role","users","id","requestContext","get","state","user","action","subject","filter","Boolean","getContentTypesMeta","allowedContentTypeUids","configurations","uid","configuration","find","config","fields","hasDraftAndPublish","contentTypes","push","settings","mainField","isLocalized","pluginOptions","i18n","localized","formatDocuments","documents","meta","document","documentId","locale","updatedAt","Date","title","publishedAt","contentTypeUid","contentTypeDisplayName","info","displayName","kind","addStatusToDocuments","Promise","all","recentDocument","availableStatus","getMetadata","availableLocales","status","getStatus","undefined","permissionCheckerService","getPermissionChecker","create","userAbility","model","getRecentlyPublishedDocuments","permittedContentTypes","contentTypesMeta","recentDocuments","permissionQuery","sanitizedQuery","read","limit","sort","docs","overallRecentDocuments","flat","a","b","valueOf","slice","getRecentlyUpdatedDocuments"],"mappings":"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"}