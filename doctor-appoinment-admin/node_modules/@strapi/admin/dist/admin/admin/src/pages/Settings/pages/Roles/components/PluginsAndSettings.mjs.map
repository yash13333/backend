{"version":3,"file":"PluginsAndSettings.mjs","sources":["../../../../../../../../../admin/src/pages/Settings/pages/Roles/components/PluginsAndSettings.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport {\n  Accordion,\n  Box,\n  BoxComponent,\n  Checkbox,\n  Flex,\n  Grid,\n  Modal,\n  Typography,\n} from '@strapi/design-system';\nimport get from 'lodash/get';\nimport { useIntl } from 'react-intl';\nimport { styled } from 'styled-components';\n\nimport {\n  SettingPermission,\n  PluginPermission,\n} from '../../../../../../../shared/contracts/permissions';\nimport { capitalise } from '../../../../../utils/strings';\nimport {\n  PermissionsDataManagerContextValue,\n  usePermissionsDataManager,\n} from '../hooks/usePermissionsDataManager';\nimport { createArrayOfValues } from '../utils/createArrayOfValues';\nimport { ChildrenForm, ConditionForm } from '../utils/forms';\nimport { RecursiveRecordOfBooleans, getCheckboxState } from '../utils/getCheckboxState';\nimport { removeConditionKeyFromData } from '../utils/removeConditionKeyFromData';\n\nimport { ConditionsButton } from './ConditionsButton';\nimport { ConditionsModal } from './ConditionsModal';\n\nimport type { GenericLayout } from '../utils/layouts';\n\n/* -------------------------------------------------------------------------------------------------\n * PluginsAndSettingsPermissions\n * -----------------------------------------------------------------------------------------------*/\n\ntype Layout = GenericLayout<SettingPermission | PluginPermission>[];\n\ninterface PluginsAndSettingsPermissionsProps extends Pick<RowProps, 'kind' | 'isFormDisabled'> {\n  layout: Layout;\n}\n\nconst PluginsAndSettingsPermissions = ({\n  layout,\n  ...restProps\n}: PluginsAndSettingsPermissionsProps) => {\n  return (\n    <Box padding={6} background=\"neutral0\">\n      <Accordion.Root size=\"M\">\n        {layout.map(({ category, categoryId, childrenForm }, index) => {\n          return (\n            <Row\n              key={category}\n              childrenForm={childrenForm}\n              variant={index % 2 === 1 ? 'primary' : 'secondary'}\n              name={category}\n              pathToData={[restProps.kind, categoryId]}\n              {...restProps}\n            />\n          );\n        })}\n      </Accordion.Root>\n    </Box>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * Row\n * -----------------------------------------------------------------------------------------------*/\n\ninterface RowProps\n  extends Pick<Layout[number], 'childrenForm'>,\n    Pick<Accordion.HeaderProps, 'variant'> {\n  kind: Exclude<keyof PermissionsDataManagerContextValue['modifiedData'], `${string}Types`>;\n  name: string;\n  isFormDisabled?: boolean;\n  pathToData: string[];\n}\n\nconst Row = ({\n  childrenForm,\n  kind,\n  name,\n  isFormDisabled = false,\n  variant,\n  pathToData,\n}: RowProps) => {\n  const { formatMessage } = useIntl();\n\n  const categoryName = name.split('::').pop() ?? '';\n\n  return (\n    <Accordion.Item value={name}>\n      <Accordion.Header variant={variant}>\n        <Accordion.Trigger\n          caretPosition=\"right\"\n          description={`${formatMessage(\n            { id: 'Settings.permissions.category', defaultMessage: categoryName },\n            { category: categoryName }\n          )} ${kind === 'plugins' ? 'plugin' : kind}`}\n        >\n          {capitalise(categoryName)}\n        </Accordion.Trigger>\n      </Accordion.Header>\n      <Accordion.Content>\n        <Box padding={6}>\n          {childrenForm.map(({ actions, subCategoryName, subCategoryId }) => (\n            <SubCategory\n              key={subCategoryName}\n              actions={actions}\n              categoryName={categoryName}\n              isFormDisabled={isFormDisabled}\n              subCategoryName={subCategoryName}\n              pathToData={[...pathToData, subCategoryId]}\n            />\n          ))}\n        </Box>\n      </Accordion.Content>\n    </Accordion.Item>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * SubCategory\n * -----------------------------------------------------------------------------------------------*/\n\ninterface SubCategoryProps {\n  actions?: Array<SettingPermission | PluginPermission>;\n  categoryName: string;\n  isFormDisabled?: boolean;\n  subCategoryName: string;\n  pathToData: string[];\n}\n\nconst SubCategory = ({\n  actions = [],\n  categoryName,\n  isFormDisabled,\n  subCategoryName,\n  pathToData,\n}: SubCategoryProps) => {\n  const { modifiedData, onChangeParentCheckbox, onChangeSimpleCheckbox } =\n    usePermissionsDataManager();\n  const [isConditionModalOpen, setIsConditionModalOpen] = React.useState(false);\n  const { formatMessage } = useIntl();\n\n  const mainData = get(modifiedData, pathToData, {});\n\n  const dataWithoutCondition = React.useMemo(() => {\n    return Object.keys(mainData).reduce<RecursiveRecordOfBooleans>((acc, current) => {\n      acc[current] = removeConditionKeyFromData(mainData[current])!;\n\n      return acc;\n    }, {});\n  }, [mainData]);\n\n  const { hasAllActionsSelected, hasSomeActionsSelected } = getCheckboxState(dataWithoutCondition);\n\n  // We need to format the actions so it matches the shape of the ConditionsModal actions props\n  const formattedActions = React.useMemo(() => {\n    return actions.map((action) => {\n      const checkboxName = [...pathToData, action.action, 'properties', 'enabled'];\n      const checkboxValue = get(modifiedData, checkboxName, false);\n      const conditionValue = get(modifiedData, [...pathToData, action.action, 'conditions'], {});\n      const hasConditions = createArrayOfValues(conditionValue).some((val) => val);\n\n      return {\n        ...action,\n        isDisplayed: checkboxValue,\n        checkboxName: checkboxName.join('..'),\n        hasSomeActionsSelected: checkboxValue,\n        value: checkboxValue,\n        hasConditions,\n        label: action.displayName,\n        actionId: action.action,\n        pathToConditionsObject: [...pathToData, action.action],\n      };\n    });\n  }, [actions, modifiedData, pathToData]);\n\n  const datum: ChildrenForm = get(modifiedData, [...pathToData], {});\n\n  const doesButtonHasCondition = createArrayOfValues(\n    Object.entries(datum).reduce<Record<string, ConditionForm>>((acc, current) => {\n      const [catName, { conditions }] = current;\n\n      acc[catName] = conditions;\n\n      return acc;\n    }, {})\n  ).some((val) => val);\n\n  return (\n    <>\n      <Box>\n        <Flex justifyContent=\"space-between\" alignItems=\"center\">\n          <Box paddingRight={4}>\n            <Typography variant=\"sigma\" textColor=\"neutral600\">\n              {subCategoryName}\n            </Typography>\n          </Box>\n          <Border flex={1} />\n          <Box paddingLeft={4}>\n            <Checkbox\n              name={pathToData.join('..')}\n              disabled={isFormDisabled}\n              // Keep same signature as packages/core/admin/admin/src/components/Roles/Permissions/index.js l.91\n              onCheckedChange={(value) => {\n                onChangeParentCheckbox({\n                  target: {\n                    name: pathToData.join('..'),\n                    value: !!value,\n                  },\n                });\n              }}\n              checked={hasSomeActionsSelected ? 'indeterminate' : hasAllActionsSelected}\n            >\n              {formatMessage({ id: 'app.utils.select-all', defaultMessage: 'Select all' })}\n            </Checkbox>\n          </Box>\n        </Flex>\n        <Flex paddingTop={6} paddingBottom={6}>\n          <Grid.Root gap={2} style={{ flex: 1 }}>\n            {formattedActions.map(({ checkboxName, value, action, displayName, hasConditions }) => {\n              return (\n                <Grid.Item col={3} key={action} direction=\"column\" alignItems=\"start\">\n                  <CheckboxWrapper $disabled={isFormDisabled} $hasConditions={hasConditions}>\n                    <Checkbox\n                      name={checkboxName}\n                      disabled={isFormDisabled}\n                      // Keep same signature as packages/core/admin/admin/src/components/Roles/Permissions/index.js l.91\n                      onCheckedChange={(value) => {\n                        onChangeSimpleCheckbox({\n                          target: {\n                            name: checkboxName,\n                            value: !!value,\n                          },\n                        });\n                      }}\n                      checked={value}\n                    >\n                      {displayName}\n                    </Checkbox>\n                  </CheckboxWrapper>\n                </Grid.Item>\n              );\n            })}\n          </Grid.Root>\n          <Modal.Root\n            open={isConditionModalOpen}\n            onOpenChange={() => {\n              setIsConditionModalOpen((prev) => !prev);\n            }}\n          >\n            <Modal.Trigger>\n              <ConditionsButton hasConditions={doesButtonHasCondition} />\n            </Modal.Trigger>\n            <ConditionsModal\n              headerBreadCrumbs={[categoryName, subCategoryName]}\n              actions={formattedActions}\n              isFormDisabled={isFormDisabled}\n              onClose={() => {\n                setIsConditionModalOpen(false);\n              }}\n            />\n          </Modal.Root>\n        </Flex>\n      </Box>\n    </>\n  );\n};\n\nconst Border = styled<BoxComponent>(Box)`\n  align-self: center;\n  border-top: 1px solid ${({ theme }) => theme.colors.neutral150};\n`;\n\nconst CheckboxWrapper = styled.div<{ $hasConditions?: boolean; $disabled?: boolean }>`\n  position: relative;\n  word-break: keep-all;\n  ${({ $hasConditions, $disabled, theme }) =>\n    $hasConditions &&\n    `\n    &:before {\n      content: '';\n      position: absolute;\n      top: -0.4rem;\n      left: -0.8rem;\n      width: 0.6rem;\n      height: 0.6rem;\n      border-radius: 2rem;\n      background: ${$disabled ? theme.colors.neutral100 : theme.colors.primary600};\n    }\n  `}\n`;\n\nexport { PluginsAndSettingsPermissions };\n"],"names":["PluginsAndSettingsPermissions","layout","restProps","_jsx","Box","padding","background","Accordion","Root","size","map","category","categoryId","childrenForm","index","Row","variant","name","pathToData","kind","isFormDisabled","formatMessage","useIntl","categoryName","split","pop","_jsxs","Item","value","Header","Trigger","caretPosition","description","id","defaultMessage","capitalise","Content","actions","subCategoryName","subCategoryId","SubCategory","modifiedData","onChangeParentCheckbox","onChangeSimpleCheckbox","usePermissionsDataManager","isConditionModalOpen","setIsConditionModalOpen","React","useState","mainData","get","dataWithoutCondition","useMemo","Object","keys","reduce","acc","current","removeConditionKeyFromData","hasAllActionsSelected","hasSomeActionsSelected","getCheckboxState","formattedActions","action","checkboxName","checkboxValue","conditionValue","hasConditions","createArrayOfValues","some","val","isDisplayed","join","label","displayName","actionId","pathToConditionsObject","datum","doesButtonHasCondition","entries","catName","conditions","_Fragment","Flex","justifyContent","alignItems","paddingRight","Typography","textColor","Border","flex","paddingLeft","Checkbox","disabled","onCheckedChange","target","checked","paddingTop","paddingBottom","Grid","gap","style","col","direction","CheckboxWrapper","$disabled","$hasConditions","Modal","open","onOpenChange","prev","ConditionsButton","ConditionsModal","headerBreadCrumbs","onClose","styled","theme","colors","neutral150","div","neutral100","primary600"],"mappings":"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"}