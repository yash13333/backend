import { jsx } from 'react/jsx-runtime';
import { IconButton } from '@strapi/design-system';
import { Duplicate, Key } from '@strapi/icons';
import { useIntl } from 'react-intl';
import { ContentBox } from '../../../../components/ContentBox.mjs';
import { useNotification } from '../../../../features/Notifications.mjs';
import { useTracking } from '../../../../features/Tracking.mjs';
import { useClipboard } from '../../../../hooks/useClipboard.mjs';

const TokenBox = ({ token, tokenType })=>{
    const { formatMessage } = useIntl();
    const { toggleNotification } = useNotification();
    const { trackUsage } = useTracking();
    const { copy } = useClipboard();
    const handleClick = (token)=>async ()=>{
            if (token) {
                const didCopy = await copy(token);
                if (didCopy) {
                    trackUsage('didCopyTokenKey', {
                        tokenType
                    });
                    toggleNotification({
                        type: 'success',
                        message: formatMessage({
                            id: 'Settings.tokens.notification.copied'
                        })
                    });
                }
            }
        };
    return /*#__PURE__*/ jsx(ContentBox, {
        endAction: token && /*#__PURE__*/ jsx("span", {
            style: {
                alignSelf: 'start'
            },
            children: /*#__PURE__*/ jsx(IconButton, {
                label: formatMessage({
                    id: 'app.component.CopyToClipboard.label',
                    defaultMessage: 'Copy to clipboard'
                }),
                onClick: handleClick(token),
                variant: "ghost",
                type: "button",
                style: {
                    padding: 0,
                    height: '1.6rem'
                },
                children: /*#__PURE__*/ jsx(Duplicate, {})
            })
        }),
        title: token || formatMessage({
            id: 'Settings.tokens.copy.editTitle',
            defaultMessage: 'This token isn’t accessible anymore.'
        }),
        subtitle: token ? formatMessage({
            id: 'Settings.tokens.copy.lastWarning',
            defaultMessage: 'Make sure to copy this token, you won’t be able to see it again!'
        }) : formatMessage({
            id: 'Settings.tokens.copy.editMessage',
            defaultMessage: 'For security reasons, you can only see your token once.'
        }),
        icon: /*#__PURE__*/ jsx(Key, {}),
        iconBackground: "neutral100"
    });
};

export { TokenBox };
//# sourceMappingURL=TokenBox.mjs.map
