{"version":3,"file":"ContentManagerWidgets.js","sources":["../../../../../../../admin/src/pages/Home/components/ContentManagerWidgets.tsx"],"sourcesContent":["import { Box, IconButton, Status, Table, Tbody, Td, Tr, Typography } from '@strapi/design-system';\nimport { CheckCircle, Pencil } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\nimport { Link, useNavigate } from 'react-router-dom';\nimport { styled } from 'styled-components';\n\nimport { RelativeTime } from '../../../components/RelativeTime';\nimport { useTracking } from '../../../features/Tracking';\nimport { useGetRecentDocumentsQuery } from '../../../services/homepage';\nimport { capitalise } from '../../../utils/strings';\n\nimport { Widget } from './Widget';\n\nimport type { RecentDocument } from '../../../../../shared/contracts/homepage';\n\nconst CellTypography = styled(Typography).attrs({ maxWidth: '14.4rem', display: 'block' })`\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n`;\n\ninterface DocumentStatusProps {\n  status: RecentDocument['status'];\n}\n\nconst DocumentStatus = ({ status = 'draft' }: DocumentStatusProps) => {\n  const statusVariant =\n    status === 'draft' ? 'secondary' : status === 'published' ? 'success' : 'alternative';\n\n  const { formatMessage } = useIntl();\n\n  return (\n    <Status variant={statusVariant} size=\"XS\">\n      <Typography tag=\"span\" variant=\"omega\" fontWeight=\"bold\">\n        {formatMessage({\n          id: `content-manager.containers.List.${status}`,\n          defaultMessage: capitalise(status),\n        })}\n      </Typography>\n    </Status>\n  );\n};\n\nconst RecentDocumentsTable = ({ documents }: { documents: RecentDocument[] }) => {\n  const { formatMessage } = useIntl();\n  const { trackUsage } = useTracking();\n  const navigate = useNavigate();\n\n  const getEditViewLink = (document: RecentDocument): string => {\n    // TODO: import the constants for this once the code is moved to the CM package\n    const isSingleType = document.kind === 'singleType';\n    const kindPath = isSingleType ? 'single-types' : 'collection-types';\n    const queryParams = document.locale ? `?plugins[i18n][locale]=${document.locale}` : '';\n\n    return `/content-manager/${kindPath}/${document.contentTypeUid}${isSingleType ? '' : '/' + document.documentId}${queryParams}`;\n  };\n\n  const handleRowClick = (document: RecentDocument) => () => {\n    trackUsage('willEditEntryFromHome');\n    const link = getEditViewLink(document);\n    navigate(link);\n  };\n\n  return (\n    <Table colCount={5} rowCount={documents?.length ?? 0}>\n      <Tbody>\n        {documents?.map((document) => (\n          <Tr onClick={handleRowClick(document)} cursor=\"pointer\" key={document.documentId}>\n            <Td>\n              <CellTypography title={document.title} variant=\"omega\" textColor=\"neutral800\">\n                {document.title}\n              </CellTypography>\n            </Td>\n            <Td>\n              <CellTypography variant=\"omega\" textColor=\"neutral600\">\n                {document.kind === 'singleType'\n                  ? formatMessage({\n                      id: 'content-manager.widget.last-edited.single-type',\n                      defaultMessage: 'Single-Type',\n                    })\n                  : formatMessage({\n                      id: document.contentTypeDisplayName,\n                      defaultMessage: document.contentTypeDisplayName,\n                    })}\n              </CellTypography>\n            </Td>\n            <Td>\n              <Box display=\"inline-block\">\n                {document.status ? (\n                  <DocumentStatus status={document.status} />\n                ) : (\n                  <Typography textColor=\"neutral600\" aria-hidden>\n                    -\n                  </Typography>\n                )}\n              </Box>\n            </Td>\n            <Td>\n              <Typography textColor=\"neutral600\">\n                <RelativeTime timestamp={new Date(document.updatedAt)} />\n              </Typography>\n            </Td>\n            <Td onClick={(e) => e.stopPropagation()}>\n              <Box display=\"inline-block\">\n                <IconButton\n                  tag={Link}\n                  to={getEditViewLink(document)}\n                  onClick={() => trackUsage('willEditEntryFromHome')}\n                  label={formatMessage({\n                    id: 'content-manager.actions.edit.label',\n                    defaultMessage: 'Edit',\n                  })}\n                  variant=\"ghost\"\n                >\n                  <Pencil />\n                </IconButton>\n              </Box>\n            </Td>\n          </Tr>\n        ))}\n      </Tbody>\n    </Table>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * LastEditedWidget\n * -----------------------------------------------------------------------------------------------*/\n\nconst LastEditedWidgetContent = () => {\n  const { formatMessage } = useIntl();\n  const { data, isLoading, error } = useGetRecentDocumentsQuery({ action: 'update' });\n\n  if (isLoading) {\n    return <Widget.Loading />;\n  }\n\n  if (error || !data) {\n    return <Widget.Error />;\n  }\n\n  if (data.length === 0) {\n    return (\n      <Widget.NoData>\n        {formatMessage({\n          id: 'content-manager.widget.last-edited.no-data',\n          defaultMessage: 'No edited entries',\n        })}\n      </Widget.NoData>\n    );\n  }\n\n  return <RecentDocumentsTable documents={data} />;\n};\n\nconst LastEditedWidget = () => {\n  return (\n    <Widget.Root\n      title={{\n        id: 'content-manager.widget.last-edited.title',\n        defaultMessage: 'Last edited entries',\n      }}\n      icon={Pencil}\n    >\n      <LastEditedWidgetContent />\n    </Widget.Root>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * LastPublishedWidget\n * -----------------------------------------------------------------------------------------------*/\n\nconst LastPublishedWidgetContent = () => {\n  const { formatMessage } = useIntl();\n  const { data, isLoading, error } = useGetRecentDocumentsQuery({ action: 'publish' });\n\n  if (isLoading) {\n    return <Widget.Loading />;\n  }\n\n  if (error || !data) {\n    return <Widget.Error />;\n  }\n\n  if (data.length === 0) {\n    return (\n      <Widget.NoData>\n        {formatMessage({\n          id: 'content-manager.widget.last-published.no-data',\n          defaultMessage: 'No published entries',\n        })}\n      </Widget.NoData>\n    );\n  }\n\n  return <RecentDocumentsTable documents={data} />;\n};\n\nconst LastPublishedWidget = () => {\n  return (\n    <Widget.Root\n      title={{\n        id: 'content-manager.widget.last-published.title',\n        defaultMessage: 'Last published entries',\n      }}\n      icon={CheckCircle}\n    >\n      <LastPublishedWidgetContent />\n    </Widget.Root>\n  );\n};\n\nexport { LastEditedWidget, LastPublishedWidget };\n"],"names":["CellTypography","styled","Typography","attrs","maxWidth","display","DocumentStatus","status","statusVariant","formatMessage","useIntl","_jsx","Status","variant","size","tag","fontWeight","id","defaultMessage","capitalise","RecentDocumentsTable","documents","trackUsage","useTracking","navigate","useNavigate","getEditViewLink","document","isSingleType","kind","kindPath","queryParams","locale","contentTypeUid","documentId","handleRowClick","link","Table","colCount","rowCount","length","Tbody","map","_jsxs","Tr","onClick","cursor","Td","title","textColor","contentTypeDisplayName","Box","aria-hidden","RelativeTime","timestamp","Date","updatedAt","e","stopPropagation","IconButton","Link","to","label","Pencil","LastEditedWidgetContent","data","isLoading","error","useGetRecentDocumentsQuery","action","Widget","Loading","Error","NoData","LastEditedWidget","Root","icon","LastPublishedWidgetContent","LastPublishedWidget","CheckCircle"],"mappings":"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"}