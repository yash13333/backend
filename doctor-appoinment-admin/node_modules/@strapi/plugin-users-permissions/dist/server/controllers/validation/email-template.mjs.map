{"version":3,"file":"email-template.mjs","sources":["../../../../server/controllers/validation/email-template.js"],"sourcesContent":["'use strict';\n\nconst { trim } = require('lodash/fp');\nconst {\n  template: { createLooseInterpolationRegExp, createStrictInterpolationRegExp },\n} = require('@strapi/utils');\n\nconst invalidPatternsRegexes = [\n  // Ignore \"evaluation\" patterns: <% ... %>\n  /<%[^=]([\\s\\S]*?)%>/m,\n  // Ignore basic string interpolations\n  /\\${([^{}]*)}/m,\n];\n\nconst authorizedKeys = [\n  'URL',\n  'ADMIN_URL',\n  'SERVER_URL',\n  'CODE',\n  'USER',\n  'USER.email',\n  'USER.username',\n  'TOKEN',\n];\n\nconst matchAll = (pattern, src) => {\n  const matches = [];\n  let match;\n\n  const regexPatternWithGlobal = RegExp(pattern, 'g');\n\n  // eslint-disable-next-line no-cond-assign\n  while ((match = regexPatternWithGlobal.exec(src))) {\n    const [, group] = match;\n\n    matches.push(trim(group));\n  }\n\n  return matches;\n};\n\nconst isValidEmailTemplate = (template) => {\n  // Check for known invalid patterns\n  for (const reg of invalidPatternsRegexes) {\n    if (reg.test(template)) {\n      return false;\n    }\n  }\n\n  const interpolation = {\n    // Strict interpolation pattern to match only valid groups\n    strict: createStrictInterpolationRegExp(authorizedKeys),\n    // Weak interpolation pattern to match as many group as possible.\n    loose: createLooseInterpolationRegExp(),\n  };\n\n  // Compute both strict & loose matches\n  const strictMatches = matchAll(interpolation.strict, template);\n  const looseMatches = matchAll(interpolation.loose, template);\n\n  // If we have more matches with the loose RegExp than with the strict one,\n  // then it means that at least one of the interpolation group is invalid\n  // Note: In the future, if we wanted to give more details for error formatting\n  // purposes, we could return the difference between the two arrays\n  if (looseMatches.length > strictMatches.length) {\n    return false;\n  }\n\n  return true;\n};\n\nmodule.exports = {\n  isValidEmailTemplate,\n};\n"],"names":["trim","require$$0","template","createLooseInterpolationRegExp","createStrictInterpolationRegExp","require$$1","invalidPatternsRegexes","authorizedKeys","matchAll","pattern","src","matches","match","regexPatternWithGlobal","RegExp","exec","group","push","isValidEmailTemplate","reg","test","interpolation","strict","loose","strictMatches","looseMatches","length","emailTemplate"],"mappings":";;;;;;;;IAEA,MAAM,EAAEA,IAAI,EAAE,GAAGC,UAAAA;IACjB,MAAM,EACJC,UAAU,EAAEC,8BAA8B,EAAEC,+BAA+B,EAAE,EAC9E,GAAGC,UAAAA;AAEJ,IAAA,MAAMC,sBAAyB,GAAA;;AAE7B,QAAA,qBAAA;;AAEA,QAAA;AACD,KAAA;AAED,IAAA,MAAMC,cAAiB,GAAA;AACrB,QAAA,KAAA;AACA,QAAA,WAAA;AACA,QAAA,YAAA;AACA,QAAA,MAAA;AACA,QAAA,MAAA;AACA,QAAA,YAAA;AACA,QAAA,eAAA;AACA,QAAA;AACD,KAAA;IAED,MAAMC,QAAAA,GAAW,CAACC,OAASC,EAAAA,GAAAA,GAAAA;AACzB,QAAA,MAAMC,UAAU,EAAE;QAClB,IAAIC,KAAAA;QAEJ,MAAMC,sBAAAA,GAAyBC,OAAOL,OAAS,EAAA,GAAA,CAAA;;AAG/C,QAAA,MAAQG,KAAQC,GAAAA,sBAAAA,CAAuBE,IAAI,CAACL,GAAO,CAAA,CAAA;YACjD,MAAM,GAAGM,MAAM,GAAGJ,KAAAA;YAElBD,OAAQM,CAAAA,IAAI,CAACjB,IAAKgB,CAAAA,KAAAA,CAAAA,CAAAA;AACnB;QAED,OAAOL,OAAAA;AACT,KAAA;AAEA,IAAA,MAAMO,uBAAuB,CAAChB,QAAAA,GAAAA;;QAE5B,KAAK,MAAMiB,OAAOb,sBAAwB,CAAA;YACxC,IAAIa,GAAAA,CAAIC,IAAI,CAAClB,QAAW,CAAA,EAAA;gBACtB,OAAO,KAAA;AACR;AACF;AAED,QAAA,MAAMmB,aAAgB,GAAA;;AAEpBC,YAAAA,MAAAA,EAAQlB,+BAAgCG,CAAAA,cAAAA,CAAAA;;YAExCgB,KAAOpB,EAAAA,8BAAAA;AACX,SAAA;;AAGE,QAAA,MAAMqB,aAAgBhB,GAAAA,QAAAA,CAASa,aAAcC,CAAAA,MAAM,EAAEpB,QAAAA,CAAAA;AACrD,QAAA,MAAMuB,YAAejB,GAAAA,QAAAA,CAASa,aAAcE,CAAAA,KAAK,EAAErB,QAAAA,CAAAA;;;;;AAMnD,QAAA,IAAIuB,YAAaC,CAAAA,MAAM,GAAGF,aAAAA,CAAcE,MAAM,EAAE;YAC9C,OAAO,KAAA;AACR;QAED,OAAO,IAAA;AACT,KAAA;IAEAC,aAAiB,GAAA;AACfT,QAAAA;AACF,KAAA;;;;;;"}