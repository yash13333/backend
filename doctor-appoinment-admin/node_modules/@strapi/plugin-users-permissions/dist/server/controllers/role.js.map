{"version":3,"file":"role.js","sources":["../../../server/controllers/role.js"],"sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst { async, errors } = require('@strapi/utils');\nconst { getService } = require('../utils');\nconst { validateDeleteRoleBody } = require('./validation/user');\n\nconst { ApplicationError, ValidationError } = errors;\n\nconst sanitizeOutput = async (role) => {\n  const { sanitizeLocalizationFields } = strapi.plugin('i18n').service('sanitize');\n  const schema = strapi.getModel('plugin::users-permissions.role');\n\n  return async.pipe(sanitizeLocalizationFields(schema))(role);\n};\n\nmodule.exports = {\n  /**\n   * Default action.\n   *\n   * @return {Object}\n   */\n  async createRole(ctx) {\n    if (_.isEmpty(ctx.request.body)) {\n      throw new ValidationError('Request body cannot be empty');\n    }\n\n    await getService('role').createRole(ctx.request.body);\n\n    ctx.send({ ok: true });\n  },\n\n  async findOne(ctx) {\n    const { id } = ctx.params;\n\n    const role = await getService('role').findOne(id);\n\n    if (!role) {\n      return ctx.notFound();\n    }\n\n    const safeRole = await sanitizeOutput(role);\n\n    ctx.send({ role: safeRole });\n  },\n\n  async find(ctx) {\n    const roles = await getService('role').find();\n\n    const safeRoles = await Promise.all(roles.map(sanitizeOutput));\n\n    ctx.send({ roles: safeRoles });\n  },\n\n  async updateRole(ctx) {\n    const roleID = ctx.params.role;\n\n    if (_.isEmpty(ctx.request.body)) {\n      throw new ValidationError('Request body cannot be empty');\n    }\n\n    await getService('role').updateRole(roleID, ctx.request.body);\n\n    ctx.send({ ok: true });\n  },\n\n  async deleteRole(ctx) {\n    const roleID = ctx.params.role;\n\n    if (!roleID) {\n      await validateDeleteRoleBody(ctx.params);\n    }\n\n    // Fetch public role.\n    const publicRole = await strapi.db\n      .query('plugin::users-permissions.role')\n      .findOne({ where: { type: 'public' } });\n\n    const publicRoleID = publicRole.id;\n\n    // Prevent from removing the public role.\n    if (roleID.toString() === publicRoleID.toString()) {\n      throw new ApplicationError('Cannot delete public role');\n    }\n\n    await getService('role').deleteRole(roleID, publicRoleID);\n\n    ctx.send({ ok: true });\n  },\n};\n"],"names":["_","require$$0","async","errors","require$$1","getService","require$$2","validateDeleteRoleBody","require$$3","ApplicationError","ValidationError","sanitizeOutput","role","sanitizeLocalizationFields","strapi","plugin","service","schema","getModel","pipe","createRole","ctx","isEmpty","request","body","send","ok","findOne","id","params","notFound","safeRole","find","roles","safeRoles","Promise","all","map","updateRole","roleID","deleteRole","publicRole","db","query","where","type","publicRoleID","toString"],"mappings":"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"}