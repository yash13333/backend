{"version":3,"file":"permission.mjs","sources":["../../../server/services/permission.js"],"sourcesContent":["'use strict';\n\nconst PUBLIC_ROLE_FILTER = { role: { type: 'public' } };\n\nmodule.exports = ({ strapi }) => ({\n  /**\n   * Find permissions associated to a specific role ID\n   *\n   * @param {number} roleID\n   *\n   * @return {object[]}\n   */\n  async findRolePermissions(roleID) {\n    return strapi.db.query('plugin::users-permissions.role').load({ id: roleID }, 'permissions');\n  },\n\n  /**\n   * Find permissions for the public role\n   *\n   * @return {object[]}\n   */\n  async findPublicPermissions() {\n    return strapi.db.query('plugin::users-permissions.permission').findMany({\n      where: PUBLIC_ROLE_FILTER,\n    });\n  },\n\n  /**\n   * Transform a Users-Permissions' action into a content API one\n   *\n   * @param {object} permission\n   * @param {string} permission.action\n   *\n   * @return {{ action: string }}\n   */\n  toContentAPIPermission(permission) {\n    const { action } = permission;\n\n    return { action };\n  },\n});\n"],"names":["PUBLIC_ROLE_FILTER","role","type","permission","strapi","findRolePermissions","roleID","db","query","load","id","findPublicPermissions","findMany","where","toContentAPIPermission","action"],"mappings":";;;;;AAEA,IAAA,MAAMA,kBAAqB,GAAA;QAAEC,IAAM,EAAA;YAAEC,IAAM,EAAA;AAAU;AAAA,KAAA;AAErDC,IAAAA,UAAAA,GAAiB,CAAC,EAAEC,MAAM,EAAE,IAAM;AAClC;;;;;;OAOE,MAAMC,qBAAoBC,MAAM,EAAA;AAC9B,gBAAA,OAAOF,OAAOG,EAAE,CAACC,KAAK,CAAC,gCAAA,CAAA,CAAkCC,IAAI,CAAC;oBAAEC,EAAIJ,EAAAA;iBAAU,EAAA,aAAA,CAAA;AAC/E,aAAA;AAEH;;;;AAIA,OACE,MAAMK,qBAAAA,CAAAA,GAAAA;AACJ,gBAAA,OAAOP,OAAOG,EAAE,CAACC,KAAK,CAAC,sCAAA,CAAA,CAAwCI,QAAQ,CAAC;oBACtEC,KAAOb,EAAAA;AACb,iBAAA,CAAA;AACG,aAAA;AAEH;;;;;;;AAOA,OACEc,wBAAuBX,UAAU,EAAA;gBAC/B,MAAM,EAAEY,MAAM,EAAE,GAAGZ,UAAAA;gBAEnB,OAAO;AAAEY,oBAAAA;AAAM,iBAAA;AAChB;SACH,CAAA;;;;;;"}