{"version":3,"file":"providers.js","sources":["../../../server/services/providers.js"],"sourcesContent":["'use strict';\n\n/**\n * Module dependencies\n */\n\n// Public node modules.\nconst _ = require('lodash');\nconst urlJoin = require('url-join');\n\nconst { getService } = require('../utils');\n\nmodule.exports = ({ strapi }) => {\n  /**\n   * Helper to get profiles\n   *\n   * @param {String}   provider\n   */\n\n  const getProfile = async (provider, query) => {\n    const accessToken = query.access_token || query.code || query.oauth_token;\n\n    const providers = await strapi\n      .store({ type: 'plugin', name: 'users-permissions', key: 'grant' })\n      .get();\n\n    return getService('providers-registry').run({\n      provider,\n      query,\n      accessToken,\n      providers,\n    });\n  };\n\n  /**\n   * Connect thanks to a third-party provider.\n   *\n   *\n   * @param {String}    provider\n   * @param {String}    accessToken\n   *\n   * @return  {*}\n   */\n\n  const connect = async (provider, query) => {\n    const accessToken = query.access_token || query.code || query.oauth_token;\n\n    if (!accessToken) {\n      throw new Error('No access_token.');\n    }\n\n    // Get the profile.\n    const profile = await getProfile(provider, query);\n\n    const email = _.toLower(profile.email);\n\n    // We need at least the mail.\n    if (!email) {\n      throw new Error('Email was not available.');\n    }\n\n    const users = await strapi.db.query('plugin::users-permissions.user').findMany({\n      where: { email },\n    });\n\n    const advancedSettings = await strapi\n      .store({ type: 'plugin', name: 'users-permissions', key: 'advanced' })\n      .get();\n\n    const user = _.find(users, { provider });\n\n    if (_.isEmpty(user) && !advancedSettings.allow_register) {\n      throw new Error('Register action is actually not available.');\n    }\n\n    if (!_.isEmpty(user)) {\n      return user;\n    }\n\n    if (users.length && advancedSettings.unique_email) {\n      throw new Error('Email is already taken.');\n    }\n\n    // Retrieve default role.\n    const defaultRole = await strapi.db\n      .query('plugin::users-permissions.role')\n      .findOne({ where: { type: advancedSettings.default_role } });\n\n    // Create the new user.\n    const newUser = {\n      ...profile,\n      email, // overwrite with lowercased email\n      provider,\n      role: defaultRole.id,\n      confirmed: true,\n    };\n\n    const createdUser = await strapi.db\n      .query('plugin::users-permissions.user')\n      .create({ data: newUser });\n\n    return createdUser;\n  };\n\n  const buildRedirectUri = (provider = '') => {\n    const apiPrefix = strapi.config.get('api.rest.prefix');\n    return urlJoin(\n      strapi.config.get('server.absoluteUrl'),\n      apiPrefix,\n      'connect',\n      provider,\n      'callback'\n    );\n  };\n\n  return {\n    connect,\n    buildRedirectUri,\n  };\n};\n"],"names":["_","require$$0","urlJoin","require$$1","getService","require$$2","providers","strapi","getProfile","provider","query","accessToken","access_token","code","oauth_token","store","type","name","key","get","run","connect","Error","profile","email","toLower","users","db","findMany","where","advancedSettings","user","find","isEmpty","allow_register","length","unique_email","defaultRole","findOne","default_role","newUser","role","id","confirmed","createdUser","create","data","buildRedirectUri","apiPrefix","config"],"mappings":"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"}