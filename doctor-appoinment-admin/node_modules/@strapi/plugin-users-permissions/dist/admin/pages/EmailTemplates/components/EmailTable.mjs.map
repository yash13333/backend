{"version":3,"file":"EmailTable.mjs","sources":["../../../../../admin/src/pages/EmailTemplates/components/EmailTable.jsx"],"sourcesContent":["import * as React from 'react';\n\nimport {\n  IconButton,\n  Table,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n  Typography,\n  VisuallyHidden,\n  Box,\n} from '@strapi/design-system';\nimport { Check, Pencil, ArrowClockwise as Refresh } from '@strapi/icons';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\n\nimport { getTrad } from '../../../utils';\n\nconst EmailTable = ({ canUpdate, onEditClick }) => {\n  const { formatMessage } = useIntl();\n\n  return (\n    <Table colCount={3} rowCount={3}>\n      <Thead>\n        <Tr>\n          <Th width=\"1%\">\n            <VisuallyHidden>\n              {formatMessage({\n                id: getTrad('Email.template.table.icon.label'),\n                defaultMessage: 'icon',\n              })}\n            </VisuallyHidden>\n          </Th>\n          <Th>\n            <Typography variant=\"sigma\" textColor=\"neutral600\">\n              {formatMessage({\n                id: getTrad('Email.template.table.name.label'),\n                defaultMessage: 'name',\n              })}\n            </Typography>\n          </Th>\n          <Th width=\"1%\">\n            <VisuallyHidden>\n              {formatMessage({\n                id: getTrad('Email.template.table.action.label'),\n                defaultMessage: 'action',\n              })}\n            </VisuallyHidden>\n          </Th>\n        </Tr>\n      </Thead>\n      <Tbody>\n        <Tr cursor=\"pointer\" onClick={() => onEditClick('reset_password')}>\n          <Td>\n            <Box width=\"3.2rem\" height=\"3.2rem\" padding=\"0.8rem\">\n              <Refresh\n                aria-label={formatMessage({\n                  id: 'global.reset-password',\n                  defaultMessage: 'Reset password',\n                })}\n              />\n            </Box>\n          </Td>\n          <Td>\n            <Typography>\n              {formatMessage({\n                id: 'global.reset-password',\n                defaultMessage: 'Reset password',\n              })}\n            </Typography>\n          </Td>\n          <Td onClick={(e) => e.stopPropagation()}>\n            <IconButton\n              onClick={() => onEditClick('reset_password')}\n              label={formatMessage({\n                id: getTrad('Email.template.form.edit.label'),\n                defaultMessage: 'Edit a template',\n              })}\n              variant=\"ghost\"\n              disabled={!canUpdate}\n            >\n              <Pencil />\n            </IconButton>\n          </Td>\n        </Tr>\n        <Tr cursor=\"pointer\" onClick={() => onEditClick('email_confirmation')}>\n          <Td>\n            <Box width=\"3.2rem\" height=\"3.2rem\" padding=\"0.8rem\">\n              <Check\n                aria-label={formatMessage({\n                  id: getTrad('Email.template.email_confirmation'),\n                  defaultMessage: 'Email address confirmation',\n                })}\n              />\n            </Box>\n          </Td>\n          <Td>\n            <Typography>\n              {formatMessage({\n                id: getTrad('Email.template.email_confirmation'),\n                defaultMessage: 'Email address confirmation',\n              })}\n            </Typography>\n          </Td>\n          <Td onClick={(e) => e.stopPropagation()}>\n            <IconButton\n              onClick={() => onEditClick('email_confirmation')}\n              label={formatMessage({\n                id: getTrad('Email.template.form.edit.label'),\n                defaultMessage: 'Edit a template',\n              })}\n              variant=\"ghost\"\n              disabled={!canUpdate}\n            >\n              <Pencil />\n            </IconButton>\n          </Td>\n        </Tr>\n      </Tbody>\n    </Table>\n  );\n};\n\nEmailTable.propTypes = {\n  canUpdate: PropTypes.bool.isRequired,\n  onEditClick: PropTypes.func.isRequired,\n};\n\nexport default EmailTable;\n"],"names":["EmailTable","canUpdate","onEditClick","formatMessage","useIntl","_jsxs","Table","colCount","rowCount","_jsx","Thead","Tr","Th","width","VisuallyHidden","id","getTrad","defaultMessage","Typography","variant","textColor","Tbody","cursor","onClick","Td","Box","height","padding","Refresh","aria-label","e","stopPropagation","IconButton","label","disabled","Pencil","Check","propTypes","PropTypes","bool","isRequired","func"],"mappings":";;;;;;;;;AAoBA,MAAMA,aAAa,CAAC,EAAEC,SAAS,EAAEC,WAAW,EAAE,GAAA;IAC5C,MAAM,EAAEC,aAAa,EAAE,GAAGC,OAAAA,EAAAA;AAE1B,IAAA,qBACEC,IAACC,CAAAA,KAAAA,EAAAA;QAAMC,QAAU,EAAA,CAAA;QAAGC,QAAU,EAAA,CAAA;;0BAC5BC,GAACC,CAAAA,KAAAA,EAAAA;AACC,gBAAA,QAAA,gBAAAL,IAACM,CAAAA,EAAAA,EAAAA;;sCACCF,GAACG,CAAAA,EAAAA,EAAAA;4BAAGC,KAAM,EAAA,IAAA;AACR,4BAAA,QAAA,gBAAAJ,GAACK,CAAAA,cAAAA,EAAAA;0CACEX,aAAc,CAAA;AACbY,oCAAAA,EAAAA,EAAIC,OAAQ,CAAA,iCAAA,CAAA;oCACZC,cAAgB,EAAA;AAClB,iCAAA;;;sCAGJR,GAACG,CAAAA,EAAAA,EAAAA;AACC,4BAAA,QAAA,gBAAAH,GAACS,CAAAA,UAAAA,EAAAA;gCAAWC,OAAQ,EAAA,OAAA;gCAAQC,SAAU,EAAA,YAAA;0CACnCjB,aAAc,CAAA;AACbY,oCAAAA,EAAAA,EAAIC,OAAQ,CAAA,iCAAA,CAAA;oCACZC,cAAgB,EAAA;AAClB,iCAAA;;;sCAGJR,GAACG,CAAAA,EAAAA,EAAAA;4BAAGC,KAAM,EAAA,IAAA;AACR,4BAAA,QAAA,gBAAAJ,GAACK,CAAAA,cAAAA,EAAAA;0CACEX,aAAc,CAAA;AACbY,oCAAAA,EAAAA,EAAIC,OAAQ,CAAA,mCAAA,CAAA;oCACZC,cAAgB,EAAA;AAClB,iCAAA;;;;;;0BAKRZ,IAACgB,CAAAA,KAAAA,EAAAA;;kCACChB,IAACM,CAAAA,EAAAA,EAAAA;wBAAGW,MAAO,EAAA,SAAA;AAAUC,wBAAAA,OAAAA,EAAS,IAAMrB,WAAY,CAAA,gBAAA,CAAA;;0CAC9CO,GAACe,CAAAA,EAAAA,EAAAA;AACC,gCAAA,QAAA,gBAAAf,GAACgB,CAAAA,GAAAA,EAAAA;oCAAIZ,KAAM,EAAA,QAAA;oCAASa,MAAO,EAAA,QAAA;oCAASC,OAAQ,EAAA,QAAA;AAC1C,oCAAA,QAAA,gBAAAlB,GAACmB,CAAAA,cAAAA,EAAAA;AACCC,wCAAAA,YAAAA,EAAY1B,aAAc,CAAA;4CACxBY,EAAI,EAAA,uBAAA;4CACJE,cAAgB,EAAA;AAClB,yCAAA;;;;0CAINR,GAACe,CAAAA,EAAAA,EAAAA;AACC,gCAAA,QAAA,gBAAAf,GAACS,CAAAA,UAAAA,EAAAA;8CACEf,aAAc,CAAA;wCACbY,EAAI,EAAA,uBAAA;wCACJE,cAAgB,EAAA;AAClB,qCAAA;;;0CAGJR,GAACe,CAAAA,EAAAA,EAAAA;gCAAGD,OAAS,EAAA,CAACO,CAAMA,GAAAA,CAAAA,CAAEC,eAAe,EAAA;AACnC,gCAAA,QAAA,gBAAAtB,GAACuB,CAAAA,UAAAA,EAAAA;AACCT,oCAAAA,OAAAA,EAAS,IAAMrB,WAAY,CAAA,gBAAA,CAAA;AAC3B+B,oCAAAA,KAAAA,EAAO9B,aAAc,CAAA;AACnBY,wCAAAA,EAAAA,EAAIC,OAAQ,CAAA,gCAAA,CAAA;wCACZC,cAAgB,EAAA;AAClB,qCAAA,CAAA;oCACAE,OAAQ,EAAA,OAAA;AACRe,oCAAAA,QAAAA,EAAU,CAACjC,SAAAA;AAEX,oCAAA,QAAA,gBAAAQ,GAAC0B,CAAAA,MAAAA,EAAAA,EAAAA;;;;;kCAIP9B,IAACM,CAAAA,EAAAA,EAAAA;wBAAGW,MAAO,EAAA,SAAA;AAAUC,wBAAAA,OAAAA,EAAS,IAAMrB,WAAY,CAAA,oBAAA,CAAA;;0CAC9CO,GAACe,CAAAA,EAAAA,EAAAA;AACC,gCAAA,QAAA,gBAAAf,GAACgB,CAAAA,GAAAA,EAAAA;oCAAIZ,KAAM,EAAA,QAAA;oCAASa,MAAO,EAAA,QAAA;oCAASC,OAAQ,EAAA,QAAA;AAC1C,oCAAA,QAAA,gBAAAlB,GAAC2B,CAAAA,KAAAA,EAAAA;AACCP,wCAAAA,YAAAA,EAAY1B,aAAc,CAAA;AACxBY,4CAAAA,EAAAA,EAAIC,OAAQ,CAAA,mCAAA,CAAA;4CACZC,cAAgB,EAAA;AAClB,yCAAA;;;;0CAINR,GAACe,CAAAA,EAAAA,EAAAA;AACC,gCAAA,QAAA,gBAAAf,GAACS,CAAAA,UAAAA,EAAAA;8CACEf,aAAc,CAAA;AACbY,wCAAAA,EAAAA,EAAIC,OAAQ,CAAA,mCAAA,CAAA;wCACZC,cAAgB,EAAA;AAClB,qCAAA;;;0CAGJR,GAACe,CAAAA,EAAAA,EAAAA;gCAAGD,OAAS,EAAA,CAACO,CAAMA,GAAAA,CAAAA,CAAEC,eAAe,EAAA;AACnC,gCAAA,QAAA,gBAAAtB,GAACuB,CAAAA,UAAAA,EAAAA;AACCT,oCAAAA,OAAAA,EAAS,IAAMrB,WAAY,CAAA,oBAAA,CAAA;AAC3B+B,oCAAAA,KAAAA,EAAO9B,aAAc,CAAA;AACnBY,wCAAAA,EAAAA,EAAIC,OAAQ,CAAA,gCAAA,CAAA;wCACZC,cAAgB,EAAA;AAClB,qCAAA,CAAA;oCACAE,OAAQ,EAAA,OAAA;AACRe,oCAAAA,QAAAA,EAAU,CAACjC,SAAAA;AAEX,oCAAA,QAAA,gBAAAQ,GAAC0B,CAAAA,MAAAA,EAAAA,EAAAA;;;;;;;;;AAOf;AAEAnC,UAAAA,CAAWqC,SAAS,GAAG;IACrBpC,SAAWqC,EAAAA,SAAAA,CAAUC,IAAI,CAACC,UAAU;IACpCtC,WAAaoC,EAAAA,SAAAA,CAAUG,IAAI,CAACD;AAC9B,CAAA;;;;"}