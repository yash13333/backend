{"version":3,"file":"EmailForm.js","sources":["../../../../../admin/src/pages/EmailTemplates/components/EmailForm.jsx"],"sourcesContent":["import * as React from 'react';\n\nimport { Button, Grid, Modal, Breadcrumbs, Crumb, VisuallyHidden } from '@strapi/design-system';\nimport { Form, InputRenderer } from '@strapi/strapi/admin';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\n\nimport { getTrad } from '../../../utils';\nimport schema from '../utils/schema';\n\nconst EmailForm = ({ template = {}, onToggle, open, onSubmit }) => {\n  const { formatMessage } = useIntl();\n\n  return (\n    <Modal.Root open={open} onOpenChange={onToggle}>\n      <Modal.Content>\n        <Modal.Header>\n          <Breadcrumbs\n            label={`${formatMessage({\n              id: getTrad('PopUpForm.header.edit.email-templates'),\n              defaultMessage: 'Edit email template',\n            })}, ${\n              template.display\n                ? formatMessage({\n                    id: getTrad(template.display),\n                    defaultMessage: template.display,\n                  })\n                : ''\n            }`}\n          >\n            <Crumb>\n              {formatMessage({\n                id: getTrad('PopUpForm.header.edit.email-templates'),\n                defaultMessage: 'Edit email template',\n              })}\n            </Crumb>\n            <Crumb isCurrent>\n              {template.display\n                ? formatMessage({ id: getTrad(template.display), defaultMessage: template.display })\n                : ''}\n            </Crumb>\n          </Breadcrumbs>\n          <VisuallyHidden>\n            <Modal.Title>\n              {`${formatMessage({\n                id: getTrad('PopUpForm.header.edit.email-templates'),\n                defaultMessage: 'Edit email template',\n              })}, ${template.display ? formatMessage({ id: getTrad(template.display), defaultMessage: template.display }) : ''}`}\n            </Modal.Title>\n          </VisuallyHidden>\n        </Modal.Header>\n        <Form onSubmit={onSubmit} initialValues={template} validationSchema={schema}>\n          {({ isSubmitting }) => {\n            return (\n              <>\n                <Modal.Body>\n                  <Grid.Root gap={5}>\n                    {[\n                      {\n                        label: formatMessage({\n                          id: getTrad('PopUpForm.Email.options.from.name.label'),\n                          defaultMessage: 'Shipper name',\n                        }),\n                        name: 'options.from.name',\n                        size: 6,\n                        type: 'string',\n                      },\n                      {\n                        label: formatMessage({\n                          id: getTrad('PopUpForm.Email.options.from.email.label'),\n                          defaultMessage: 'Shipper email',\n                        }),\n                        name: 'options.from.email',\n                        size: 6,\n                        type: 'string',\n                      },\n                      {\n                        label: formatMessage({\n                          id: getTrad('PopUpForm.Email.options.response_email.label'),\n                          defaultMessage: 'Response email',\n                        }),\n                        name: 'options.response_email',\n                        size: 6,\n                        type: 'string',\n                      },\n                      {\n                        label: formatMessage({\n                          id: getTrad('PopUpForm.Email.options.object.label'),\n                          defaultMessage: 'Subject',\n                        }),\n                        name: 'options.object',\n                        size: 6,\n                        type: 'string',\n                      },\n                      {\n                        label: formatMessage({\n                          id: getTrad('PopUpForm.Email.options.message.label'),\n                          defaultMessage: 'Message',\n                        }),\n                        name: 'options.message',\n                        size: 12,\n                        type: 'text',\n                      },\n                    ].map(({ size, ...field }) => (\n                      <Grid.Item\n                        key={field.name}\n                        col={size}\n                        direction=\"column\"\n                        alignItems=\"stretch\"\n                      >\n                        <InputRenderer {...field} />\n                      </Grid.Item>\n                    ))}\n                  </Grid.Root>\n                </Modal.Body>\n                <Modal.Footer>\n                  <Modal.Close>\n                    <Button variant=\"tertiary\">Cancel</Button>\n                  </Modal.Close>\n                  <Button loading={isSubmitting} type=\"submit\">\n                    Finish\n                  </Button>\n                </Modal.Footer>\n              </>\n            );\n          }}\n        </Form>\n      </Modal.Content>\n    </Modal.Root>\n  );\n};\n\nEmailForm.defaultProps = {\n  template: {},\n};\n\nEmailForm.propTypes = {\n  template: PropTypes.shape({\n    display: PropTypes.string,\n    icon: PropTypes.string,\n    options: PropTypes.shape({\n      from: PropTypes.shape({\n        name: PropTypes.string,\n        email: PropTypes.string,\n      }),\n      message: PropTypes.string,\n      object: PropTypes.string,\n      response_email: PropTypes.string,\n    }),\n  }),\n  open: PropTypes.bool.isRequired,\n  onSubmit: PropTypes.func.isRequired,\n  onToggle: PropTypes.func.isRequired,\n};\n\nexport default EmailForm;\n"],"names":["EmailForm","template","onToggle","open","onSubmit","formatMessage","useIntl","_jsx","Modal","Root","onOpenChange","_jsxs","Content","Header","Breadcrumbs","label","id","getTrad","defaultMessage","display","Crumb","isCurrent","VisuallyHidden","Title","Form","initialValues","validationSchema","schema","isSubmitting","_Fragment","Body","Grid","gap","name","size","type","map","field","Item","col","direction","alignItems","InputRenderer","Footer","Close","Button","variant","loading","defaultProps","propTypes","PropTypes","shape","string","icon","options","from","email","message","object","response_email","bool","isRequired","func"],"mappings":"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"}