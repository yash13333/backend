{"version":3,"file":"index.js","sources":["../../../../admin/src/pages/AdvancedSettings/index.jsx"],"sourcesContent":["import * as React from 'react';\n\nimport { Box, Button, Flex, Grid, Typography, useNotifyAT } from '@strapi/design-system';\nimport { Check } from '@strapi/icons';\nimport {\n  useAPIErrorHandler,\n  Page,\n  Form,\n  InputRenderer,\n  useNotification,\n  useFetchClient,\n  useRBAC,\n  Layouts,\n} from '@strapi/strapi/admin';\nimport { useIntl } from 'react-intl';\nimport { useMutation, useQuery, useQueryClient } from 'react-query';\n\nimport { PERMISSIONS } from '../../constants';\nimport { getTrad } from '../../utils';\n\nimport layout from './utils/layout';\nimport schema from './utils/schema';\n\nconst ProtectedAdvancedSettingsPage = () => (\n  <Page.Protect permissions={PERMISSIONS.readAdvancedSettings}>\n    <AdvancedSettingsPage />\n  </Page.Protect>\n);\n\nconst AdvancedSettingsPage = () => {\n  const { formatMessage } = useIntl();\n  const { toggleNotification } = useNotification();\n  const { notifyStatus } = useNotifyAT();\n  const queryClient = useQueryClient();\n  const { get, put } = useFetchClient();\n  const { formatAPIError } = useAPIErrorHandler();\n\n  const {\n    isLoading: isLoadingForPermissions,\n    allowedActions: { canUpdate },\n  } = useRBAC({ update: PERMISSIONS.updateAdvancedSettings });\n\n  const { isLoading: isLoadingData, data } = useQuery(\n    ['users-permissions', 'advanced'],\n    async () => {\n      const { data } = await get('/users-permissions/advanced');\n\n      return data;\n    },\n    {\n      onSuccess() {\n        notifyStatus(\n          formatMessage({\n            id: getTrad('Form.advancedSettings.data.loaded'),\n            defaultMessage: 'Advanced settings data has been loaded',\n          })\n        );\n      },\n      onError() {\n        toggleNotification({\n          type: 'danger',\n          message: formatMessage({\n            id: getTrad('notification.error'),\n            defaultMessage: 'An error occured',\n          }),\n        });\n      },\n    }\n  );\n\n  const isLoading = isLoadingForPermissions || isLoadingData;\n\n  const submitMutation = useMutation((body) => put('/users-permissions/advanced', body), {\n    async onSuccess() {\n      await queryClient.invalidateQueries(['users-permissions', 'advanced']);\n\n      toggleNotification({\n        type: 'success',\n        message: formatMessage({\n          id: getTrad('notification.success.saved'),\n          defaultMessage: 'Saved',\n        }),\n      });\n    },\n    onError(error) {\n      toggleNotification({\n        type: 'danger',\n        message: formatAPIError(error),\n      });\n    },\n    refetchActive: true,\n  });\n\n  const { isLoading: isSubmittingForm } = submitMutation;\n\n  const handleSubmit = async (body) => {\n    submitMutation.mutate({\n      ...body,\n      email_confirmation_redirection: body.email_confirmation\n        ? body.email_confirmation_redirection\n        : '',\n    });\n  };\n\n  if (isLoading) {\n    return <Page.Loading />;\n  }\n\n  return (\n    <Page.Main aria-busy={isSubmittingForm}>\n      <Page.Title>\n        {formatMessage(\n          { id: 'Settings.PageTitle', defaultMessage: 'Settings - {name}' },\n          {\n            name: formatMessage({\n              id: getTrad('HeaderNav.link.advancedSettings'),\n              defaultMessage: 'Advanced Settings',\n            }),\n          }\n        )}\n      </Page.Title>\n      <Form onSubmit={handleSubmit} initialValues={data.settings} validationSchema={schema}>\n        {({ values, isSubmitting, modified }) => {\n          return (\n            <>\n              <Layouts.Header\n                title={formatMessage({\n                  id: getTrad('HeaderNav.link.advancedSettings'),\n                  defaultMessage: 'Advanced Settings',\n                })}\n                primaryAction={\n                  <Button\n                    loading={isSubmitting}\n                    type=\"submit\"\n                    disabled={!modified || !canUpdate}\n                    startIcon={<Check />}\n                    size=\"S\"\n                  >\n                    {formatMessage({ id: 'global.save', defaultMessage: 'Save' })}\n                  </Button>\n                }\n              />\n              <Layouts.Content>\n                <Box\n                  background=\"neutral0\"\n                  hasRadius\n                  shadow=\"filterShadow\"\n                  paddingTop={6}\n                  paddingBottom={6}\n                  paddingLeft={7}\n                  paddingRight={7}\n                >\n                  <Flex direction=\"column\" alignItems=\"stretch\" gap={4}>\n                    <Typography variant=\"delta\" tag=\"h2\">\n                      {formatMessage({\n                        id: 'global.settings',\n                        defaultMessage: 'Settings',\n                      })}\n                    </Typography>\n                    <Grid.Root gap={6}>\n                      {[\n                        {\n                          label: {\n                            id: getTrad('EditForm.inputSelect.label.role'),\n                            defaultMessage: 'Default role for authenticated users',\n                          },\n                          hint: {\n                            id: getTrad('EditForm.inputSelect.description.role'),\n                            defaultMessage:\n                              'It will attach the new authenticated user to the selected role.',\n                          },\n                          options: data.roles.map((role) => ({\n                            label: role.name,\n                            value: role.type,\n                          })),\n                          name: 'default_role',\n                          size: 6,\n                          type: 'enumeration',\n                        },\n                        ...layout,\n                      ].map(({ size, ...field }) => (\n                        <Grid.Item\n                          key={field.name}\n                          col={size}\n                          direction=\"column\"\n                          alignItems=\"stretch\"\n                        >\n                          <InputRenderer\n                            {...field}\n                            disabled={\n                              field.name === 'email_confirmation_redirection' &&\n                              values.email_confirmation === false\n                            }\n                            label={formatMessage(field.label)}\n                            hint={field.hint ? formatMessage(field.hint) : undefined}\n                            placeholder={\n                              field.placeholder ? formatMessage(field.placeholder) : undefined\n                            }\n                          />\n                        </Grid.Item>\n                      ))}\n                    </Grid.Root>\n                  </Flex>\n                </Box>\n              </Layouts.Content>\n            </>\n          );\n        }}\n      </Form>\n    </Page.Main>\n  );\n};\n\nexport { ProtectedAdvancedSettingsPage, AdvancedSettingsPage };\n"],"names":["ProtectedAdvancedSettingsPage","_jsx","Page","Protect","permissions","PERMISSIONS","readAdvancedSettings","AdvancedSettingsPage","formatMessage","useIntl","toggleNotification","useNotification","notifyStatus","useNotifyAT","queryClient","useQueryClient","get","put","useFetchClient","formatAPIError","useAPIErrorHandler","isLoading","isLoadingForPermissions","allowedActions","canUpdate","useRBAC","update","updateAdvancedSettings","isLoadingData","data","useQuery","onSuccess","id","getTrad","defaultMessage","onError","type","message","submitMutation","useMutation","body","invalidateQueries","error","refetchActive","isSubmittingForm","handleSubmit","mutate","email_confirmation_redirection","email_confirmation","Loading","_jsxs","Main","aria-busy","Title","name","Form","onSubmit","initialValues","settings","validationSchema","schema","values","isSubmitting","modified","_Fragment","Layouts","Header","title","primaryAction","Button","loading","disabled","startIcon","Check","size","Content","Box","background","hasRadius","shadow","paddingTop","paddingBottom","paddingLeft","paddingRight","Flex","direction","alignItems","gap","Typography","variant","tag","Grid","Root","label","hint","options","roles","map","role","value","layout","field","Item","col","InputRenderer","undefined","placeholder"],"mappings":"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"}