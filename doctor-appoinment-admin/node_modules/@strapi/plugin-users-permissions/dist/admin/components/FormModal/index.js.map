{"version":3,"file":"index.js","sources":["../../../../admin/src/components/FormModal/index.jsx"],"sourcesContent":["/**\n *\n * FormModal\n *\n */\n\nimport * as React from 'react';\n\nimport { Button, Flex, Grid, Modal, Breadcrumbs, Crumb } from '@strapi/design-system';\nimport { Form, Formik } from 'formik';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\n\nimport Input from './Input';\n\nconst FormModal = ({\n  headerBreadcrumbs,\n  initialData,\n  isSubmiting,\n  layout,\n  isOpen,\n  onSubmit,\n  onToggle,\n  providerToEditName,\n}) => {\n  const { formatMessage } = useIntl();\n\n  return (\n    <Modal.Root open={isOpen} onOpenChange={onToggle}>\n      <Modal.Content>\n        <Modal.Header>\n          <Breadcrumbs label={headerBreadcrumbs.join(', ')}>\n            {headerBreadcrumbs.map((crumb, index, arr) => (\n              <Crumb isCurrent={index === arr.length - 1} key={crumb}>\n                {crumb}\n              </Crumb>\n            ))}\n          </Breadcrumbs>\n        </Modal.Header>\n        <Formik\n          onSubmit={(values) => onSubmit(values)}\n          initialValues={initialData}\n          validationSchema={layout.schema}\n          validateOnChange={false}\n        >\n          {({ errors, handleChange, values }) => {\n            return (\n              <Form>\n                <Modal.Body>\n                  <Flex direction=\"column\" alignItems=\"stretch\" gap={1}>\n                    <Grid.Root gap={5}>\n                      {layout.form.map((row) => {\n                        return row.map((input) => {\n                          return (\n                            <Grid.Item\n                              key={input.name}\n                              col={input.size}\n                              xs={12}\n                              direction=\"column\"\n                              alignItems=\"stretch\"\n                            >\n                              <Input\n                                {...input}\n                                error={errors[input.name]}\n                                onChange={handleChange}\n                                value={values[input.name]}\n                                providerToEditName={providerToEditName}\n                              />\n                            </Grid.Item>\n                          );\n                        });\n                      })}\n                    </Grid.Root>\n                  </Flex>\n                </Modal.Body>\n                <Modal.Footer>\n                  <Button variant=\"tertiary\" onClick={onToggle} type=\"button\">\n                    {formatMessage({\n                      id: 'app.components.Button.cancel',\n                      defaultMessage: 'Cancel',\n                    })}\n                  </Button>\n                  <Button type=\"submit\" loading={isSubmiting}>\n                    {formatMessage({ id: 'global.save', defaultMessage: 'Save' })}\n                  </Button>\n                </Modal.Footer>\n              </Form>\n            );\n          }}\n        </Formik>\n      </Modal.Content>\n    </Modal.Root>\n  );\n};\n\nFormModal.defaultProps = {\n  initialData: null,\n  providerToEditName: null,\n};\n\nFormModal.propTypes = {\n  headerBreadcrumbs: PropTypes.arrayOf(PropTypes.string).isRequired,\n  initialData: PropTypes.object,\n  layout: PropTypes.shape({\n    form: PropTypes.arrayOf(PropTypes.array),\n    schema: PropTypes.object,\n  }).isRequired,\n  isOpen: PropTypes.bool.isRequired,\n  isSubmiting: PropTypes.bool.isRequired,\n  onSubmit: PropTypes.func.isRequired,\n  onToggle: PropTypes.func.isRequired,\n  providerToEditName: PropTypes.string,\n};\n\nexport default FormModal;\n"],"names":["FormModal","headerBreadcrumbs","initialData","isSubmiting","layout","isOpen","onSubmit","onToggle","providerToEditName","formatMessage","useIntl","_jsx","Modal","Root","open","onOpenChange","_jsxs","Content","Header","Breadcrumbs","label","join","map","crumb","index","arr","Crumb","isCurrent","length","Formik","values","initialValues","validationSchema","schema","validateOnChange","errors","handleChange","Form","Body","Flex","direction","alignItems","gap","Grid","form","row","input","Item","col","size","xs","Input","error","name","onChange","value","Footer","Button","variant","onClick","type","id","defaultMessage","loading","defaultProps","propTypes","PropTypes","arrayOf","string","isRequired","object","shape","array","bool","func"],"mappings":"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"}