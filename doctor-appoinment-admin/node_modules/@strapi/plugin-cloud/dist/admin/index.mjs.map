{"version":3,"file":"index.mjs","sources":["../../admin/src/index.ts"],"sourcesContent":["/* eslint-disable check-file/filename-naming-convention */\n\nimport { Cloud } from '@strapi/icons';\n\nimport { Initializer } from './components/Initializer';\nimport { pluginId } from './pluginId';\nimport { prefixPluginTranslations } from './utils/prefixPluginTranslations';\n\nconst name = 'Deploy';\n\n// eslint-disable-next-line import/no-default-export\nexport default {\n  register(app: any) {\n    const { backendURL } = window.strapi;\n\n    // Only add the plugin menu link and registering it if the project is on development (localhost).\n    if (backendURL?.includes('localhost')) {\n      app.addMenuLink({\n        to: `plugins/${pluginId}`,\n        icon: Cloud,\n        intlLabel: {\n          id: `${pluginId}.plugin.name`,\n          defaultMessage: name,\n        },\n        Component: async () => {\n          const { App } = await import('./pages/App');\n\n          return App;\n        },\n      });\n      const plugin = {\n        id: pluginId,\n        initializer: Initializer,\n        isReady: false,\n        name,\n      };\n\n      app.registerPlugin(plugin);\n    }\n  },\n\n  async registerTrads(app: any) {\n    const { locales } = app;\n\n    const importedTrads = await Promise.all(\n      (locales as any[]).map((locale) => {\n        return import(`./translations/${locale}.json`)\n          .then(({ default: data }) => {\n            return {\n              data: prefixPluginTranslations(data, pluginId),\n              locale,\n            };\n          })\n          .catch(() => {\n            return {\n              data: {},\n              locale,\n            };\n          });\n      })\n    );\n\n    return Promise.resolve(importedTrads);\n  },\n};\n"],"names":["name","register","app","backendURL","window","strapi","includes","addMenuLink","to","pluginId","icon","Cloud","intlLabel","id","defaultMessage","Component","App","plugin","initializer","Initializer","isReady","registerPlugin","registerTrads","locales","importedTrads","Promise","all","map","locale","then","default","data","prefixPluginTranslations","catch","resolve"],"mappings":";;;;;;;;;;;;;;;;;AAQA,MAAMA,IAAO,GAAA,QAAA;AAEb;AACA,YAAe;AACbC,IAAAA,QAAAA,CAAAA,CAASC,GAAQ,EAAA;AACf,QAAA,MAAM,EAAEC,UAAU,EAAE,GAAGC,OAAOC,MAAM;;QAGpC,IAAIF,UAAAA,EAAYG,SAAS,WAAc,CAAA,EAAA;AACrCJ,YAAAA,GAAAA,CAAIK,WAAW,CAAC;AACdC,gBAAAA,EAAAA,EAAI,CAAC,QAAQ,EAAEC,QAAAA,CAAS,CAAC;gBACzBC,IAAMC,EAAAA,KAAAA;gBACNC,SAAW,EAAA;AACTC,oBAAAA,EAAAA,EAAI,CAAC,EAAEJ,QAAS,CAAA,YAAY,CAAC;oBAC7BK,cAAgBd,EAAAA;AAClB,iBAAA;gBACAe,SAAW,EAAA,UAAA;AACT,oBAAA,MAAM,EAAEC,GAAG,EAAE,GAAG,MAAM,OAAO,iBAAA,CAAA;oBAE7B,OAAOA,GAAAA;AACT;AACF,aAAA,CAAA;AACA,YAAA,MAAMC,MAAS,GAAA;gBACbJ,EAAIJ,EAAAA,QAAAA;gBACJS,WAAaC,EAAAA,WAAAA;gBACbC,OAAS,EAAA,KAAA;AACTpB,gBAAAA;AACF,aAAA;AAEAE,YAAAA,GAAAA,CAAImB,cAAc,CAACJ,MAAAA,CAAAA;AACrB;AACF,KAAA;AAEA,IAAA,MAAMK,eAAcpB,GAAQ,EAAA;QAC1B,MAAM,EAAEqB,OAAO,EAAE,GAAGrB,GAAAA;QAEpB,MAAMsB,aAAAA,GAAgB,MAAMC,OAAQC,CAAAA,GAAG,CACrC,OAACH,CAAkBI,GAAG,CAAC,CAACC,MAAAA,GAAAA;AACtB,YAAA,OAAO,iCAAM,CAAC,CAAC,eAAe,EAAEA,MAAO,CAAA,KAAK,CAAC,CAAA,CAC1CC,IAAI,CAAC,CAAC,EAAEC,OAAAA,EAASC,IAAI,EAAE,GAAA;gBACtB,OAAO;AACLA,oBAAAA,IAAAA,EAAMC,yBAAyBD,IAAMtB,EAAAA,QAAAA,CAAAA;AACrCmB,oBAAAA;AACF,iBAAA;AACF,aAAA,CAAA,CACCK,KAAK,CAAC,IAAA;gBACL,OAAO;AACLF,oBAAAA,IAAAA,EAAM,EAAC;AACPH,oBAAAA;AACF,iBAAA;AACF,aAAA,CAAA;AACJ,SAAA,CAAA,CAAA;QAGF,OAAOH,OAAAA,CAAQS,OAAO,CAACV,aAAAA,CAAAA;AACzB;AACF,CAAE;;;;"}