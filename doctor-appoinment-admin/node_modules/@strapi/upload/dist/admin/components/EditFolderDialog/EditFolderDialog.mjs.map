{"version":3,"file":"EditFolderDialog.mjs","sources":["../../../../admin/src/components/EditFolderDialog/EditFolderDialog.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport { useTracking, useNotification } from '@strapi/admin/strapi-admin';\nimport {\n  Button,\n  Field,\n  Flex,\n  Grid,\n  Loader,\n  Modal,\n  TextInput,\n  Typography,\n} from '@strapi/design-system';\nimport { Form, Formik, FormikErrors } from 'formik';\nimport isEmpty from 'lodash/isEmpty';\nimport { useIntl } from 'react-intl';\nimport * as yup from 'yup';\n\nimport { useBulkRemove } from '../../hooks/useBulkRemove';\nimport { useEditFolder } from '../../hooks/useEditFolder';\nimport { useFolderStructure } from '../../hooks/useFolderStructure';\nimport { useMediaLibraryPermissions } from '../../hooks/useMediaLibraryPermissions';\nimport { findRecursiveFolderByValue, getTrad, getAPIInnerErrors } from '../../utils';\nimport { ContextInfo } from '../ContextInfo/ContextInfo';\nimport { SelectTree } from '../SelectTree/SelectTree';\n\nimport { EditFolderModalHeader } from './ModalHeader/ModalHeader';\nimport { RemoveFolderDialog } from './RemoveFolderDialog';\n\nimport type { FolderDefinition } from '../../../../shared/contracts/folders';\nimport type { FetchError } from '@strapi/admin/strapi-admin';\n\nconst folderSchema = yup.object({\n  name: yup.string().required(),\n  parent: yup\n    .object({\n      label: yup.string(),\n      value: yup.number().nullable(true),\n    })\n    .nullable(true),\n});\n\ninterface ValuesSubmit {\n  name: string;\n  parent: null | { label?: string; value?: number };\n}\n\nexport interface EditFolderDialogProps {\n  parentFolderId?: string | number | null;\n  location?: string;\n  folder?: FolderDefinition;\n  open?: boolean;\n  onClose: (payload?: { created?: boolean | undefined } | boolean) => void;\n}\n\nexport const EditFolderContent = ({\n  onClose,\n  folder,\n  location,\n  parentFolderId,\n}: EditFolderDialogProps) => {\n  const { data: folderStructure, isLoading: folderStructureIsLoading } = useFolderStructure({\n    enabled: true,\n  });\n  const { canCreate, isLoading: isLoadingPermissions, canUpdate } = useMediaLibraryPermissions();\n  const [showConfirmDialog, setShowConfirmDialog] = React.useState(false);\n  const { formatMessage, formatDate } = useIntl();\n  const { trackUsage } = useTracking();\n  const { editFolder, isLoading: isEditFolderLoading } = useEditFolder();\n  const { remove } = useBulkRemove();\n  const { toggleNotification } = useNotification();\n  const isLoading = isLoadingPermissions || folderStructureIsLoading;\n  const isEditing = !!folder;\n  const formDisabled = (folder && !canUpdate) || (!folder && !canCreate);\n  const initialFormData: ValuesSubmit = !folderStructureIsLoading\n    ? {\n        name: folder?.name ?? '',\n        parent: {\n          /* ideally we would use folderStructure[0].value, but since it is null\n         react complains about rendering null as field value */\n          value: parentFolderId ? parseInt(parentFolderId.toString(), 10) : undefined,\n          label: parentFolderId\n            ? folderStructure &&\n              findRecursiveFolderByValue(folderStructure, parseInt(parentFolderId.toString(), 10))\n                ?.label\n            : folderStructure?.[0].label,\n        },\n      }\n    : {\n        name: '',\n        parent: null,\n      };\n\n  const handleSubmit = async (\n    values: ValuesSubmit,\n    { setErrors }: { setErrors: (errors: FormikErrors<ValuesSubmit>) => void }\n  ) => {\n    try {\n      await editFolder(\n        {\n          ...values,\n          parent: values.parent?.value ?? null,\n        },\n        folder?.id\n      );\n\n      toggleNotification({\n        type: 'success',\n        message: isEditing\n          ? formatMessage({\n              id: getTrad('modal.folder-notification-edited-success'),\n              defaultMessage: 'Folder successfully edited',\n            })\n          : formatMessage({\n              id: getTrad('modal.folder-notification-created-success'),\n              defaultMessage: 'Folder successfully created',\n            }),\n      });\n\n      if (isEditing) {\n        const didChangeLocation = parentFolderId\n          ? parseInt(parentFolderId.toString(), 10) !== values.parent?.value\n          : parentFolderId === null && !!values.parent?.value;\n        trackUsage('didEditMediaLibraryElements', {\n          location,\n          type: 'folder',\n          changeLocation: didChangeLocation,\n        });\n      } else {\n        trackUsage('didAddMediaLibraryFolders', { location: location! });\n      }\n\n      onClose({ created: true });\n    } catch (err) {\n      const errors = getAPIInnerErrors(err as FetchError, { getTrad });\n      const formikErrors = Object.entries(errors!).reduce(\n        (acc: Record<string, string>, [key, error]) => {\n          acc[key] = error.defaultMessage;\n\n          return acc;\n        },\n        {}\n      );\n\n      if (!isEmpty(formikErrors)) {\n        setErrors(formikErrors);\n      }\n    }\n  };\n\n  const handleDelete = async () => {\n    if (folder) {\n      await remove([folder]);\n    }\n\n    setShowConfirmDialog(false);\n    onClose();\n  };\n\n  if (isLoading) {\n    return (\n      <>\n        <EditFolderModalHeader isEditing={isEditing} />\n        <Modal.Body>\n          <Flex justifyContent=\"center\" paddingTop={4} paddingBottom={4}>\n            <Loader>\n              {formatMessage({\n                id: getTrad('content.isLoading'),\n                defaultMessage: 'Content is loading.',\n              })}\n            </Loader>\n          </Flex>\n        </Modal.Body>\n      </>\n    );\n  }\n\n  return (\n    <>\n      <Formik\n        validationSchema={folderSchema}\n        validateOnChange={false}\n        onSubmit={handleSubmit}\n        initialValues={initialFormData}\n      >\n        {({ values, errors, handleChange, setFieldValue }) => (\n          <Form noValidate>\n            <EditFolderModalHeader isEditing={isEditing} />\n            <Modal.Body>\n              <Grid.Root gap={4}>\n                {isEditing && (\n                  <Grid.Item xs={12} col={12} direction=\"column\" alignItems=\"stretch\">\n                    <ContextInfo\n                      blocks={[\n                        {\n                          label: formatMessage({\n                            id: getTrad('modal.folder.create.elements'),\n                            defaultMessage: 'Elements',\n                          }),\n                          value: formatMessage(\n                            {\n                              id: getTrad('modal.folder.elements.count'),\n                              defaultMessage: '{folderCount} folders, {assetCount} assets',\n                            },\n                            {\n                              assetCount: folder?.files?.count ?? 0,\n                              folderCount: folder?.children?.count ?? 0,\n                            }\n                          ),\n                        },\n\n                        {\n                          label: formatMessage({\n                            id: getTrad('modal.folder.create.creation-date'),\n                            defaultMessage: 'Creation Date',\n                          }),\n                          value: formatDate(new Date(folder.createdAt!)),\n                        },\n                      ]}\n                    />\n                  </Grid.Item>\n                )}\n\n                <Grid.Item xs={12} col={6} direction=\"column\" alignItems=\"stretch\">\n                  <Field.Root\n                    name=\"name\"\n                    error={typeof errors.name === 'string' ? errors.name : undefined}\n                  >\n                    <Field.Label>\n                      {formatMessage({\n                        id: getTrad('form.input.label.folder-name'),\n                        defaultMessage: 'Name',\n                      })}\n                    </Field.Label>\n                    <TextInput\n                      value={values.name}\n                      onChange={handleChange}\n                      disabled={formDisabled}\n                    />\n                    <Field.Error />\n                  </Field.Root>\n                </Grid.Item>\n\n                <Grid.Item xs={12} col={6} direction=\"column\" alignItems=\"stretch\">\n                  <Field.Root id=\"folder-parent\">\n                    <Field.Label>\n                      {formatMessage({\n                        id: getTrad('form.input.label.folder-location'),\n                        defaultMessage: 'Location',\n                      })}\n                    </Field.Label>\n\n                    <SelectTree\n                      options={folderStructure!}\n                      onChange={(value) => {\n                        setFieldValue('parent', value);\n                      }}\n                      isDisabled={formDisabled}\n                      defaultValue={values.parent!}\n                      name=\"parent\"\n                      menuPortalTarget={document.querySelector('body')}\n                      inputId=\"folder-parent\"\n                      disabled={formDisabled}\n                      error={typeof errors.parent === 'string' ? errors.parent : undefined}\n                      ariaErrorMessage=\"folder-parent-error\"\n                    />\n\n                    {errors.parent && (\n                      <Typography\n                        variant=\"pi\"\n                        tag=\"p\"\n                        id=\"folder-parent-error\"\n                        textColor=\"danger600\"\n                      >\n                        {typeof errors.parent === 'string' ? errors.parent : undefined}\n                      </Typography>\n                    )}\n                  </Field.Root>\n                </Grid.Item>\n              </Grid.Root>\n            </Modal.Body>\n            <Modal.Footer>\n              <Button onClick={() => onClose()} variant=\"tertiary\" name=\"cancel\">\n                {formatMessage({ id: 'cancel', defaultMessage: 'Cancel' })}\n              </Button>\n              <Flex gap={2}>\n                {isEditing && canUpdate && (\n                  <Button\n                    type=\"button\"\n                    variant=\"danger-light\"\n                    onClick={() => setShowConfirmDialog(true)}\n                    name=\"delete\"\n                    disabled={!canUpdate || isEditFolderLoading}\n                  >\n                    {formatMessage({\n                      id: getTrad('modal.folder.create.delete'),\n                      defaultMessage: 'Delete folder',\n                    })}\n                  </Button>\n                )}\n\n                <Button\n                  name=\"submit\"\n                  loading={isEditFolderLoading}\n                  disabled={formDisabled}\n                  type=\"submit\"\n                >\n                  {formatMessage(\n                    isEditing\n                      ? { id: getTrad('modal.folder.edit.submit'), defaultMessage: 'Save' }\n                      : { id: getTrad('modal.folder.create.submit'), defaultMessage: 'Create' }\n                  )}\n                </Button>\n              </Flex>\n            </Modal.Footer>\n          </Form>\n        )}\n      </Formik>\n      <RemoveFolderDialog\n        open={showConfirmDialog}\n        onClose={() => setShowConfirmDialog(false)}\n        onConfirm={handleDelete}\n      />\n    </>\n  );\n};\n\nexport const EditFolderDialog = ({ open, onClose, ...restProps }: EditFolderDialogProps) => {\n  return (\n    <Modal.Root open={open} onOpenChange={onClose}>\n      <Modal.Content>\n        <EditFolderContent {...restProps} onClose={onClose} open={open} />\n      </Modal.Content>\n    </Modal.Root>\n  );\n};\n"],"names":["folderSchema","yup","object","name","string","required","parent","label","value","number","nullable","EditFolderContent","onClose","folder","location","parentFolderId","data","folderStructure","isLoading","folderStructureIsLoading","useFolderStructure","enabled","canCreate","isLoadingPermissions","canUpdate","useMediaLibraryPermissions","showConfirmDialog","setShowConfirmDialog","React","useState","formatMessage","formatDate","useIntl","trackUsage","useTracking","editFolder","isEditFolderLoading","useEditFolder","remove","useBulkRemove","toggleNotification","useNotification","isEditing","formDisabled","initialFormData","parseInt","toString","undefined","findRecursiveFolderByValue","handleSubmit","values","setErrors","id","type","message","getTrad","defaultMessage","didChangeLocation","changeLocation","created","err","errors","getAPIInnerErrors","formikErrors","Object","entries","reduce","acc","key","error","isEmpty","handleDelete","_jsxs","_Fragment","_jsx","EditFolderModalHeader","Modal","Body","Flex","justifyContent","paddingTop","paddingBottom","Loader","Formik","validationSchema","validateOnChange","onSubmit","initialValues","handleChange","setFieldValue","Form","noValidate","Grid","Root","gap","Item","xs","col","direction","alignItems","ContextInfo","blocks","assetCount","files","count","folderCount","children","Date","createdAt","Field","Label","TextInput","onChange","disabled","Error","SelectTree","options","isDisabled","defaultValue","menuPortalTarget","document","querySelector","inputId","ariaErrorMessage","Typography","variant","tag","textColor","Footer","Button","onClick","loading","RemoveFolderDialog","open","onConfirm","EditFolderDialog","restProps","onOpenChange","Content"],"mappings":"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"}