{"version":3,"file":"upload.mjs","sources":["../../../server/src/services/upload.ts"],"sourcesContent":["import os from 'os';\nimport path from 'path';\nimport crypto from 'crypto';\nimport fs from 'fs';\nimport fse from 'fs-extra';\nimport _ from 'lodash';\nimport { extension } from 'mime-types';\nimport {\n  sanitize,\n  strings,\n  contentTypes as contentTypesUtils,\n  errors,\n  file as fileUtils,\n} from '@strapi/utils';\n\nimport type { Core, UID } from '@strapi/types';\n\nimport { FILE_MODEL_UID, ALLOWED_WEBHOOK_EVENTS } from '../constants';\nimport { getService } from '../utils';\n\nimport type { Config, File, InputFile, UploadableFile, FileInfo } from '../types';\nimport type { ViewConfiguration } from '../controllers/validation/admin/configureView';\nimport type { Settings } from '../controllers/validation/admin/settings';\n\ntype User = {\n  id: string | number;\n};\n\ntype ID = string | number;\n\ntype CommonOptions = {\n  user?: User;\n};\n\ntype Metas = {\n  refId?: ID;\n  ref?: string;\n  field?: string;\n  path?: string;\n  tmpWorkingDirectory?: string;\n};\n\nconst { UPDATED_BY_ATTRIBUTE, CREATED_BY_ATTRIBUTE } = contentTypesUtils.constants;\nconst { MEDIA_CREATE, MEDIA_UPDATE, MEDIA_DELETE } = ALLOWED_WEBHOOK_EVENTS;\n\nconst { ApplicationError, NotFoundError } = errors;\nconst { bytesToKbytes } = fileUtils;\n\nexport default ({ strapi }: { strapi: Core.Strapi }) => {\n  const randomSuffix = () => crypto.randomBytes(5).toString('hex');\n\n  const generateFileName = (name: string) => {\n    const baseName = strings.nameToSlug(name, { separator: '_', lowercase: false });\n\n    return `${baseName}_${randomSuffix()}`;\n  };\n\n  const sendMediaMetrics = (data: Pick<File, 'caption' | 'alternativeText'>) => {\n    if (_.has(data, 'caption') && !_.isEmpty(data.caption)) {\n      strapi.telemetry.send('didSaveMediaWithCaption');\n    }\n\n    if (_.has(data, 'alternativeText') && !_.isEmpty(data.alternativeText)) {\n      strapi.telemetry.send('didSaveMediaWithAlternativeText');\n    }\n  };\n\n  const createAndAssignTmpWorkingDirectoryToFiles = async (\n    files: InputFile | InputFile[]\n  ): Promise<string> => {\n    const tmpWorkingDirectory = await fse.mkdtemp(path.join(os.tmpdir(), 'strapi-upload-'));\n\n    if (Array.isArray(files)) {\n      files.forEach((file) => {\n        file.tmpWorkingDirectory = tmpWorkingDirectory;\n      });\n    } else {\n      files.tmpWorkingDirectory = tmpWorkingDirectory;\n    }\n\n    return tmpWorkingDirectory;\n  };\n\n  function filenameReservedRegex() {\n    // eslint-disable-next-line no-control-regex\n    return /[<>:\"/\\\\|?*\\u0000-\\u001F]/g;\n  }\n\n  function windowsReservedNameRegex() {\n    return /^(con|prn|aux|nul|com\\d|lpt\\d)$/i;\n  }\n\n  /**\n   * Copied from https://github.com/sindresorhus/valid-filename package\n   */\n  function isValidFilename(string: string) {\n    if (!string || string.length > 255) {\n      return false;\n    }\n    if (filenameReservedRegex().test(string) || windowsReservedNameRegex().test(string)) {\n      return false;\n    }\n    if (string === '.' || string === '..') {\n      return false;\n    }\n    return true;\n  }\n\n  async function emitEvent(event: string, data: Record<string, any>) {\n    const modelDef = strapi.getModel(FILE_MODEL_UID);\n    const sanitizedData = await sanitize.sanitizers.defaultSanitizeOutput(\n      {\n        schema: modelDef,\n        getModel(uid: string) {\n          return strapi.getModel(uid as UID.Schema);\n        },\n      },\n      data\n    );\n\n    strapi.eventHub.emit(event, { media: sanitizedData });\n  }\n\n  async function formatFileInfo(\n    { filename, type, size }: { filename: string; type: string; size: number },\n    fileInfo: Partial<FileInfo> = {},\n    metas: {\n      refId?: ID;\n      ref?: string;\n      field?: string;\n      path?: string;\n      tmpWorkingDirectory?: string;\n    } = {}\n  ): Promise<Omit<UploadableFile, 'getStream'>> {\n    const fileService = getService('file');\n\n    if (!isValidFilename(filename)) {\n      throw new ApplicationError('File name contains invalid characters');\n    }\n\n    let ext = path.extname(filename);\n    if (!ext) {\n      ext = `.${extension(type)}`;\n    }\n    const usedName = (fileInfo.name || filename).normalize();\n    const basename = path.basename(usedName, ext);\n\n    // Prevent null characters in file name\n    if (!isValidFilename(filename)) {\n      throw new ApplicationError('File name contains invalid characters');\n    }\n\n    const entity: Omit<UploadableFile, 'getStream'> = {\n      name: usedName,\n      alternativeText: fileInfo.alternativeText,\n      caption: fileInfo.caption,\n      folder: fileInfo.folder,\n      folderPath: await fileService.getFolderPath(fileInfo.folder),\n      hash: generateFileName(basename),\n      ext,\n      mime: type,\n      size: bytesToKbytes(size),\n      sizeInBytes: size,\n    };\n\n    const { refId, ref, field } = metas;\n\n    if (refId && ref && field) {\n      entity.related = [\n        {\n          id: refId,\n          __type: ref,\n          __pivot: { field },\n        },\n      ];\n    }\n\n    if (metas.path) {\n      entity.path = metas.path;\n    }\n\n    if (metas.tmpWorkingDirectory) {\n      entity.tmpWorkingDirectory = metas.tmpWorkingDirectory;\n    }\n\n    return entity;\n  }\n\n  async function enhanceAndValidateFile(\n    file: InputFile,\n    fileInfo: FileInfo,\n    metas?: Metas\n  ): Promise<UploadableFile> {\n    const currentFile = (await formatFileInfo(\n      {\n        filename: file.originalFilename ?? 'unamed',\n        type: file.mimetype ?? 'application/octet-stream',\n        size: file.size,\n      },\n      fileInfo,\n      {\n        ...metas,\n        tmpWorkingDirectory: file.tmpWorkingDirectory,\n      }\n    )) as UploadableFile;\n\n    currentFile.filepath = file.filepath;\n    currentFile.getStream = () => fs.createReadStream(file.filepath);\n\n    const { optimize, isImage, isFaultyImage, isOptimizableImage } = strapi\n      .plugin('upload')\n      .service('image-manipulation');\n\n    if (await isImage(currentFile)) {\n      if (await isFaultyImage(currentFile)) {\n        throw new ApplicationError('File is not a valid image');\n      }\n      if (await isOptimizableImage(currentFile)) {\n        return optimize(currentFile);\n      }\n    }\n\n    return currentFile;\n  }\n\n  async function upload(\n    {\n      data,\n      files,\n    }: {\n      data: Record<string, unknown>;\n      files: InputFile | InputFile[];\n    },\n    opts?: CommonOptions\n  ) {\n    const { user } = opts ?? {};\n    // create temporary folder to store files for stream manipulation\n    const tmpWorkingDirectory = await createAndAssignTmpWorkingDirectoryToFiles(files);\n\n    let uploadedFiles: any[] = [];\n\n    try {\n      const { fileInfo, ...metas } = data;\n\n      const fileArray = Array.isArray(files) ? files : [files];\n      const fileInfoArray = Array.isArray(fileInfo) ? fileInfo : [fileInfo];\n\n      const doUpload = async (file: InputFile, fileInfo: FileInfo) => {\n        const fileData = await enhanceAndValidateFile(file, fileInfo, metas);\n        return uploadFileAndPersist(fileData, { user });\n      };\n\n      uploadedFiles = await Promise.all(\n        fileArray.map((file, idx) => doUpload(file, fileInfoArray[idx] || {}))\n      );\n    } finally {\n      // delete temporary folder\n      await fse.remove(tmpWorkingDirectory);\n    }\n\n    return uploadedFiles;\n  }\n\n  /**\n   * When uploading an image, an additional thumbnail is generated.\n   * Also, if there are responsive formats defined, another set of images will be generated too.\n   *\n   * @param {*} fileData\n   */\n  async function uploadImage(fileData: UploadableFile) {\n    const { getDimensions, generateThumbnail, generateResponsiveFormats, isResizableImage } =\n      getService('image-manipulation');\n\n    // Store width and height of the original image\n    const { width, height } = await getDimensions(fileData);\n\n    // Make sure this is assigned before calling any upload\n    // That way it can mutate the width and height\n    _.assign(fileData, {\n      width,\n      height,\n    });\n\n    // For performance reasons, all uploads are wrapped in a single Promise.all\n    const uploadThumbnail = async (thumbnailFile: UploadableFile) => {\n      await getService('provider').upload(thumbnailFile);\n      _.set(fileData, 'formats.thumbnail', thumbnailFile);\n    };\n\n    // Generate thumbnail and responsive formats\n    const uploadResponsiveFormat = async (format: { key: string; file: UploadableFile }) => {\n      const { key, file } = format;\n      await getService('provider').upload(file);\n      _.set(fileData, ['formats', key], file);\n    };\n\n    const uploadPromises: Promise<void>[] = [];\n\n    // Upload image\n    uploadPromises.push(getService('provider').upload(fileData));\n\n    // Generate & Upload thumbnail and responsive formats\n    if (await isResizableImage(fileData)) {\n      const thumbnailFile = await generateThumbnail(fileData);\n      if (thumbnailFile) {\n        uploadPromises.push(uploadThumbnail(thumbnailFile));\n      }\n\n      const formats = await generateResponsiveFormats(fileData);\n      if (Array.isArray(formats) && formats.length > 0) {\n        for (const format of formats) {\n          // eslint-disable-next-line no-continue\n          if (!format) continue;\n          uploadPromises.push(uploadResponsiveFormat(format));\n        }\n      }\n    }\n    // Wait for all uploads to finish\n    await Promise.all(uploadPromises);\n  }\n\n  /**\n   * Upload a file. If it is an image it will generate a thumbnail\n   * and responsive formats (if enabled).\n   */\n  async function uploadFileAndPersist(fileData: UploadableFile, opts?: CommonOptions) {\n    const { user } = opts ?? {};\n\n    const config = strapi.config.get<Config>('plugin::upload');\n    const { isImage } = getService('image-manipulation');\n\n    await getService('provider').checkFileSize(fileData);\n\n    if (await isImage(fileData)) {\n      await uploadImage(fileData);\n    } else {\n      await getService('provider').upload(fileData);\n    }\n\n    _.set(fileData, 'provider', config.provider);\n\n    // Persist file(s)\n    return add(fileData, { user });\n  }\n\n  async function updateFileInfo(\n    id: ID,\n    { name, alternativeText, caption, folder }: FileInfo,\n    opts?: CommonOptions\n  ) {\n    const { user } = opts ?? {};\n\n    const dbFile = await findOne(id);\n\n    if (!dbFile) {\n      throw new NotFoundError();\n    }\n\n    const fileService = getService('file');\n\n    const newName = _.isNil(name) ? dbFile.name : name;\n    const newInfos = {\n      name: newName,\n      alternativeText: _.isNil(alternativeText) ? dbFile.alternativeText : alternativeText,\n      caption: _.isNil(caption) ? dbFile.caption : caption,\n      folder: _.isUndefined(folder) ? dbFile.folder : folder,\n      folderPath: _.isUndefined(folder) ? dbFile.path : await fileService.getFolderPath(folder),\n    };\n\n    return update(id, newInfos, { user });\n  }\n\n  async function replace(\n    id: ID,\n    { data, file }: { data: { fileInfo: FileInfo }; file: InputFile },\n    opts?: CommonOptions\n  ) {\n    const { user } = opts ?? {};\n\n    const config = strapi.config.get<Config>('plugin::upload');\n\n    const { isImage } = getService('image-manipulation');\n\n    const dbFile = await findOne(id);\n    if (!dbFile) {\n      throw new NotFoundError();\n    }\n\n    // create temporary folder to store files for stream manipulation\n    const tmpWorkingDirectory = await createAndAssignTmpWorkingDirectoryToFiles(file);\n\n    let fileData: UploadableFile;\n\n    try {\n      const { fileInfo } = data;\n      fileData = await enhanceAndValidateFile(file, fileInfo);\n\n      // keep a constant hash and extension so the file url doesn't change when the file is replaced\n      _.assign(fileData, {\n        hash: dbFile.hash,\n        ext: dbFile.ext,\n      });\n\n      // execute delete function of the provider\n      if (dbFile.provider === config.provider) {\n        await strapi.plugin('upload').provider.delete(dbFile);\n\n        if (dbFile.formats) {\n          await Promise.all(\n            Object.keys(dbFile.formats).map((key) => {\n              return strapi.plugin('upload').provider.delete(dbFile.formats[key]);\n            })\n          );\n        }\n      }\n\n      // clear old formats\n      _.set(fileData, 'formats', {});\n\n      if (await isImage(fileData)) {\n        await uploadImage(fileData);\n      } else {\n        await getService('provider').upload(fileData);\n      }\n\n      _.set(fileData, 'provider', config.provider);\n    } finally {\n      // delete temporary folder\n      await fse.remove(tmpWorkingDirectory);\n    }\n\n    return update(id, fileData, { user });\n  }\n\n  async function update(id: ID, values: Partial<File>, opts?: CommonOptions) {\n    const { user } = opts ?? {};\n\n    const fileValues = { ...values };\n    if (user) {\n      Object.assign(fileValues, {\n        [UPDATED_BY_ATTRIBUTE]: user.id,\n      });\n    }\n\n    sendMediaMetrics(fileValues);\n\n    const res = await strapi.db.query(FILE_MODEL_UID).update({ where: { id }, data: fileValues });\n\n    await emitEvent(MEDIA_UPDATE, res);\n\n    return res;\n  }\n\n  async function add(values: any, opts?: CommonOptions) {\n    const { user } = opts ?? {};\n\n    const fileValues = { ...values };\n    if (user) {\n      Object.assign(fileValues, {\n        [UPDATED_BY_ATTRIBUTE]: user.id,\n        [CREATED_BY_ATTRIBUTE]: user.id,\n      });\n    }\n\n    sendMediaMetrics(fileValues);\n\n    const res = await strapi.db.query(FILE_MODEL_UID).create({ data: fileValues });\n\n    await emitEvent(MEDIA_CREATE, res);\n\n    return res;\n  }\n\n  function findOne(id: ID, populate = {}) {\n    const query = strapi.get('query-params').transform(FILE_MODEL_UID, {\n      populate,\n    });\n\n    return strapi.db.query(FILE_MODEL_UID).findOne({\n      where: { id },\n      ...query,\n    });\n  }\n\n  function findMany(query: any = {}): Promise<File[]> {\n    return strapi.db\n      .query(FILE_MODEL_UID)\n      .findMany(strapi.get('query-params').transform(FILE_MODEL_UID, query));\n  }\n\n  function findPage(query: any = {}) {\n    return strapi.db\n      .query(FILE_MODEL_UID)\n      .findPage(strapi.get('query-params').transform(FILE_MODEL_UID, query));\n  }\n\n  async function remove(file: File) {\n    const config = strapi.config.get<Config>('plugin::upload');\n\n    // execute delete function of the provider\n    if (file.provider === config.provider) {\n      await strapi.plugin('upload').provider.delete(file);\n\n      if (file.formats) {\n        const keys = Object.keys(file.formats);\n\n        await Promise.all(\n          keys.map((key) => {\n            return strapi.plugin('upload').provider.delete(file.formats![key]);\n          })\n        );\n      }\n    }\n\n    const media = await strapi.db.query(FILE_MODEL_UID).findOne({\n      where: { id: file.id },\n    });\n\n    await emitEvent(MEDIA_DELETE, media);\n\n    return strapi.db.query(FILE_MODEL_UID).delete({ where: { id: file.id } });\n  }\n\n  async function getSettings() {\n    const res = await strapi.store!({ type: 'plugin', name: 'upload', key: 'settings' }).get({});\n\n    return res as Settings | null;\n  }\n\n  function setSettings(value: Settings) {\n    if (value.responsiveDimensions === true) {\n      strapi.telemetry.send('didEnableResponsiveDimensions');\n    } else {\n      strapi.telemetry.send('didDisableResponsiveDimensions');\n    }\n\n    return strapi.store!({ type: 'plugin', name: 'upload', key: 'settings' }).set({ value });\n  }\n\n  async function getConfiguration() {\n    const res = await strapi.store!({\n      type: 'plugin',\n      name: 'upload',\n      key: 'view_configuration',\n    }).get({});\n\n    return res as ViewConfiguration | null;\n  }\n\n  function setConfiguration(value: ViewConfiguration) {\n    return strapi.store!({ type: 'plugin', name: 'upload', key: 'view_configuration' }).set({\n      value,\n    });\n  }\n\n  return {\n    formatFileInfo,\n    upload,\n    updateFileInfo,\n    replace,\n    findOne,\n    findMany,\n    findPage,\n    remove,\n    getSettings,\n    setSettings,\n    getConfiguration,\n    setConfiguration,\n\n    /**\n     * exposed for testing only\n     * @internal\n     */\n    _uploadImage: uploadImage,\n  };\n};\n"],"names":["UPDATED_BY_ATTRIBUTE","CREATED_BY_ATTRIBUTE","contentTypesUtils","constants","MEDIA_CREATE","MEDIA_UPDATE","MEDIA_DELETE","ALLOWED_WEBHOOK_EVENTS","ApplicationError","NotFoundError","errors","bytesToKbytes","fileUtils","strapi","randomSuffix","crypto","randomBytes","toString","generateFileName","name","baseName","strings","nameToSlug","separator","lowercase","sendMediaMetrics","data","_","has","isEmpty","caption","telemetry","send","alternativeText","createAndAssignTmpWorkingDirectoryToFiles","files","tmpWorkingDirectory","fse","mkdtemp","path","join","os","tmpdir","Array","isArray","forEach","file","filenameReservedRegex","windowsReservedNameRegex","isValidFilename","string","length","test","emitEvent","event","modelDef","getModel","FILE_MODEL_UID","sanitizedData","sanitize","sanitizers","defaultSanitizeOutput","schema","uid","eventHub","emit","media","formatFileInfo","filename","type","size","fileInfo","metas","fileService","getService","ext","extname","extension","usedName","normalize","basename","entity","folder","folderPath","getFolderPath","hash","mime","sizeInBytes","refId","ref","field","related","id","__type","__pivot","enhanceAndValidateFile","currentFile","originalFilename","mimetype","filepath","getStream","fs","createReadStream","optimize","isImage","isFaultyImage","isOptimizableImage","plugin","service","upload","opts","user","uploadedFiles","fileArray","fileInfoArray","doUpload","fileData","uploadFileAndPersist","Promise","all","map","idx","remove","uploadImage","getDimensions","generateThumbnail","generateResponsiveFormats","isResizableImage","width","height","assign","uploadThumbnail","thumbnailFile","set","uploadResponsiveFormat","format","key","uploadPromises","push","formats","config","get","checkFileSize","provider","add","updateFileInfo","dbFile","findOne","newName","isNil","newInfos","isUndefined","update","replace","delete","Object","keys","values","fileValues","res","db","query","where","create","populate","transform","findMany","findPage","getSettings","store","setSettings","value","responsiveDimensions","getConfiguration","setConfiguration","_uploadImage"],"mappings":";;;;;;;;;;;AA0CA,MAAM,EAAEA,oBAAoB,EAAEC,oBAAoB,EAAE,GAAGC,aAAkBC,SAAS;AAClF,MAAM,EAAEC,YAAY,EAAEC,YAAY,EAAEC,YAAY,EAAE,GAAGC,sBAAAA;AAErD,MAAM,EAAEC,gBAAgB,EAAEC,aAAa,EAAE,GAAGC,MAAAA;AAC5C,MAAM,EAAEC,aAAa,EAAE,GAAGC,IAAAA;AAE1B,aAAe,CAAA,CAAC,EAAEC,MAAM,EAA2B,GAAA;AACjD,IAAA,MAAMC,eAAe,IAAMC,MAAAA,CAAOC,WAAW,CAAC,CAAA,CAAA,CAAGC,QAAQ,CAAC,KAAA,CAAA;AAE1D,IAAA,MAAMC,mBAAmB,CAACC,IAAAA,GAAAA;AACxB,QAAA,MAAMC,QAAWC,GAAAA,OAAAA,CAAQC,UAAU,CAACH,IAAM,EAAA;YAAEI,SAAW,EAAA,GAAA;YAAKC,SAAW,EAAA;AAAM,SAAA,CAAA;AAE7E,QAAA,OAAO,CAAC,EAAEJ,QAAAA,CAAS,CAAC,EAAEN,eAAe,CAAC;AACxC,KAAA;AAEA,IAAA,MAAMW,mBAAmB,CAACC,IAAAA,GAAAA;QACxB,IAAIC,CAAAA,CAAEC,GAAG,CAACF,IAAM,EAAA,SAAA,CAAA,IAAc,CAACC,CAAAA,CAAEE,OAAO,CAACH,IAAKI,CAAAA,OAAO,CAAG,EAAA;YACtDjB,MAAOkB,CAAAA,SAAS,CAACC,IAAI,CAAC,yBAAA,CAAA;AACxB;QAEA,IAAIL,CAAAA,CAAEC,GAAG,CAACF,IAAM,EAAA,iBAAA,CAAA,IAAsB,CAACC,CAAAA,CAAEE,OAAO,CAACH,IAAKO,CAAAA,eAAe,CAAG,EAAA;YACtEpB,MAAOkB,CAAAA,SAAS,CAACC,IAAI,CAAC,iCAAA,CAAA;AACxB;AACF,KAAA;AAEA,IAAA,MAAME,4CAA4C,OAChDC,KAAAA,GAAAA;QAEA,MAAMC,mBAAAA,GAAsB,MAAMC,GAAAA,CAAIC,OAAO,CAACC,KAAKC,IAAI,CAACC,EAAGC,CAAAA,MAAM,EAAI,EAAA,gBAAA,CAAA,CAAA;QAErE,IAAIC,KAAAA,CAAMC,OAAO,CAACT,KAAQ,CAAA,EAAA;YACxBA,KAAMU,CAAAA,OAAO,CAAC,CAACC,IAAAA,GAAAA;AACbA,gBAAAA,IAAAA,CAAKV,mBAAmB,GAAGA,mBAAAA;AAC7B,aAAA,CAAA;SACK,MAAA;AACLD,YAAAA,KAAAA,CAAMC,mBAAmB,GAAGA,mBAAAA;AAC9B;QAEA,OAAOA,mBAAAA;AACT,KAAA;IAEA,SAASW,qBAAAA,GAAAA;;QAEP,OAAO,4BAAA;AACT;IAEA,SAASC,wBAAAA,GAAAA;QACP,OAAO,kCAAA;AACT;AAEA;;MAGA,SAASC,gBAAgBC,MAAc,EAAA;AACrC,QAAA,IAAI,CAACA,MAAAA,IAAUA,MAAOC,CAAAA,MAAM,GAAG,GAAK,EAAA;YAClC,OAAO,KAAA;AACT;AACA,QAAA,IAAIJ,wBAAwBK,IAAI,CAACF,WAAWF,wBAA2BI,EAAAA,CAAAA,IAAI,CAACF,MAAS,CAAA,EAAA;YACnF,OAAO,KAAA;AACT;QACA,IAAIA,MAAAA,KAAW,GAAOA,IAAAA,MAAAA,KAAW,IAAM,EAAA;YACrC,OAAO,KAAA;AACT;QACA,OAAO,IAAA;AACT;IAEA,eAAeG,SAAAA,CAAUC,KAAa,EAAE5B,IAAyB,EAAA;QAC/D,MAAM6B,QAAAA,GAAW1C,MAAO2C,CAAAA,QAAQ,CAACC,cAAAA,CAAAA;AACjC,QAAA,MAAMC,gBAAgB,MAAMC,QAAAA,CAASC,UAAU,CAACC,qBAAqB,CACnE;YACEC,MAAQP,EAAAA,QAAAA;AACRC,YAAAA,QAAAA,CAAAA,CAASO,GAAW,EAAA;gBAClB,OAAOlD,MAAAA,CAAO2C,QAAQ,CAACO,GAAAA,CAAAA;AACzB;SAEFrC,EAAAA,IAAAA,CAAAA;AAGFb,QAAAA,MAAAA,CAAOmD,QAAQ,CAACC,IAAI,CAACX,KAAO,EAAA;YAAEY,KAAOR,EAAAA;AAAc,SAAA,CAAA;AACrD;AAEA,IAAA,eAAeS,cACb,CAAA,EAAEC,QAAQ,EAAEC,IAAI,EAAEC,IAAI,EAAoD,EAC1EC,WAA8B,EAAE,EAChCC,KAAAA,GAMI,EAAE,EAAA;AAEN,QAAA,MAAMC,cAAcC,UAAW,CAAA,MAAA,CAAA;QAE/B,IAAI,CAACzB,gBAAgBmB,QAAW,CAAA,EAAA;AAC9B,YAAA,MAAM,IAAI5D,gBAAiB,CAAA,uCAAA,CAAA;AAC7B;QAEA,IAAImE,GAAAA,GAAMpC,IAAKqC,CAAAA,OAAO,CAACR,QAAAA,CAAAA;AACvB,QAAA,IAAI,CAACO,GAAK,EAAA;AACRA,YAAAA,GAAAA,GAAM,CAAC,CAAC,EAAEE,SAAAA,CAAUR,MAAM,CAAC;AAC7B;QACA,MAAMS,QAAAA,GAAW,CAACP,QAAAA,CAASpD,IAAI,IAAIiD,QAAO,EAAGW,SAAS,EAAA;AACtD,QAAA,MAAMC,QAAWzC,GAAAA,IAAAA,CAAKyC,QAAQ,CAACF,QAAUH,EAAAA,GAAAA,CAAAA;;QAGzC,IAAI,CAAC1B,gBAAgBmB,QAAW,CAAA,EAAA;AAC9B,YAAA,MAAM,IAAI5D,gBAAiB,CAAA,uCAAA,CAAA;AAC7B;AAEA,QAAA,MAAMyE,MAA4C,GAAA;YAChD9D,IAAM2D,EAAAA,QAAAA;AACN7C,YAAAA,eAAAA,EAAiBsC,SAAStC,eAAe;AACzCH,YAAAA,OAAAA,EAASyC,SAASzC,OAAO;AACzBoD,YAAAA,MAAAA,EAAQX,SAASW,MAAM;AACvBC,YAAAA,UAAAA,EAAY,MAAMV,WAAAA,CAAYW,aAAa,CAACb,SAASW,MAAM,CAAA;AAC3DG,YAAAA,IAAAA,EAAMnE,gBAAiB8D,CAAAA,QAAAA,CAAAA;AACvBL,YAAAA,GAAAA;YACAW,IAAMjB,EAAAA,IAAAA;AACNC,YAAAA,IAAAA,EAAM3D,aAAc2D,CAAAA,IAAAA,CAAAA;YACpBiB,WAAajB,EAAAA;AACf,SAAA;AAEA,QAAA,MAAM,EAAEkB,KAAK,EAAEC,GAAG,EAAEC,KAAK,EAAE,GAAGlB,KAAAA;QAE9B,IAAIgB,KAAAA,IAASC,OAAOC,KAAO,EAAA;AACzBT,YAAAA,MAAAA,CAAOU,OAAO,GAAG;AACf,gBAAA;oBACEC,EAAIJ,EAAAA,KAAAA;oBACJK,MAAQJ,EAAAA,GAAAA;oBACRK,OAAS,EAAA;AAAEJ,wBAAAA;AAAM;AACnB;AACD,aAAA;AACH;QAEA,IAAIlB,KAAAA,CAAMjC,IAAI,EAAE;YACd0C,MAAO1C,CAAAA,IAAI,GAAGiC,KAAAA,CAAMjC,IAAI;AAC1B;QAEA,IAAIiC,KAAAA,CAAMpC,mBAAmB,EAAE;YAC7B6C,MAAO7C,CAAAA,mBAAmB,GAAGoC,KAAAA,CAAMpC,mBAAmB;AACxD;QAEA,OAAO6C,MAAAA;AACT;AAEA,IAAA,eAAec,sBACbjD,CAAAA,IAAe,EACfyB,QAAkB,EAClBC,KAAa,EAAA;QAEb,MAAMwB,WAAAA,GAAe,MAAM7B,cACzB,CAAA;YACEC,QAAUtB,EAAAA,IAAAA,CAAKmD,gBAAgB,IAAI,QAAA;YACnC5B,IAAMvB,EAAAA,IAAAA,CAAKoD,QAAQ,IAAI,0BAAA;AACvB5B,YAAAA,IAAAA,EAAMxB,KAAKwB;AACb,SAAA,EACAC,QACA,EAAA;AACE,YAAA,GAAGC,KAAK;AACRpC,YAAAA,mBAAAA,EAAqBU,KAAKV;AAC5B,SAAA,CAAA;QAGF4D,WAAYG,CAAAA,QAAQ,GAAGrD,IAAAA,CAAKqD,QAAQ;AACpCH,QAAAA,WAAAA,CAAYI,SAAS,GAAG,IAAMC,GAAGC,gBAAgB,CAACxD,KAAKqD,QAAQ,CAAA;AAE/D,QAAA,MAAM,EAAEI,QAAQ,EAAEC,OAAO,EAAEC,aAAa,EAAEC,kBAAkB,EAAE,GAAG7F,MAC9D8F,CAAAA,MAAM,CAAC,QAAA,CAAA,CACPC,OAAO,CAAC,oBAAA,CAAA;QAEX,IAAI,MAAMJ,QAAQR,WAAc,CAAA,EAAA;YAC9B,IAAI,MAAMS,cAAcT,WAAc,CAAA,EAAA;AACpC,gBAAA,MAAM,IAAIxF,gBAAiB,CAAA,2BAAA,CAAA;AAC7B;YACA,IAAI,MAAMkG,mBAAmBV,WAAc,CAAA,EAAA;AACzC,gBAAA,OAAOO,QAASP,CAAAA,WAAAA,CAAAA;AAClB;AACF;QAEA,OAAOA,WAAAA;AACT;AAEA,IAAA,eAAea,OACb,EACEnF,IAAI,EACJS,KAAK,EAIN,EACD2E,IAAoB,EAAA;AAEpB,QAAA,MAAM,EAAEC,IAAI,EAAE,GAAGD,QAAQ,EAAC;;QAE1B,MAAM1E,mBAAAA,GAAsB,MAAMF,yCAA0CC,CAAAA,KAAAA,CAAAA;AAE5E,QAAA,IAAI6E,gBAAuB,EAAE;QAE7B,IAAI;AACF,YAAA,MAAM,EAAEzC,QAAQ,EAAE,GAAGC,OAAO,GAAG9C,IAAAA;AAE/B,YAAA,MAAMuF,SAAYtE,GAAAA,KAAAA,CAAMC,OAAO,CAACT,SAASA,KAAQ,GAAA;AAACA,gBAAAA;AAAM,aAAA;AACxD,YAAA,MAAM+E,aAAgBvE,GAAAA,KAAAA,CAAMC,OAAO,CAAC2B,YAAYA,QAAW,GAAA;AAACA,gBAAAA;AAAS,aAAA;YAErE,MAAM4C,QAAAA,GAAW,OAAOrE,IAAiByB,EAAAA,QAAAA,GAAAA;AACvC,gBAAA,MAAM6C,QAAW,GAAA,MAAMrB,sBAAuBjD,CAAAA,IAAAA,EAAMyB,QAAUC,EAAAA,KAAAA,CAAAA;AAC9D,gBAAA,OAAO6C,qBAAqBD,QAAU,EAAA;AAAEL,oBAAAA;AAAK,iBAAA,CAAA;AAC/C,aAAA;AAEAC,YAAAA,aAAAA,GAAgB,MAAMM,OAAQC,CAAAA,GAAG,CAC/BN,SAAAA,CAAUO,GAAG,CAAC,CAAC1E,IAAM2E,EAAAA,GAAAA,GAAQN,SAASrE,IAAMoE,EAAAA,aAAa,CAACO,GAAAA,CAAI,IAAI,EAAC,CAAA,CAAA,CAAA;SAE7D,QAAA;;YAER,MAAMpF,GAAAA,CAAIqF,MAAM,CAACtF,mBAAAA,CAAAA;AACnB;QAEA,OAAO4E,aAAAA;AACT;AAEA;;;;;MAMA,eAAeW,YAAYP,QAAwB,EAAA;QACjD,MAAM,EAAEQ,aAAa,EAAEC,iBAAiB,EAAEC,yBAAyB,EAAEC,gBAAgB,EAAE,GACrFrD,UAAW,CAAA,oBAAA,CAAA;;AAGb,QAAA,MAAM,EAAEsD,KAAK,EAAEC,MAAM,EAAE,GAAG,MAAML,aAAcR,CAAAA,QAAAA,CAAAA;;;QAI9CzF,CAAEuG,CAAAA,MAAM,CAACd,QAAU,EAAA;AACjBY,YAAAA,KAAAA;AACAC,YAAAA;AACF,SAAA,CAAA;;AAGA,QAAA,MAAME,kBAAkB,OAAOC,aAAAA,GAAAA;YAC7B,MAAM1D,UAAAA,CAAW,UAAYmC,CAAAA,CAAAA,MAAM,CAACuB,aAAAA,CAAAA;YACpCzG,CAAE0G,CAAAA,GAAG,CAACjB,QAAAA,EAAU,mBAAqBgB,EAAAA,aAAAA,CAAAA;AACvC,SAAA;;AAGA,QAAA,MAAME,yBAAyB,OAAOC,MAAAA,GAAAA;AACpC,YAAA,MAAM,EAAEC,GAAG,EAAE1F,IAAI,EAAE,GAAGyF,MAAAA;YACtB,MAAM7D,UAAAA,CAAW,UAAYmC,CAAAA,CAAAA,MAAM,CAAC/D,IAAAA,CAAAA;YACpCnB,CAAE0G,CAAAA,GAAG,CAACjB,QAAU,EAAA;AAAC,gBAAA,SAAA;AAAWoB,gBAAAA;aAAI,EAAE1F,IAAAA,CAAAA;AACpC,SAAA;AAEA,QAAA,MAAM2F,iBAAkC,EAAE;;AAG1CA,QAAAA,cAAAA,CAAeC,IAAI,CAAChE,UAAW,CAAA,UAAA,CAAA,CAAYmC,MAAM,CAACO,QAAAA,CAAAA,CAAAA;;QAGlD,IAAI,MAAMW,iBAAiBX,QAAW,CAAA,EAAA;YACpC,MAAMgB,aAAAA,GAAgB,MAAMP,iBAAkBT,CAAAA,QAAAA,CAAAA;AAC9C,YAAA,IAAIgB,aAAe,EAAA;gBACjBK,cAAeC,CAAAA,IAAI,CAACP,eAAgBC,CAAAA,aAAAA,CAAAA,CAAAA;AACtC;YAEA,MAAMO,OAAAA,GAAU,MAAMb,yBAA0BV,CAAAA,QAAAA,CAAAA;AAChD,YAAA,IAAIzE,MAAMC,OAAO,CAAC+F,YAAYA,OAAQxF,CAAAA,MAAM,GAAG,CAAG,EAAA;gBAChD,KAAK,MAAMoF,UAAUI,OAAS,CAAA;;AAE5B,oBAAA,IAAI,CAACJ,MAAQ,EAAA;oBACbE,cAAeC,CAAAA,IAAI,CAACJ,sBAAuBC,CAAAA,MAAAA,CAAAA,CAAAA;AAC7C;AACF;AACF;;QAEA,MAAMjB,OAAAA,CAAQC,GAAG,CAACkB,cAAAA,CAAAA;AACpB;AAEA;;;AAGC,MACD,eAAepB,oBAAAA,CAAqBD,QAAwB,EAAEN,IAAoB,EAAA;AAChF,QAAA,MAAM,EAAEC,IAAI,EAAE,GAAGD,QAAQ,EAAC;AAE1B,QAAA,MAAM8B,MAAS/H,GAAAA,MAAAA,CAAO+H,MAAM,CAACC,GAAG,CAAS,gBAAA,CAAA;AACzC,QAAA,MAAM,EAAErC,OAAO,EAAE,GAAG9B,UAAW,CAAA,oBAAA,CAAA;QAE/B,MAAMA,UAAAA,CAAW,UAAYoE,CAAAA,CAAAA,aAAa,CAAC1B,QAAAA,CAAAA;QAE3C,IAAI,MAAMZ,QAAQY,QAAW,CAAA,EAAA;AAC3B,YAAA,MAAMO,WAAYP,CAAAA,QAAAA,CAAAA;SACb,MAAA;YACL,MAAM1C,UAAAA,CAAW,UAAYmC,CAAAA,CAAAA,MAAM,CAACO,QAAAA,CAAAA;AACtC;AAEAzF,QAAAA,CAAAA,CAAE0G,GAAG,CAACjB,QAAU,EAAA,UAAA,EAAYwB,OAAOG,QAAQ,CAAA;;AAG3C,QAAA,OAAOC,IAAI5B,QAAU,EAAA;AAAEL,YAAAA;AAAK,SAAA,CAAA;AAC9B;AAEA,IAAA,eAAekC,cACbrD,CAAAA,EAAM,EACN,EAAEzE,IAAI,EAAEc,eAAe,EAAEH,OAAO,EAAEoD,MAAM,EAAY,EACpD4B,IAAoB,EAAA;AAEpB,QAAA,MAAM,EAAEC,IAAI,EAAE,GAAGD,QAAQ,EAAC;QAE1B,MAAMoC,MAAAA,GAAS,MAAMC,OAAQvD,CAAAA,EAAAA,CAAAA;AAE7B,QAAA,IAAI,CAACsD,MAAQ,EAAA;AACX,YAAA,MAAM,IAAIzI,aAAAA,EAAAA;AACZ;AAEA,QAAA,MAAMgE,cAAcC,UAAW,CAAA,MAAA,CAAA;AAE/B,QAAA,MAAM0E,UAAUzH,CAAE0H,CAAAA,KAAK,CAAClI,IAAQ+H,CAAAA,GAAAA,MAAAA,CAAO/H,IAAI,GAAGA,IAAAA;AAC9C,QAAA,MAAMmI,QAAW,GAAA;YACfnI,IAAMiI,EAAAA,OAAAA;AACNnH,YAAAA,eAAAA,EAAiBN,EAAE0H,KAAK,CAACpH,eAAmBiH,CAAAA,GAAAA,MAAAA,CAAOjH,eAAe,GAAGA,eAAAA;AACrEH,YAAAA,OAAAA,EAASH,EAAE0H,KAAK,CAACvH,OAAWoH,CAAAA,GAAAA,MAAAA,CAAOpH,OAAO,GAAGA,OAAAA;AAC7CoD,YAAAA,MAAAA,EAAQvD,EAAE4H,WAAW,CAACrE,MAAUgE,CAAAA,GAAAA,MAAAA,CAAOhE,MAAM,GAAGA,MAAAA;YAChDC,UAAYxD,EAAAA,CAAAA,CAAE4H,WAAW,CAACrE,MAAUgE,CAAAA,GAAAA,MAAAA,CAAO3G,IAAI,GAAG,MAAMkC,WAAYW,CAAAA,aAAa,CAACF,MAAAA;AACpF,SAAA;QAEA,OAAOsE,MAAAA,CAAO5D,IAAI0D,QAAU,EAAA;AAAEvC,YAAAA;AAAK,SAAA,CAAA;AACrC;IAEA,eAAe0C,OAAAA,CACb7D,EAAM,EACN,EAAElE,IAAI,EAAEoB,IAAI,EAAqD,EACjEgE,IAAoB,EAAA;AAEpB,QAAA,MAAM,EAAEC,IAAI,EAAE,GAAGD,QAAQ,EAAC;AAE1B,QAAA,MAAM8B,MAAS/H,GAAAA,MAAAA,CAAO+H,MAAM,CAACC,GAAG,CAAS,gBAAA,CAAA;AAEzC,QAAA,MAAM,EAAErC,OAAO,EAAE,GAAG9B,UAAW,CAAA,oBAAA,CAAA;QAE/B,MAAMwE,MAAAA,GAAS,MAAMC,OAAQvD,CAAAA,EAAAA,CAAAA;AAC7B,QAAA,IAAI,CAACsD,MAAQ,EAAA;AACX,YAAA,MAAM,IAAIzI,aAAAA,EAAAA;AACZ;;QAGA,MAAM2B,mBAAAA,GAAsB,MAAMF,yCAA0CY,CAAAA,IAAAA,CAAAA;QAE5E,IAAIsE,QAAAA;QAEJ,IAAI;YACF,MAAM,EAAE7C,QAAQ,EAAE,GAAG7C,IAAAA;YACrB0F,QAAW,GAAA,MAAMrB,uBAAuBjD,IAAMyB,EAAAA,QAAAA,CAAAA;;YAG9C5C,CAAEuG,CAAAA,MAAM,CAACd,QAAU,EAAA;AACjB/B,gBAAAA,IAAAA,EAAM6D,OAAO7D,IAAI;AACjBV,gBAAAA,GAAAA,EAAKuE,OAAOvE;AACd,aAAA,CAAA;;AAGA,YAAA,IAAIuE,MAAOH,CAAAA,QAAQ,KAAKH,MAAAA,CAAOG,QAAQ,EAAE;AACvC,gBAAA,MAAMlI,OAAO8F,MAAM,CAAC,UAAUoC,QAAQ,CAACW,MAAM,CAACR,MAAAA,CAAAA;gBAE9C,IAAIA,MAAAA,CAAOP,OAAO,EAAE;oBAClB,MAAMrB,OAAAA,CAAQC,GAAG,CACfoC,MAAOC,CAAAA,IAAI,CAACV,MAAAA,CAAOP,OAAO,CAAA,CAAEnB,GAAG,CAAC,CAACgB,GAAAA,GAAAA;wBAC/B,OAAO3H,MAAAA,CAAO8F,MAAM,CAAC,QAAUoC,CAAAA,CAAAA,QAAQ,CAACW,MAAM,CAACR,MAAAA,CAAOP,OAAO,CAACH,GAAI,CAAA,CAAA;AACpE,qBAAA,CAAA,CAAA;AAEJ;AACF;;AAGA7G,YAAAA,CAAAA,CAAE0G,GAAG,CAACjB,QAAU,EAAA,SAAA,EAAW,EAAC,CAAA;YAE5B,IAAI,MAAMZ,QAAQY,QAAW,CAAA,EAAA;AAC3B,gBAAA,MAAMO,WAAYP,CAAAA,QAAAA,CAAAA;aACb,MAAA;gBACL,MAAM1C,UAAAA,CAAW,UAAYmC,CAAAA,CAAAA,MAAM,CAACO,QAAAA,CAAAA;AACtC;AAEAzF,YAAAA,CAAAA,CAAE0G,GAAG,CAACjB,QAAU,EAAA,UAAA,EAAYwB,OAAOG,QAAQ,CAAA;SACnC,QAAA;;YAER,MAAM1G,GAAAA,CAAIqF,MAAM,CAACtF,mBAAAA,CAAAA;AACnB;QAEA,OAAOoH,MAAAA,CAAO5D,IAAIwB,QAAU,EAAA;AAAEL,YAAAA;AAAK,SAAA,CAAA;AACrC;AAEA,IAAA,eAAeyC,MAAO5D,CAAAA,EAAM,EAAEiE,MAAqB,EAAE/C,IAAoB,EAAA;AACvE,QAAA,MAAM,EAAEC,IAAI,EAAE,GAAGD,QAAQ,EAAC;AAE1B,QAAA,MAAMgD,UAAa,GAAA;AAAE,YAAA,GAAGD;AAAO,SAAA;AAC/B,QAAA,IAAI9C,IAAM,EAAA;YACR4C,MAAOzB,CAAAA,MAAM,CAAC4B,UAAY,EAAA;gBACxB,CAAC9J,oBAAAA,GAAuB+G,IAAAA,CAAKnB;AAC/B,aAAA,CAAA;AACF;QAEAnE,gBAAiBqI,CAAAA,UAAAA,CAAAA;QAEjB,MAAMC,GAAAA,GAAM,MAAMlJ,MAAOmJ,CAAAA,EAAE,CAACC,KAAK,CAACxG,cAAgB+F,CAAAA,CAAAA,MAAM,CAAC;YAAEU,KAAO,EAAA;AAAEtE,gBAAAA;AAAG,aAAA;YAAGlE,IAAMoI,EAAAA;AAAW,SAAA,CAAA;AAE3F,QAAA,MAAMzG,UAAUhD,YAAc0J,EAAAA,GAAAA,CAAAA;QAE9B,OAAOA,GAAAA;AACT;IAEA,eAAef,GAAAA,CAAIa,MAAW,EAAE/C,IAAoB,EAAA;AAClD,QAAA,MAAM,EAAEC,IAAI,EAAE,GAAGD,QAAQ,EAAC;AAE1B,QAAA,MAAMgD,UAAa,GAAA;AAAE,YAAA,GAAGD;AAAO,SAAA;AAC/B,QAAA,IAAI9C,IAAM,EAAA;YACR4C,MAAOzB,CAAAA,MAAM,CAAC4B,UAAY,EAAA;gBACxB,CAAC9J,oBAAAA,GAAuB+G,IAAAA,CAAKnB,EAAE;gBAC/B,CAAC3F,oBAAAA,GAAuB8G,IAAAA,CAAKnB;AAC/B,aAAA,CAAA;AACF;QAEAnE,gBAAiBqI,CAAAA,UAAAA,CAAAA;QAEjB,MAAMC,GAAAA,GAAM,MAAMlJ,MAAOmJ,CAAAA,EAAE,CAACC,KAAK,CAACxG,cAAgB0G,CAAAA,CAAAA,MAAM,CAAC;YAAEzI,IAAMoI,EAAAA;AAAW,SAAA,CAAA;AAE5E,QAAA,MAAMzG,UAAUjD,YAAc2J,EAAAA,GAAAA,CAAAA;QAE9B,OAAOA,GAAAA;AACT;AAEA,IAAA,SAASZ,OAAQvD,CAAAA,EAAM,EAAEwE,QAAAA,GAAW,EAAE,EAAA;AACpC,QAAA,MAAMH,QAAQpJ,MAAOgI,CAAAA,GAAG,CAAC,cAAgBwB,CAAAA,CAAAA,SAAS,CAAC5G,cAAgB,EAAA;AACjE2G,YAAAA;AACF,SAAA,CAAA;AAEA,QAAA,OAAOvJ,OAAOmJ,EAAE,CAACC,KAAK,CAACxG,cAAAA,CAAAA,CAAgB0F,OAAO,CAAC;YAC7Ce,KAAO,EAAA;AAAEtE,gBAAAA;AAAG,aAAA;AACZ,YAAA,GAAGqE;AACL,SAAA,CAAA;AACF;IAEA,SAASK,QAAAA,CAASL,KAAa,GAAA,EAAE,EAAA;AAC/B,QAAA,OAAOpJ,MAAOmJ,CAAAA,EAAE,CACbC,KAAK,CAACxG,cACN6G,CAAAA,CAAAA,QAAQ,CAACzJ,MAAAA,CAAOgI,GAAG,CAAC,cAAgBwB,CAAAA,CAAAA,SAAS,CAAC5G,cAAgBwG,EAAAA,KAAAA,CAAAA,CAAAA;AACnE;IAEA,SAASM,QAAAA,CAASN,KAAa,GAAA,EAAE,EAAA;AAC/B,QAAA,OAAOpJ,MAAOmJ,CAAAA,EAAE,CACbC,KAAK,CAACxG,cACN8G,CAAAA,CAAAA,QAAQ,CAAC1J,MAAAA,CAAOgI,GAAG,CAAC,cAAgBwB,CAAAA,CAAAA,SAAS,CAAC5G,cAAgBwG,EAAAA,KAAAA,CAAAA,CAAAA;AACnE;AAEA,IAAA,eAAevC,OAAO5E,IAAU,EAAA;AAC9B,QAAA,MAAM8F,MAAS/H,GAAAA,MAAAA,CAAO+H,MAAM,CAACC,GAAG,CAAS,gBAAA,CAAA;;AAGzC,QAAA,IAAI/F,IAAKiG,CAAAA,QAAQ,KAAKH,MAAAA,CAAOG,QAAQ,EAAE;AACrC,YAAA,MAAMlI,OAAO8F,MAAM,CAAC,UAAUoC,QAAQ,CAACW,MAAM,CAAC5G,IAAAA,CAAAA;YAE9C,IAAIA,IAAAA,CAAK6F,OAAO,EAAE;AAChB,gBAAA,MAAMiB,IAAOD,GAAAA,MAAAA,CAAOC,IAAI,CAAC9G,KAAK6F,OAAO,CAAA;AAErC,gBAAA,MAAMrB,QAAQC,GAAG,CACfqC,IAAKpC,CAAAA,GAAG,CAAC,CAACgB,GAAAA,GAAAA;AACR,oBAAA,OAAO3H,MAAO8F,CAAAA,MAAM,CAAC,QAAA,CAAA,CAAUoC,QAAQ,CAACW,MAAM,CAAC5G,IAAK6F,CAAAA,OAAO,CAAEH,GAAI,CAAA,CAAA;AACnE,iBAAA,CAAA,CAAA;AAEJ;AACF;QAEA,MAAMtE,KAAAA,GAAQ,MAAMrD,MAAOmJ,CAAAA,EAAE,CAACC,KAAK,CAACxG,cAAgB0F,CAAAA,CAAAA,OAAO,CAAC;YAC1De,KAAO,EAAA;AAAEtE,gBAAAA,EAAAA,EAAI9C,KAAK8C;AAAG;AACvB,SAAA,CAAA;AAEA,QAAA,MAAMvC,UAAU/C,YAAc4D,EAAAA,KAAAA,CAAAA;AAE9B,QAAA,OAAOrD,OAAOmJ,EAAE,CAACC,KAAK,CAACxG,cAAAA,CAAAA,CAAgBiG,MAAM,CAAC;YAAEQ,KAAO,EAAA;AAAEtE,gBAAAA,EAAAA,EAAI9C,KAAK8C;AAAG;AAAE,SAAA,CAAA;AACzE;IAEA,eAAe4E,WAAAA,GAAAA;AACb,QAAA,MAAMT,GAAM,GAAA,MAAMlJ,MAAO4J,CAAAA,KAAK,CAAE;YAAEpG,IAAM,EAAA,QAAA;YAAUlD,IAAM,EAAA,QAAA;YAAUqH,GAAK,EAAA;SAAcK,CAAAA,CAAAA,GAAG,CAAC,EAAC,CAAA;QAE1F,OAAOkB,GAAAA;AACT;AAEA,IAAA,SAASW,YAAYC,KAAe,EAAA;QAClC,IAAIA,KAAAA,CAAMC,oBAAoB,KAAK,IAAM,EAAA;YACvC/J,MAAOkB,CAAAA,SAAS,CAACC,IAAI,CAAC,+BAAA,CAAA;SACjB,MAAA;YACLnB,MAAOkB,CAAAA,SAAS,CAACC,IAAI,CAAC,gCAAA,CAAA;AACxB;QAEA,OAAOnB,MAAAA,CAAO4J,KAAK,CAAE;YAAEpG,IAAM,EAAA,QAAA;YAAUlD,IAAM,EAAA,QAAA;YAAUqH,GAAK,EAAA;AAAW,SAAA,CAAA,CAAGH,GAAG,CAAC;AAAEsC,YAAAA;AAAM,SAAA,CAAA;AACxF;IAEA,eAAeE,gBAAAA,GAAAA;AACb,QAAA,MAAMd,GAAM,GAAA,MAAMlJ,MAAO4J,CAAAA,KAAK,CAAE;YAC9BpG,IAAM,EAAA,QAAA;YACNlD,IAAM,EAAA,QAAA;YACNqH,GAAK,EAAA;SACJK,CAAAA,CAAAA,GAAG,CAAC,EAAC,CAAA;QAER,OAAOkB,GAAAA;AACT;AAEA,IAAA,SAASe,iBAAiBH,KAAwB,EAAA;QAChD,OAAO9J,MAAAA,CAAO4J,KAAK,CAAE;YAAEpG,IAAM,EAAA,QAAA;YAAUlD,IAAM,EAAA,QAAA;YAAUqH,GAAK,EAAA;AAAqB,SAAA,CAAA,CAAGH,GAAG,CAAC;AACtFsC,YAAAA;AACF,SAAA,CAAA;AACF;IAEA,OAAO;AACLxG,QAAAA,cAAAA;AACA0C,QAAAA,MAAAA;AACAoC,QAAAA,cAAAA;AACAQ,QAAAA,OAAAA;AACAN,QAAAA,OAAAA;AACAmB,QAAAA,QAAAA;AACAC,QAAAA,QAAAA;AACA7C,QAAAA,MAAAA;AACA8C,QAAAA,WAAAA;AACAE,QAAAA,WAAAA;AACAG,QAAAA,gBAAAA;AACAC,QAAAA,gBAAAA;AAEA;;;AAGC,QACDC,YAAcpD,EAAAA;AAChB,KAAA;AACF,CAAA;;;;"}