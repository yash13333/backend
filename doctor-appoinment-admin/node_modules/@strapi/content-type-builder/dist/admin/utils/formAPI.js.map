{"version":3,"file":"formAPI.js","sources":["../../../admin/src/utils/formAPI.ts"],"sourcesContent":["import cloneDeep from 'lodash/cloneDeep';\nimport get from 'lodash/get';\nimport * as yup from 'yup';\n// TODO V5 Convert any into real types\nexport const formsAPI: any = {\n  components: {\n    inputs: {} as Record<string, any>,\n    add({ id, component }: { id: string; component: any }) {\n      if (!this.inputs[id]) {\n        this.inputs[id] = component;\n      }\n    },\n  },\n  types: {\n    attribute: {\n      // test: {\n      //   validators: [],\n      //   form: {\n      //     advanced: [\n      //       /* cb */\n      //     ],\n      //     base: [\n      //       /* cb */\n      //     ],\n      //   },\n      // },\n    },\n    contentType: {\n      validators: [],\n      form: {\n        advanced: [],\n        base: [],\n      },\n    },\n    component: {\n      validators: [],\n      form: {\n        advanced: [],\n        base: [],\n      },\n    },\n  },\n  contentTypeSchemaMutations: [],\n  addContentTypeSchemaMutation(cb: any) {\n    this.contentTypeSchemaMutations.push(cb);\n  },\n  extendContentType({ validator, form: { advanced, base } }: any) {\n    const { contentType } = this.types;\n\n    if (validator) {\n      contentType.validators.push(validator);\n    }\n    contentType.form.advanced.push(advanced);\n    contentType.form.base.push(base);\n  },\n  extendFields(fields: any, { validator, form: { advanced, base } }: any) {\n    const formType = this.types.attribute;\n\n    fields.forEach((field: any) => {\n      if (!formType[field]) {\n        formType[field] = {\n          validators: [],\n          form: {\n            advanced: [\n              /* cb */\n            ],\n            base: [\n              /* cb */\n            ],\n          },\n        };\n      }\n\n      if (validator) {\n        formType[field].validators.push(validator);\n      }\n      formType[field].form.advanced.push(advanced);\n      formType[field].form.base.push(base);\n    });\n  },\n\n  getAdvancedForm(target: any, props = null) {\n    const sectionsToAdd = get(this.types, [...target, 'form', 'advanced'], []).reduce(\n      (acc: any, current: any) => {\n        const sections = current(props);\n\n        return [...acc, ...sections];\n      },\n      []\n    );\n\n    return sectionsToAdd;\n  },\n\n  makeCustomFieldValidator(attributeShape: any, validator: any, ...validatorArgs: any) {\n    // When no validator, return the attribute shape\n    if (!validator) return attributeShape;\n\n    // Otherwise extend the shape with the provided validator\n    return attributeShape.shape({ options: yup.object().shape(validator(validatorArgs)) });\n  },\n\n  makeValidator(target: any, initShape: any, ...args: any) {\n    const validators = get(this.types, [...target, 'validators'], []);\n\n    const pluginOptionsShape = validators.reduce((acc: any, current: any) => {\n      const pluginOptionShape = current(args);\n\n      return { ...acc, ...pluginOptionShape };\n    }, {});\n\n    return initShape.shape({ pluginOptions: yup.object().shape(pluginOptionsShape) });\n  },\n  mutateContentTypeSchema(data: Record<string, unknown>, initialData: Record<string, unknown>) {\n    let enhancedData: any = cloneDeep(data);\n\n    const refData: any = cloneDeep(initialData);\n\n    this.contentTypeSchemaMutations.forEach((cb: any) => {\n      enhancedData = cb(enhancedData, refData);\n    });\n\n    return enhancedData;\n  },\n};\n"],"names":["formsAPI","components","inputs","add","id","component","types","attribute","contentType","validators","form","advanced","base","contentTypeSchemaMutations","addContentTypeSchemaMutation","cb","push","extendContentType","validator","extendFields","fields","formType","forEach","field","getAdvancedForm","target","props","sectionsToAdd","get","reduce","acc","current","sections","makeCustomFieldValidator","attributeShape","validatorArgs","shape","options","yup","object","makeValidator","initShape","args","pluginOptionsShape","pluginOptionShape","pluginOptions","mutateContentTypeSchema","data","initialData","enhancedData","cloneDeep","refData"],"mappings":"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"}