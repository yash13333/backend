{"version":3,"file":"DataManagerContext.js","sources":["../../../admin/src/contexts/DataManagerContext.ts"],"sourcesContent":["/* eslint-disable check-file/filename-naming-convention */\nimport { createContext } from 'react';\n\nimport type { SchemaType, Component } from '../types';\nimport type { Internal } from '@strapi/types';\n\n// TODO V5 Convert this any types to real types\nexport interface CustomFieldAttributeParams {\n  attributeToSet: Record<string, any>;\n  forTarget: SchemaType;\n  targetUid: Internal.UID.Schema;\n  initialAttribute: Record<string, any>;\n}\nexport interface DataManagerContextValue {\n  addAttribute: (\n    attributeToSet: Record<string, any>,\n    forTarget: SchemaType,\n    targetUid: Internal.UID.Schema,\n    isEditing?: boolean,\n    initialAttribute?: Record<string, any>,\n    shouldAddComponentToData?: boolean\n  ) => void;\n  addCustomFieldAttribute: (params: CustomFieldAttributeParams) => void;\n  editCustomFieldAttribute: (params: CustomFieldAttributeParams) => void;\n  addCreatedComponentToDynamicZone: (\n    dynamicZoneTarget: string,\n    componentsToAdd: Internal.UID.Component[]\n  ) => void;\n  createSchema: (\n    data: Record<string, any>,\n    schemaType: SchemaType,\n    uid: Internal.UID.Schema,\n    componentCategory?: string,\n    shouldAddComponentToData?: boolean\n  ) => void;\n  changeDynamicZoneComponents: (\n    dynamicZoneTarget: string,\n    newComponents: Internal.UID.Component[]\n  ) => void;\n  removeAttribute: (\n    mainDataKey: 'contentType' | 'component' | 'contentTypes' | 'components',\n    attributeToRemoveName: string,\n    componentUid?: string\n  ) => void;\n  deleteCategory: (categoryUid: string) => void;\n  deleteData: () => void;\n  editCategory: (categoryUid: string, body: any) => void;\n  removeComponentFromDynamicZone: (dzName: string, componentToRemoveIndex: number) => void;\n  setModifiedData: () => void;\n  sortedContentTypesList: any[]; // Define the actual type\n  submitData: (additionalContentTypeData?: Record<string, any>) => Promise<void>;\n  updateSchema: (\n    data: Record<string, any>,\n    schemaType: 'contentType' | 'component',\n    componentUID: Internal.UID.Component\n  ) => void;\n  components: Record<Internal.UID.Component, Component>;\n  componentsGroupedByCategory: Record<string, Component[]>;\n  componentsThatHaveOtherComponentInTheirAttributes: any[]; // Define the actual type\n  contentTypes: Record<string, any>;\n  initialData: Record<string, any>;\n  isInContentTypeView: boolean;\n  isInDevelopmentMode?: boolean;\n  modifiedData: Record<string, any>;\n  nestedComponents: any[]; // Define the actual type\n  reservedNames: {\n    models: string[];\n    attributes: string[];\n  };\n  allComponentsCategories: any[];\n}\n\n// @ts-expect-error need to pass initial value to params\nexport const DataManagerContext = createContext<DataManagerContextValue>();\n"],"names":["DataManagerContext","createContext"],"mappings":";;;;AAwEA;AACO,MAAMA,qBAAqBC,mBAAyC;;;;"}