{"version":3,"file":"FormModal.mjs","sources":["../../../../admin/src/components/FormModal/FormModal.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport { useStrapiApp, useTracking, useNotification } from '@strapi/admin/strapi-admin';\nimport { Button, Divider, Flex, Modal, Tabs } from '@strapi/design-system';\nimport get from 'lodash/get';\nimport has from 'lodash/has';\nimport isEqual from 'lodash/isEqual';\nimport set from 'lodash/set';\nimport toLower from 'lodash/toLower';\nimport { useIntl } from 'react-intl';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport { styled } from 'styled-components';\n\nimport { useDataManager } from '../../hooks/useDataManager';\nimport { useFormModalNavigation } from '../../hooks/useFormModalNavigation';\nimport { pluginId } from '../../pluginId';\nimport { getTrad, isAllowedContentTypesForRelations } from '../../utils';\nimport { findAttribute } from '../../utils/findAttribute';\nimport { getYupInnerErrors } from '../../utils/getYupInnerErrors';\n// New compos\nimport { AllowedTypesSelect } from '../AllowedTypesSelect';\nimport { IconByType } from '../AttributeIcon';\nimport { AttributeOptions } from '../AttributeOptions/AttributeOptions';\nimport { BooleanDefaultValueSelect } from '../BooleanDefaultValueSelect';\nimport { BooleanRadioGroup } from '../BooleanRadioGroup';\nimport { CheckboxWithNumberField } from '../CheckboxWithNumberField';\nimport { ContentTypeRadioGroup } from '../ContentTypeRadioGroup';\nimport { CustomRadioGroup } from '../CustomRadioGroup';\nimport { DraftAndPublishToggle } from '../DraftAndPublishToggle';\nimport { FormModalEndActions } from '../FormModalEndActions';\nimport { FormModalHeader } from '../FormModalHeader';\nimport { FormModalSubHeader } from '../FormModalSubHeader';\nimport { IconPicker } from '../IconPicker/IconPicker';\nimport { PluralName } from '../PluralName';\nimport { Relation } from '../Relation/Relation';\nimport { SelectCategory } from '../SelectCategory';\nimport { SelectComponent } from '../SelectComponent';\nimport { SelectComponents } from '../SelectComponents';\nimport { SelectDateType } from '../SelectDateType';\nimport { SelectNumber } from '../SelectNumber';\nimport { SingularName } from '../SingularName';\nimport { TabForm } from '../TabForm';\nimport { TextareaEnum } from '../TextareaEnum';\n\nimport { forms } from './forms/forms';\nimport { actions } from './reducer';\nimport { makeSelectFormModal } from './selectors';\nimport { canEditContentType } from './utils/canEditContentType';\nimport { createComponentUid, createUid } from './utils/createUid';\nimport { getAttributesToDisplay } from './utils/getAttributesToDisplay';\nimport { getFormInputNames } from './utils/getFormInputNames';\n\nimport type { CustomFieldAttributeParams } from '../../contexts/DataManagerContext';\nimport type { AttributeType } from '../../types';\nimport type { Internal } from '@strapi/types';\n\n/* eslint-disable indent */\n/* eslint-disable react/no-array-index-key */\n\nconst FormComponent = styled.form`\n  overflow: auto;\n`;\n\nexport const FormModal = () => {\n  const {\n    onCloseModal,\n    onNavigateToChooseAttributeModal,\n    onNavigateToAddCompoToDZModal,\n    onNavigateToCreateComponentStep2,\n    actionType,\n    attributeName,\n    attributeType,\n    customFieldUid,\n    categoryName,\n    dynamicZoneTarget,\n    forTarget,\n    modalType,\n    isOpen,\n    kind,\n    step,\n    targetUid,\n    showBackLink,\n    activeTab,\n    setActiveTab,\n  } = useFormModalNavigation();\n\n  const getPlugin = useStrapiApp('FormModal', (state) => state.getPlugin);\n  const getCustomField = useStrapiApp('FormModal', (state) => state.customFields.get);\n  const customField = getCustomField(customFieldUid);\n\n  const formModalSelector = React.useMemo(makeSelectFormModal, []);\n  const dispatch = useDispatch();\n  const { toggleNotification } = useNotification();\n  const reducerState = useSelector((state) => formModalSelector(state), shallowEqual);\n  const navigate = useNavigate();\n  const { trackUsage } = useTracking();\n  const { formatMessage } = useIntl();\n  const ctbPlugin = getPlugin(pluginId);\n  const ctbFormsAPI: any = ctbPlugin?.apis.forms;\n  const inputsFromPlugins = ctbFormsAPI.components.inputs;\n\n  const {\n    addAttribute,\n    addCustomFieldAttribute,\n    addCreatedComponentToDynamicZone,\n    allComponentsCategories,\n    changeDynamicZoneComponents,\n    contentTypes,\n    components,\n    createSchema,\n    deleteCategory,\n    deleteData,\n    editCategory,\n    editCustomFieldAttribute,\n    submitData,\n    modifiedData: allDataSchema,\n    nestedComponents,\n    setModifiedData,\n    sortedContentTypesList,\n    updateSchema,\n    reservedNames,\n  } = useDataManager();\n\n  const {\n    componentToCreate,\n    formErrors,\n    initialData,\n    isCreatingComponentWhileAddingAField,\n    modifiedData,\n  } = reducerState;\n\n  const pathToSchema =\n    forTarget === 'contentType' || forTarget === 'component' ? [forTarget] : [forTarget, targetUid];\n\n  React.useEffect(() => {\n    if (isOpen) {\n      const collectionTypesForRelation = sortedContentTypesList.filter(\n        isAllowedContentTypesForRelations\n      );\n\n      // Reset all the modification when opening the edit category modal\n      if (modalType === 'editCategory') {\n        setModifiedData();\n      }\n\n      if (actionType === 'edit' && modalType === 'attribute' && forTarget === 'contentType') {\n        trackUsage('willEditFieldOfContentType');\n      }\n\n      const pathToAttributes = [...pathToSchema, 'schema', 'attributes'];\n\n      // Case:\n      // the user opens the modal chooseAttributes\n      // selects dynamic zone => set the field name\n      // then goes to step 1 (the modal is addComponentToDynamicZone) and finally reloads the app.\n      // In this particular if the user tries to add components to the zone it will pop an error since the dz is unknown\n      const foundDynamicZoneTarget =\n        findAttribute(get(allDataSchema, pathToAttributes, []), dynamicZoneTarget) || null;\n\n      // Edit category\n      if (modalType === 'editCategory' && actionType === 'edit') {\n        dispatch(\n          actions.setDataToEdit({\n            data: {\n              name: categoryName,\n            },\n          })\n        );\n      }\n\n      // Create content type we need to add the default option draftAndPublish\n      if (modalType === 'contentType' && actionType === 'create') {\n        dispatch(\n          actions.setDataToEdit({\n            data: {\n              draftAndPublish: true,\n            },\n          })\n        );\n      }\n\n      // Edit content type\n      if (modalType === 'contentType' && actionType === 'edit') {\n        const { displayName, draftAndPublish, kind, pluginOptions, pluralName, singularName } = get(\n          allDataSchema,\n          [...pathToSchema, 'schema'],\n          {\n            displayName: null,\n            pluginOptions: {},\n            singularName: null,\n            pluralName: null,\n          }\n        );\n\n        dispatch(\n          actions.setDataToEdit({\n            data: {\n              displayName,\n              draftAndPublish,\n              kind,\n              pluginOptions,\n              pluralName,\n              singularName,\n            },\n          })\n        );\n      }\n\n      // Edit component\n      if (modalType === 'component' && actionType === 'edit') {\n        const data = get(allDataSchema, pathToSchema, {});\n\n        dispatch(\n          actions.setDataToEdit({\n            data: {\n              displayName: data.schema.displayName,\n              category: data.category,\n              icon: data.schema.icon,\n            },\n          })\n        );\n      }\n\n      // Special case for the dynamic zone\n      if (modalType === 'addComponentToDynamicZone' && actionType === 'edit') {\n        const attributeToEdit = {\n          ...foundDynamicZoneTarget,\n          // We filter the available components\n          // Because this modal is only used for adding components\n          components: [],\n          name: dynamicZoneTarget,\n          createComponent: false,\n          componentToCreate: { type: 'component' },\n        };\n\n        dispatch(\n          actions.setDynamicZoneDataSchema({\n            attributeToEdit,\n          })\n        );\n      }\n\n      // Set the predefined data structure to create an attribute\n      if (attributeType) {\n        const attributeToEditNotFormatted = findAttribute(\n          get(allDataSchema, pathToAttributes, []),\n          attributeName\n        ) as AttributeType;\n        const attributeToEdit = {\n          ...attributeToEditNotFormatted,\n          name: attributeName,\n        };\n\n        // We need to set the repeatable key to false when editing a component\n        // The API doesn't send this info\n        if (attributeType === 'component' && actionType === 'edit') {\n          if (!attributeToEdit.repeatable) {\n            set(attributeToEdit, 'repeatable', false);\n          }\n        }\n\n        if (modalType === 'customField') {\n          if (actionType === 'edit') {\n            dispatch(\n              actions.setCustomFieldDataSchema({\n                isEditing: true,\n                modifiedDataToSetForEditing: attributeToEdit,\n              })\n            );\n          } else {\n            dispatch(\n              actions.setCustomFieldDataSchema({\n                customField: customField!,\n                isEditing: false,\n                modifiedDataToSetForEditing: attributeToEdit,\n              })\n            );\n          }\n        } else {\n          dispatch(\n            actions.setAttributeDataSchema({\n              attributeType,\n              nameToSetForRelation: get(collectionTypesForRelation, ['0', 'title'], 'error'),\n              targetUid: get(collectionTypesForRelation, ['0', 'uid'], 'error'),\n              isEditing: actionType === 'edit',\n              modifiedDataToSetForEditing: attributeToEdit,\n              step,\n              // forTarget,\n            })\n          );\n        }\n      }\n    } else {\n      dispatch(actions.resetProps());\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [\n    actionType,\n    attributeName,\n    attributeType,\n    categoryName,\n    dynamicZoneTarget,\n    forTarget,\n    isOpen,\n    modalType,\n  ]);\n\n  const isCreatingContentType = modalType === 'contentType';\n  const isCreatingComponent = modalType === 'component';\n  const isCreatingAttribute = modalType === 'attribute';\n  const isCreatingCustomFieldAttribute = modalType === 'customField';\n  const isComponentAttribute = attributeType === 'component' && isCreatingAttribute;\n  const isCreating = actionType === 'create';\n  const isCreatingComponentFromAView =\n    get(modifiedData, 'createComponent', false) || isCreatingComponentWhileAddingAField;\n  const isInFirstComponentStep = step === '1';\n  const isEditingCategory = modalType === 'editCategory';\n  const isPickingAttribute = modalType === 'chooseAttribute';\n  const uid = createUid(modifiedData.displayName || '');\n  const attributes = get(allDataSchema, [...pathToSchema, 'schema', 'attributes'], null) as {\n    name: string;\n  }[];\n\n  const checkFormValidity = async () => {\n    let schema;\n    const dataToValidate =\n      isCreatingComponentFromAView && step === '1'\n        ? get(modifiedData, 'componentToCreate', {})\n        : modifiedData;\n    // Check form validity for content type\n    if (isCreatingContentType) {\n      schema = forms.contentType.schema(\n        Object.keys(contentTypes),\n        actionType === 'edit',\n        // currentUID\n        get(allDataSchema, [...pathToSchema, 'uid'], null),\n        reservedNames,\n        ctbFormsAPI,\n        contentTypes\n      );\n\n      // Check form validity for component\n      // This is happening when the user click on the link from the left menu\n    } else if (isCreatingComponent) {\n      schema = forms.component.schema(\n        Object.keys(components) as Internal.UID.Component[],\n        modifiedData.category || '',\n        reservedNames,\n        actionType === 'edit',\n        components,\n        modifiedData.displayName || '',\n        get(allDataSchema, [...pathToSchema, 'uid'], null)\n        // ctbFormsAPI\n      );\n    } else if (isCreatingCustomFieldAttribute) {\n      schema = forms.customField.schema({\n        schemaAttributes: get(allDataSchema, [...pathToSchema, 'schema', 'attributes'], []),\n        attributeType: customField!.type,\n        reservedNames,\n        schemaData: { modifiedData, initialData },\n        ctbFormsAPI,\n        customFieldValidator: customField!.options?.validator,\n      });\n\n      // Check for validity for creating a component\n      // This is happening when the user creates a component \"on the fly\"\n      // Since we temporarily store the component info in another object\n      // The data is set in the componentToCreate key\n    } else if (isComponentAttribute && isCreatingComponentFromAView && isInFirstComponentStep) {\n      schema = forms.component.schema(\n        Object.keys(components) as Internal.UID.Component[],\n        get(modifiedData, 'componentToCreate.category', ''),\n        reservedNames,\n        actionType === 'edit',\n        components,\n        modifiedData.componentToCreate.displayName || ''\n      );\n\n      // Check form validity for creating a 'common attribute'\n      // We need to make sure that it is independent from the step\n    } else if (isCreatingAttribute && !isInFirstComponentStep) {\n      const type = attributeType === 'relation' ? 'relation' : modifiedData.type;\n\n      let alreadyTakenTargetContentTypeAttributes = [];\n\n      if (type === 'relation') {\n        const targetContentTypeUID = get(modifiedData, ['target'], null);\n\n        const targetContentTypeAttributes = get(\n          contentTypes,\n          [targetContentTypeUID, 'schema', 'attributes'],\n          []\n        );\n\n        // Create an array with all the targetContentType attributes name\n        // in order to prevent the user from creating a relation with a targetAttribute\n        // that may exist in the other content type\n        alreadyTakenTargetContentTypeAttributes = targetContentTypeAttributes.filter(\n          ({ name: attrName }: { name: string }) => {\n            // Keep all the target content type attributes when creating a relation\n            if (actionType !== 'edit') {\n              return true;\n            }\n\n            // Remove the already created one when editing\n            return attrName !== initialData.targetAttribute;\n          }\n        );\n      }\n      schema = forms.attribute.schema(\n        get(allDataSchema, pathToSchema, {}),\n        type,\n        reservedNames,\n        alreadyTakenTargetContentTypeAttributes,\n        { modifiedData, initialData },\n        ctbFormsAPI\n      );\n    } else if (isEditingCategory) {\n      schema = forms.editCategory.schema(allComponentsCategories, initialData);\n    } else {\n      // The user is either in the addComponentToDynamicZone modal or\n      // in step 1 of the add component (modalType=attribute&attributeType=component) but not creating a component\n      // eslint-disable-next-line no-lonely-if\n      if (isInFirstComponentStep && isCreatingComponentFromAView) {\n        schema = forms.component.schema(\n          Object.keys(components) as Internal.UID.Component[],\n          get(modifiedData, 'componentToCreate.category', ''),\n          reservedNames,\n          actionType === 'edit',\n          components,\n          modifiedData.componentToCreate.displayName || ''\n        );\n      } else {\n        // The form is valid\n        // The case here is being in the addComponentToDynamicZone modal and not creating a component\n        return;\n      }\n    }\n\n    await schema.validate(dataToValidate, { abortEarly: false });\n  };\n\n  const handleChange = React.useCallback(\n    ({\n      target: { name, value, type, ...rest },\n    }: {\n      target: { name: string; value: string; type: string };\n    }) => {\n      const namesThatCanResetToNullValue = [\n        'enumName',\n        'max',\n        'min',\n        'maxLength',\n        'minLength',\n        'regex',\n        'default',\n      ];\n\n      let val;\n\n      if (namesThatCanResetToNullValue.includes(name) && value === '') {\n        val = null;\n      } else {\n        val = value;\n      }\n\n      const clonedErrors = Object.assign({}, formErrors);\n\n      // Reset min error when modifying the max\n      if (name === 'max') {\n        delete clonedErrors.min;\n      }\n\n      // Same here\n      if (name === 'maxLength') {\n        delete clonedErrors.minLength;\n      }\n\n      // Since the onBlur is deactivated we remove the errors directly when changing an input\n      delete clonedErrors[name];\n\n      dispatch(\n        actions.setErrors({\n          errors: clonedErrors,\n        })\n      );\n\n      dispatch(\n        actions.onChange({\n          keys: name.split('.'),\n          value: val,\n        })\n      );\n    },\n    [dispatch, formErrors]\n  );\n\n  const handleSubmit = async (e: React.SyntheticEvent, shouldContinue = isCreating) => {\n    e.preventDefault();\n\n    try {\n      await checkFormValidity();\n\n      sendButtonAddMoreFieldEvent(shouldContinue);\n      const ctTargetUid = forTarget === 'components' ? targetUid : uid;\n\n      if (isCreatingContentType) {\n        // Create the content type schema\n        if (isCreating) {\n          createSchema({ ...modifiedData, kind }, modalType, uid);\n          // Redirect the user to the created content type\n          navigate({ pathname: `/plugins/${pluginId}/content-types/${uid}` });\n\n          // Navigate to the choose attribute modal\n          onNavigateToChooseAttributeModal({\n            forTarget,\n            targetUid: ctTargetUid,\n          });\n        } else {\n          // We cannot switch from collection type to single when the modal is making relations other than oneWay or manyWay\n          if (canEditContentType(allDataSchema, modifiedData)) {\n            onCloseModal();\n\n            await submitData(modifiedData);\n          } else {\n            toggleNotification({\n              type: 'danger',\n              message: formatMessage({ id: 'notification.contentType.relations.conflict' }),\n            });\n          }\n\n          return;\n        }\n        // We are creating a component using the component modal from the left menu\n      } else if (modalType === 'component') {\n        if (isCreating) {\n          // Create the component schema\n          const componentUid = createComponentUid(modifiedData.displayName, modifiedData.category);\n          const { category, ...rest } = modifiedData;\n\n          createSchema(rest, 'component', componentUid, category);\n\n          // Redirect the user to the created component\n          navigate({\n            pathname: `/plugins/${pluginId}/component-categories/${category}/${componentUid}`,\n          });\n\n          // Navigate to the choose attribute modal\n          onNavigateToChooseAttributeModal({\n            forTarget,\n            targetUid: componentUid,\n          });\n        } else {\n          updateSchema(modifiedData, modalType, targetUid as Internal.UID.Component);\n\n          // Close the modal\n          onCloseModal();\n\n          return;\n        }\n      } else if (isEditingCategory) {\n        if (toLower(initialData.name) === toLower(modifiedData.name)) {\n          // Close the modal\n          onCloseModal();\n\n          return;\n        }\n\n        editCategory(initialData.name, modifiedData);\n\n        return;\n        // Add/edit a field to a content type\n        // Add/edit a field to a created component (the end modal is not step 2)\n      } else if (isCreatingCustomFieldAttribute) {\n        const customFieldAttributeUpdate: CustomFieldAttributeParams = {\n          attributeToSet: { ...modifiedData, customField: customFieldUid },\n          forTarget,\n          targetUid,\n          initialAttribute: initialData,\n        };\n\n        if (actionType === 'edit') {\n          editCustomFieldAttribute(customFieldAttributeUpdate);\n        } else {\n          addCustomFieldAttribute(customFieldAttributeUpdate);\n        }\n\n        if (shouldContinue) {\n          onNavigateToChooseAttributeModal({\n            forTarget,\n            targetUid: ctTargetUid,\n          });\n        } else {\n          onCloseModal();\n        }\n\n        return;\n      } else if (isCreatingAttribute && !isCreatingComponentFromAView) {\n        const isDynamicZoneAttribute = attributeType === 'dynamiczone';\n\n        // The user is creating a DZ (he had entered the name of the dz)\n        if (isDynamicZoneAttribute) {\n          addAttribute(modifiedData, forTarget, targetUid, actionType === 'edit', initialData);\n\n          // Adding a component to a dynamiczone is not the same logic as creating a simple field\n          // so the search is different\n          if (isCreating) {\n            // Step 1 of adding a component to a DZ, the user has the option to create a component\n            dispatch(actions.resetPropsAndSetTheFormForAddingACompoToADz());\n\n            setActiveTab('basic');\n            onNavigateToAddCompoToDZModal({ dynamicZoneTarget: modifiedData.name });\n          } else {\n            onCloseModal();\n          }\n\n          return;\n        }\n\n        // Normal fields like boolean relations or dynamic zone\n        if (!isComponentAttribute) {\n          addAttribute(modifiedData, forTarget, targetUid, actionType === 'edit', initialData);\n\n          if (shouldContinue) {\n            onNavigateToChooseAttributeModal({\n              forTarget,\n              targetUid: ctTargetUid,\n            });\n          } else {\n            onCloseModal();\n          }\n\n          return;\n\n          // Adding an existing component\n        }\n        // eslint-disable-next-line no-lonely-if\n        if (isInFirstComponentStep) {\n          // Navigate the user to step 2\n          onNavigateToCreateComponentStep2();\n\n          // Clear the reducer and prepare the modified data\n          // This way we don't have to add some logic to re-run the useEffect\n          // The first step is either needed to create a component or just to navigate\n          // To the modal for adding a \"common field\"\n          dispatch(actions.resetPropsAndSetFormForAddingAnExistingCompo({}));\n\n          // We don't want all the props to be reset\n          return;\n\n          // Here we are in step 2\n          // The step 2 is also use to edit an attribute that is a component\n        }\n\n        addAttribute(\n          modifiedData,\n          forTarget,\n          targetUid,\n          // This change the dispatched type\n          // either 'editAttribute' or 'addAttribute' in the DataManagerProvider\n          actionType === 'edit',\n          // This is for the edit part\n          initialData,\n          // Passing true will add the component to the components object\n          // This way we can add fields to the added component (if it wasn't there already)\n          true\n        );\n\n        if (shouldContinue) {\n          onNavigateToChooseAttributeModal({\n            forTarget,\n            targetUid,\n          });\n        } else {\n          onCloseModal();\n        }\n\n        // We don't need to end the loop here we want the reducer to be reinitialized\n\n        // Logic for creating a component without clicking on the link in\n        // the left menu\n        // We need to separate the logic otherwise the component would be created\n        // even though the user didn't set any field\n        // We need to prevent the component from being created if the user closes the modal at step 2 without any submission\n      } else if (isCreatingAttribute && isCreatingComponentFromAView) {\n        // Step 1\n        if (isInFirstComponentStep) {\n          // Here the search could be refactored since it is the same as the case from above\n          // Navigate the user to step 2\n\n          trackUsage('willCreateComponentFromAttributesModal');\n\n          // Here we clear the reducer state but we also keep the created component\n          // If we were to create the component before\n          dispatch(actions.resetPropsAndSaveCurrentData({}));\n\n          onNavigateToCreateComponentStep2();\n\n          // Terminate because we don't want the reducer to be entirely reset\n          return;\n\n          // Step 2 of creating a component (which is setting the attribute name in the parent's schema)\n        }\n        // We are destructuring because the modifiedData object doesn't have the appropriate format to create a field\n        const { category, type, ...rest } = componentToCreate;\n        // Create a the component temp UID\n        // This could be refactored but I think it's more understandable to separate the logic\n        const componentUid = createComponentUid(componentToCreate.displayName, category);\n        // Create the component first and add it to the components data\n        createSchema(\n          // Component data\n          rest,\n          // Type will always be component\n          // It will dispatch the CREATE_COMPONENT_SCHEMA action\n          // So the component will be added in the main components object\n          // This might not be needed if we don't allow navigation between entries while editing\n          type,\n          componentUid,\n          category,\n          // This will add the created component in the datamanager modifiedData components key\n          // Like explained above we will be able to modify the created component structure\n          isCreatingComponentFromAView\n        );\n        // Add the field to the schema\n        addAttribute(modifiedData, forTarget, targetUid, false);\n\n        dispatch(actions.resetProps());\n\n        // Open modal attribute for adding attr to component\n        if (shouldContinue) {\n          onNavigateToChooseAttributeModal({ forTarget: 'components', targetUid: componentUid });\n        } else {\n          onCloseModal();\n        }\n\n        return;\n      } else {\n        // The modal is addComponentToDynamicZone\n        if (isInFirstComponentStep) {\n          if (isCreatingComponentFromAView) {\n            const { category, type, ...rest } = modifiedData.componentToCreate;\n            const componentUid = createComponentUid(\n              modifiedData.componentToCreate.displayName,\n              category\n            );\n            // Create the component first and add it to the components data\n            createSchema(\n              // Component data\n              rest,\n              // Type will always be component\n              // It will dispatch the CREATE_COMPONENT_SCHEMA action\n              // So the component will be added in the main components object\n              // This might not be needed if we don't allow navigation between entries while editing\n              type,\n              componentUid,\n              category,\n              // This will add the created component in the datamanager modifiedData components key\n              // Like explained above we will be able to modify the created component structure\n              isCreatingComponentFromAView\n            );\n            // Add the created component to the DZ\n            // We don't want to remove the old ones\n            addCreatedComponentToDynamicZone(dynamicZoneTarget, [componentUid]);\n\n            // The Dynamic Zone and the component is created\n            // Open the modal to add fields to the created component\n            onNavigateToChooseAttributeModal({ forTarget: 'components', targetUid: componentUid });\n          } else {\n            // Add the components to the DZ\n            changeDynamicZoneComponents(dynamicZoneTarget, modifiedData.components);\n\n            onCloseModal();\n          }\n        } else {\n          console.error('This case is not handled');\n        }\n\n        return;\n      }\n\n      dispatch(actions.resetProps());\n    } catch (err: any) {\n      const errors = getYupInnerErrors(err);\n\n      dispatch(\n        actions.setErrors({\n          errors,\n        })\n      );\n    }\n  };\n\n  const handleConfirmClose = () => {\n    // eslint-disable-next-line no-alert\n    const confirm = window.confirm(\n      formatMessage({\n        id: 'window.confirm.close-modal.file',\n        defaultMessage: 'Are you sure? Your changes will be lost.',\n      })\n    );\n\n    if (confirm) {\n      onCloseModal();\n      dispatch(actions.resetProps());\n    }\n  };\n\n  const handleClosed = () => {\n    // Close the modal\n    if (!isEqual(modifiedData, initialData)) {\n      handleConfirmClose();\n    } else {\n      onCloseModal();\n      // Reset the reducer\n      dispatch(actions.resetProps());\n    }\n  };\n\n  const sendAdvancedTabEvent = (tab: string) => {\n    if (tab !== 'advanced') {\n      return;\n    }\n\n    if (isCreatingContentType) {\n      trackUsage('didSelectContentTypeSettings');\n\n      return;\n    }\n\n    if (forTarget === 'contentType') {\n      trackUsage('didSelectContentTypeFieldSettings');\n    }\n  };\n\n  const sendButtonAddMoreFieldEvent = (shouldContinue: boolean) => {\n    if (\n      modalType === 'attribute' &&\n      forTarget === 'contentType' &&\n      attributeType !== 'dynamiczone' &&\n      shouldContinue\n    ) {\n      trackUsage('willAddMoreFieldToContentType');\n    }\n  };\n\n  const shouldDisableAdvancedTab = () => {\n    if (modalType === 'editCategory') {\n      return true;\n    }\n\n    if (modalType === 'component') {\n      return true;\n    }\n\n    if (has(modifiedData, 'createComponent')) {\n      return true;\n    }\n\n    return false;\n  };\n\n  // Display data for the attributes picker modal\n  const displayedAttributes = getAttributesToDisplay(\n    forTarget,\n    targetUid,\n    // We need the nested components so we know when to remove the component option\n    nestedComponents\n  );\n\n  if (!modalType) {\n    return null;\n  }\n\n  const formToDisplay = get(forms, [modalType, 'form'], {\n    advanced: () => ({\n      sections: [],\n    }),\n    base: () => ({\n      sections: [],\n    }),\n  });\n\n  const isAddingAComponentToAnotherComponent =\n    forTarget === 'components' || forTarget === 'component';\n\n  const genericInputProps = {\n    customInputs: {\n      'allowed-types-select': AllowedTypesSelect,\n      'boolean-radio-group': BooleanRadioGroup,\n      'checkbox-with-number-field': CheckboxWithNumberField,\n      'icon-picker': IconPicker,\n      'content-type-radio-group': ContentTypeRadioGroup,\n      'radio-group': CustomRadioGroup,\n      relation: Relation,\n      'select-category': SelectCategory,\n      'select-component': SelectComponent,\n      'select-components': SelectComponents,\n      'select-default-boolean': BooleanDefaultValueSelect,\n      'select-number': SelectNumber,\n      'select-date': SelectDateType,\n      'toggle-draft-publish': DraftAndPublishToggle,\n      'text-plural': PluralName,\n      'text-singular': SingularName,\n      'textarea-enum': TextareaEnum,\n      ...inputsFromPlugins,\n    },\n    componentToCreate,\n    dynamicZoneTarget,\n    formErrors,\n    isAddingAComponentToAnotherComponent,\n    isCreatingComponentWhileAddingAField,\n    mainBoxHeader: get(allDataSchema, [...pathToSchema, 'schema', 'displayName'], ''),\n    modifiedData,\n    naturePickerType: forTarget,\n    isCreating,\n    targetUid,\n    forTarget,\n  };\n\n  const advancedForm = formToDisplay.advanced({\n    data: modifiedData,\n    type: attributeType,\n    step,\n    actionType,\n    attributes,\n    extensions: ctbFormsAPI,\n    forTarget,\n    contentTypeSchema: allDataSchema.contentType || {},\n    customField,\n  }).sections;\n  const baseForm = formToDisplay.base({\n    data: modifiedData,\n    type: attributeType,\n    step,\n    actionType,\n    attributes,\n    extensions: ctbFormsAPI,\n    forTarget,\n    contentTypeSchema: allDataSchema.contentType || {},\n    customField,\n  }).sections;\n\n  const baseFormInputNames = getFormInputNames(baseForm);\n\n  const advancedFormInputNames = getFormInputNames(advancedForm);\n  const doesBaseFormHasError = Object.keys(formErrors).some((key) =>\n    baseFormInputNames.includes(key)\n  );\n\n  const doesAdvancedFormHasError = Object.keys(formErrors).some((key) =>\n    advancedFormInputNames.includes(key)\n  );\n\n  const schemaKind = get(contentTypes, [targetUid, 'schema', 'kind']);\n\n  const checkIsEditingFieldName = () =>\n    actionType === 'edit' && attributes.every(({ name }) => name !== modifiedData?.name);\n\n  const handleClickFinish = () => {\n    if (checkIsEditingFieldName()) {\n      trackUsage('didEditFieldNameOnContentType');\n    }\n  };\n\n  return (\n    <Modal.Root open={isOpen} onOpenChange={handleClosed}>\n      <Modal.Content>\n        <FormModalHeader\n          actionType={actionType}\n          attributeName={attributeName}\n          categoryName={categoryName}\n          contentTypeKind={kind as IconByType}\n          dynamicZoneTarget={dynamicZoneTarget}\n          modalType={modalType}\n          forTarget={forTarget}\n          targetUid={targetUid}\n          attributeType={attributeType as IconByType}\n          customFieldUid={customFieldUid}\n          showBackLink={showBackLink}\n        />\n        {isPickingAttribute && (\n          <AttributeOptions\n            attributes={displayedAttributes}\n            forTarget={forTarget}\n            kind={schemaKind || 'collectionType'}\n          />\n        )}\n        {!isPickingAttribute && (\n          <FormComponent onSubmit={handleSubmit}>\n            <Modal.Body>\n              <Tabs.Root\n                variant=\"simple\"\n                value={activeTab}\n                onValueChange={(value) => {\n                  setActiveTab(value);\n                  sendAdvancedTabEvent(value);\n                }}\n                hasError={\n                  doesBaseFormHasError ? 'basic' : doesAdvancedFormHasError ? 'advanced' : undefined\n                }\n              >\n                <Flex justifyContent=\"space-between\">\n                  <FormModalSubHeader\n                    actionType={actionType}\n                    forTarget={forTarget}\n                    kind={kind}\n                    step={step}\n                    modalType={modalType}\n                    attributeType={attributeType}\n                    attributeName={attributeName}\n                    customField={customField}\n                  />\n                  <Tabs.List>\n                    <Tabs.Trigger value=\"basic\">\n                      {formatMessage({\n                        id: getTrad('popUpForm.navContainer.base'),\n                        defaultMessage: 'Basic settings',\n                      })}\n                    </Tabs.Trigger>\n                    <Tabs.Trigger value=\"advanced\" disabled={shouldDisableAdvancedTab()}>\n                      {formatMessage({\n                        id: getTrad('popUpForm.navContainer.advanced'),\n                        defaultMessage: 'Advanced settings',\n                      })}\n                    </Tabs.Trigger>\n                  </Tabs.List>\n                </Flex>\n                <Divider marginBottom={6} />\n                <Tabs.Content value=\"basic\">\n                  <Flex direction=\"column\" alignItems=\"stretch\" gap={6}>\n                    <TabForm\n                      form={baseForm}\n                      formErrors={formErrors}\n                      genericInputProps={genericInputProps}\n                      modifiedData={modifiedData}\n                      onChange={handleChange}\n                    />\n                  </Flex>\n                </Tabs.Content>\n                <Tabs.Content value=\"advanced\">\n                  <Flex direction=\"column\" alignItems=\"stretch\" gap={6}>\n                    <TabForm\n                      form={advancedForm}\n                      formErrors={formErrors}\n                      genericInputProps={genericInputProps}\n                      modifiedData={modifiedData}\n                      onChange={handleChange}\n                    />\n                  </Flex>\n                </Tabs.Content>\n              </Tabs.Root>\n            </Modal.Body>\n            <Modal.Footer>\n              <Button variant=\"tertiary\" onClick={handleClosed}>\n                {formatMessage({ id: 'app.components.Button.cancel', defaultMessage: 'Cancel' })}\n              </Button>\n              {/* TODO: refactor this component. Nuf said. */}\n              <FormModalEndActions\n                deleteCategory={deleteCategory}\n                deleteContentType={deleteData}\n                deleteComponent={deleteData}\n                categoryName={initialData.name}\n                isAttributeModal={modalType === 'attribute'}\n                isCustomFieldModal={modalType === 'customField'}\n                isComponentToDzModal={modalType === 'addComponentToDynamicZone'}\n                isComponentAttribute={attributeType === 'component'}\n                isComponentModal={modalType === 'component'}\n                isContentTypeModal={modalType === 'contentType'}\n                isCreatingComponent={actionType === 'create'}\n                isCreatingDz={actionType === 'create'}\n                isCreatingComponentAttribute={modifiedData.createComponent || false}\n                isCreatingComponentInDz={modifiedData.createComponent || false}\n                isCreatingComponentWhileAddingAField={isCreatingComponentWhileAddingAField}\n                isCreatingContentType={actionType === 'create'}\n                isEditingAttribute={actionType === 'edit'}\n                isDzAttribute={attributeType === 'dynamiczone'}\n                isEditingCategory={modalType === 'editCategory'}\n                isInFirstComponentStep={step === '1'}\n                onSubmitAddComponentAttribute={handleSubmit}\n                onSubmitAddComponentToDz={handleSubmit}\n                onSubmitCreateComponent={handleSubmit}\n                onSubmitCreateContentType={handleSubmit}\n                onSubmitCreateDz={handleSubmit}\n                onSubmitEditAttribute={handleSubmit}\n                onSubmitEditCategory={handleSubmit}\n                onSubmitEditComponent={handleSubmit}\n                onSubmitEditContentType={handleSubmit}\n                onSubmitEditCustomFieldAttribute={handleSubmit}\n                onSubmitEditDz={handleSubmit}\n                onClickFinish={handleClickFinish}\n              />\n            </Modal.Footer>\n          </FormComponent>\n        )}\n      </Modal.Content>\n    </Modal.Root>\n  );\n};\n"],"names":["FormComponent","styled","form","FormModal","onCloseModal","onNavigateToChooseAttributeModal","onNavigateToAddCompoToDZModal","onNavigateToCreateComponentStep2","actionType","attributeName","attributeType","customFieldUid","categoryName","dynamicZoneTarget","forTarget","modalType","isOpen","kind","step","targetUid","showBackLink","activeTab","setActiveTab","useFormModalNavigation","getPlugin","useStrapiApp","state","getCustomField","customFields","get","customField","formModalSelector","React","useMemo","makeSelectFormModal","dispatch","useDispatch","toggleNotification","useNotification","reducerState","useSelector","shallowEqual","navigate","useNavigate","trackUsage","useTracking","formatMessage","useIntl","ctbPlugin","pluginId","ctbFormsAPI","apis","forms","inputsFromPlugins","components","inputs","addAttribute","addCustomFieldAttribute","addCreatedComponentToDynamicZone","allComponentsCategories","changeDynamicZoneComponents","contentTypes","createSchema","deleteCategory","deleteData","editCategory","editCustomFieldAttribute","submitData","modifiedData","allDataSchema","nestedComponents","setModifiedData","sortedContentTypesList","updateSchema","reservedNames","useDataManager","componentToCreate","formErrors","initialData","isCreatingComponentWhileAddingAField","pathToSchema","useEffect","collectionTypesForRelation","filter","isAllowedContentTypesForRelations","pathToAttributes","foundDynamicZoneTarget","findAttribute","actions","setDataToEdit","data","name","draftAndPublish","displayName","pluginOptions","pluralName","singularName","schema","category","icon","attributeToEdit","createComponent","type","setDynamicZoneDataSchema","attributeToEditNotFormatted","repeatable","set","setCustomFieldDataSchema","isEditing","modifiedDataToSetForEditing","setAttributeDataSchema","nameToSetForRelation","resetProps","isCreatingContentType","isCreatingComponent","isCreatingAttribute","isCreatingCustomFieldAttribute","isComponentAttribute","isCreating","isCreatingComponentFromAView","isInFirstComponentStep","isEditingCategory","isPickingAttribute","uid","createUid","attributes","checkFormValidity","dataToValidate","contentType","Object","keys","component","schemaAttributes","schemaData","customFieldValidator","options","validator","alreadyTakenTargetContentTypeAttributes","targetContentTypeUID","targetContentTypeAttributes","attrName","targetAttribute","attribute","validate","abortEarly","handleChange","useCallback","target","value","rest","namesThatCanResetToNullValue","val","includes","clonedErrors","assign","min","minLength","setErrors","errors","onChange","split","handleSubmit","e","shouldContinue","preventDefault","sendButtonAddMoreFieldEvent","ctTargetUid","pathname","canEditContentType","message","id","componentUid","createComponentUid","toLower","customFieldAttributeUpdate","attributeToSet","initialAttribute","isDynamicZoneAttribute","resetPropsAndSetTheFormForAddingACompoToADz","resetPropsAndSetFormForAddingAnExistingCompo","resetPropsAndSaveCurrentData","console","error","err","getYupInnerErrors","handleConfirmClose","confirm","window","defaultMessage","handleClosed","isEqual","sendAdvancedTabEvent","tab","shouldDisableAdvancedTab","has","displayedAttributes","getAttributesToDisplay","formToDisplay","advanced","sections","base","isAddingAComponentToAnotherComponent","genericInputProps","customInputs","AllowedTypesSelect","BooleanRadioGroup","CheckboxWithNumberField","IconPicker","ContentTypeRadioGroup","CustomRadioGroup","relation","Relation","SelectCategory","SelectComponent","SelectComponents","BooleanDefaultValueSelect","SelectNumber","SelectDateType","DraftAndPublishToggle","PluralName","SingularName","TextareaEnum","mainBoxHeader","naturePickerType","advancedForm","extensions","contentTypeSchema","baseForm","baseFormInputNames","getFormInputNames","advancedFormInputNames","doesBaseFormHasError","some","key","doesAdvancedFormHasError","schemaKind","checkIsEditingFieldName","every","handleClickFinish","_jsx","Modal","Root","open","onOpenChange","_jsxs","Content","FormModalHeader","contentTypeKind","AttributeOptions","onSubmit","Body","Tabs","variant","onValueChange","hasError","undefined","Flex","justifyContent","FormModalSubHeader","List","Trigger","getTrad","disabled","Divider","marginBottom","direction","alignItems","gap","TabForm","Footer","Button","onClick","FormModalEndActions","deleteContentType","deleteComponent","isAttributeModal","isCustomFieldModal","isComponentToDzModal","isComponentModal","isContentTypeModal","isCreatingDz","isCreatingComponentAttribute","isCreatingComponentInDz","isEditingAttribute","isDzAttribute","onSubmitAddComponentAttribute","onSubmitAddComponentToDz","onSubmitCreateComponent","onSubmitCreateContentType","onSubmitCreateDz","onSubmitEditAttribute","onSubmitEditCategory","onSubmitEditComponent","onSubmitEditContentType","onSubmitEditCustomFieldAttribute","onSubmitEditDz","onClickFinish"],"mappings":"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"}