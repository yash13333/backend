{"version":3,"file":"DisplayedType.mjs","sources":["../../../admin/src/components/DisplayedType.tsx"],"sourcesContent":["import { Typography } from '@strapi/design-system';\nimport { useIntl } from 'react-intl';\n\nimport { getTrad } from '../utils/getTrad';\n\ntype DisplayedTypeProps = {\n  type: string;\n  customField?: string | null;\n  repeatable?: boolean;\n};\n\nexport const DisplayedType = ({\n  type,\n  customField = null,\n  repeatable = false,\n}: DisplayedTypeProps) => {\n  const { formatMessage } = useIntl();\n\n  let readableType = type;\n\n  if (['integer', 'biginteger', 'float', 'decimal'].includes(type)) {\n    readableType = 'number';\n  } else if (['string'].includes(type)) {\n    readableType = 'text';\n  }\n\n  if (customField) {\n    return (\n      <Typography>\n        {formatMessage({\n          id: getTrad('attribute.customField'),\n          defaultMessage: 'Custom field',\n        })}\n      </Typography>\n    );\n  }\n\n  return (\n    <Typography textColor=\"neutral800\">\n      {formatMessage({\n        id: getTrad(`attribute.${readableType}`),\n        defaultMessage: type,\n      })}\n      &nbsp;\n      {repeatable &&\n        formatMessage({\n          id: getTrad('component.repeatable'),\n          defaultMessage: '(repeatable)',\n        })}\n    </Typography>\n  );\n};\n"],"names":["DisplayedType","type","customField","repeatable","formatMessage","useIntl","readableType","includes","_jsx","Typography","id","getTrad","defaultMessage","_jsxs","textColor"],"mappings":";;;;;AAWO,MAAMA,aAAgB,GAAA,CAAC,EAC5BC,IAAI,EACJC,WAAAA,GAAc,IAAI,EAClBC,UAAa,GAAA,KAAK,EACC,GAAA;IACnB,MAAM,EAAEC,aAAa,EAAE,GAAGC,OAAAA,EAAAA;AAE1B,IAAA,IAAIC,YAAeL,GAAAA,IAAAA;IAEnB,IAAI;AAAC,QAAA,SAAA;AAAW,QAAA,YAAA;AAAc,QAAA,OAAA;AAAS,QAAA;KAAU,CAACM,QAAQ,CAACN,IAAO,CAAA,EAAA;QAChEK,YAAe,GAAA,QAAA;AACjB,KAAA,MAAO,IAAI;AAAC,QAAA;KAAS,CAACC,QAAQ,CAACN,IAAO,CAAA,EAAA;QACpCK,YAAe,GAAA,MAAA;AACjB;AAEA,IAAA,IAAIJ,WAAa,EAAA;AACf,QAAA,qBACEM,GAACC,CAAAA,UAAAA,EAAAA;sBACEL,aAAc,CAAA;AACbM,gBAAAA,EAAAA,EAAIC,OAAQ,CAAA,uBAAA,CAAA;gBACZC,cAAgB,EAAA;AAClB,aAAA;;AAGN;AAEA,IAAA,qBACEC,IAACJ,CAAAA,UAAAA,EAAAA;QAAWK,SAAU,EAAA,YAAA;;YACnBV,aAAc,CAAA;AACbM,gBAAAA,EAAAA,EAAIC,OAAQ,CAAA,CAAC,UAAU,EAAEL,aAAa,CAAC,CAAA;gBACvCM,cAAgBX,EAAAA;AAClB,aAAA,CAAA;AAAG,YAAA,GAAA;AAEFE,YAAAA,UAAAA,IACCC,aAAc,CAAA;AACZM,gBAAAA,EAAAA,EAAIC,OAAQ,CAAA,sBAAA,CAAA;gBACZC,cAAgB,EAAA;AAClB,aAAA;;;AAGR;;;;"}