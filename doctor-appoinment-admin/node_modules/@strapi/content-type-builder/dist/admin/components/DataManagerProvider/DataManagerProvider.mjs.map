{"version":3,"file":"DataManagerProvider.mjs","sources":["../../../../admin/src/components/DataManagerProvider/DataManagerProvider.tsx"],"sourcesContent":["import { memo, useEffect, useMemo, useRef, ReactNode } from 'react';\n\nimport {\n  useGuidedTour,\n  useTracking,\n  useStrapiApp,\n  useNotification,\n  useAppInfo,\n  useFetchClient,\n  useAuth,\n} from '@strapi/admin/strapi-admin';\nimport get from 'lodash/get';\nimport groupBy from 'lodash/groupBy';\nimport set from 'lodash/set';\nimport size from 'lodash/size';\nimport { useIntl } from 'react-intl';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Navigate, useLocation, useMatch } from 'react-router-dom';\n\nimport { DataManagerContext } from '../../contexts/DataManagerContext';\nimport { useFormModalNavigation } from '../../hooks/useFormModalNavigation';\nimport { pluginId } from '../../pluginId';\nimport { getTrad } from '../../utils/getTrad';\nimport { useAutoReloadOverlayBlocker } from '../AutoReloadOverlayBlocker';\nimport { FormModal } from '../FormModal/FormModal';\n\nimport { actions } from './reducer';\nimport { makeSelectDataManagerProvider } from './selectors';\nimport { formatMainDataType, getComponentsToPost, sortContentType } from './utils/cleanData';\nimport { createDataObject } from './utils/createDataObject';\nimport { createModifiedDataSchema } from './utils/createModifiedDataSchema';\nimport { formatSchemas } from './utils/formatSchemas';\nimport { retrieveComponentsFromSchema } from './utils/retrieveComponentsFromSchema';\nimport { retrieveComponentsThatHaveComponents } from './utils/retrieveComponentsThatHaveComponents';\nimport { retrieveNestedComponents } from './utils/retrieveNestedComponents';\nimport { retrieveSpecificInfoFromComponents } from './utils/retrieveSpecificInfoFromComponents';\nimport { serverRestartWatcher } from './utils/serverRestartWatcher';\nimport { validateSchema } from './utils/validateSchema';\n\nimport type { ContentType, SchemaType, Components } from '../../types';\nimport type { Internal } from '@strapi/types';\n\ninterface DataManagerProviderProps {\n  children: ReactNode;\n}\n\ninterface CustomFieldAttributeParams {\n  attributeToSet: Record<string, any>;\n  forTarget: SchemaType;\n  targetUid: Internal.UID.Schema;\n  initialAttribute: Record<string, any>;\n}\n\nconst DataManagerProvider = ({ children }: DataManagerProviderProps) => {\n  const dispatch = useDispatch();\n  // refactor\n  const { components, contentTypes, isLoading, initialData, modifiedData, reservedNames } =\n    useSelector(makeSelectDataManagerProvider());\n  const { toggleNotification } = useNotification();\n  const { lockAppWithAutoreload, unlockAppWithAutoreload } = useAutoReloadOverlayBlocker();\n  const { setCurrentStep, setStepState } = useGuidedTour('DataManagerProvider', (state) => state);\n\n  const getPlugin = useStrapiApp('DataManagerProvider', (state) => state.getPlugin);\n\n  const plugin = getPlugin(pluginId);\n  const autoReload = useAppInfo('DataManagerProvider', (state) => state.autoReload);\n  const { formatMessage } = useIntl();\n  const { trackUsage } = useTracking();\n  const refetchPermissions = useAuth('DataManagerProvider', (state) => state.refetchPermissions);\n  const { pathname } = useLocation();\n  const { onCloseModal } = useFormModalNavigation();\n  const contentTypeMatch = useMatch(`/plugins/${pluginId}/content-types/:uid`);\n  const componentMatch = useMatch(\n    `/plugins/${pluginId}/component-categories/:categoryUid/:componentUid`\n  );\n\n  const fetchClient = useFetchClient();\n  const { put, post, del } = fetchClient;\n\n  const isInDevelopmentMode = autoReload;\n\n  const isInContentTypeView = contentTypeMatch !== null;\n  const firstKeyToMainSchema = isInContentTypeView ? 'contentType' : 'component';\n  const currentUid = isInContentTypeView\n    ? get(contentTypeMatch, 'params.uid', null)\n    : get(componentMatch, 'params.componentUid', null);\n\n  const getDataRef = useRef<any>();\n  const endPoint = isInContentTypeView ? 'content-types' : 'components';\n\n  getDataRef.current = async () => {\n    try {\n      const [componentsResponse, contentTypesResponse, reservedNamesResponse] = await Promise.all([\n        fetchClient.get(`/content-type-builder/components`),\n        fetchClient.get(`/content-type-builder/content-types`),\n        fetchClient.get(`/content-type-builder/reserved-names`),\n      ]);\n\n      const components = createDataObject(componentsResponse.data.data);\n      const formattedComponents = formatSchemas(components);\n      const contentTypes = createDataObject(contentTypesResponse.data.data);\n      const formattedContentTypes = formatSchemas(contentTypes);\n\n      dispatch(\n        actions.init({\n          components: formattedComponents,\n          contentTypes: formattedContentTypes,\n          reservedNames: reservedNamesResponse.data,\n        })\n      );\n    } catch (err) {\n      console.error({ err });\n      toggleNotification({\n        type: 'danger',\n        message: formatMessage({ id: 'notification.error', defaultMessage: 'An error occurred' }),\n      });\n    }\n  };\n\n  useEffect(() => {\n    getDataRef.current();\n\n    return () => {\n      // Reload the plugin so the cycle is new again\n      dispatch(actions.reloadPlugin());\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    // We need to set the modifiedData after the data has been retrieved\n    // and also on pathname change\n    if (!isLoading && currentUid) {\n      setModifiedData();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isLoading, pathname, currentUid]);\n\n  useEffect(() => {\n    if (!autoReload) {\n      toggleNotification({\n        type: 'info',\n        message: formatMessage({ id: getTrad('notification.info.autoreaload-disable') }),\n      });\n    }\n  }, [autoReload, toggleNotification, formatMessage]);\n\n  const addAttribute = (\n    attributeToSet: Record<string, any>,\n    forTarget: SchemaType,\n    targetUid: Internal.UID.Schema,\n    isEditing = false,\n    initialAttribute?: Record<string, any>,\n    shouldAddComponentToData = false\n  ) => {\n    if (isEditing) {\n      const payload = {\n        attributeToSet,\n        forTarget,\n        targetUid,\n        // NOTE: using ! here to avoid changing the code logic before bigger refactorings\n        initialAttribute: initialAttribute!,\n        shouldAddComponentToData,\n      };\n\n      dispatch(actions.editAttribute(payload));\n    } else {\n      const payload = {\n        attributeToSet,\n        forTarget,\n        targetUid,\n        shouldAddComponentToData,\n      };\n\n      dispatch(actions.addAttribute(payload));\n    }\n  };\n\n  const addCustomFieldAttribute = ({\n    attributeToSet,\n    forTarget,\n    targetUid,\n  }: CustomFieldAttributeParams) => {\n    dispatch(actions.addCustomFieldAttribute({ attributeToSet, forTarget, targetUid }));\n  };\n\n  const editCustomFieldAttribute = ({\n    attributeToSet,\n    forTarget,\n    targetUid,\n    initialAttribute,\n  }: CustomFieldAttributeParams) => {\n    dispatch(\n      actions.editCustomFieldAttribute({\n        attributeToSet,\n        forTarget,\n        targetUid,\n        initialAttribute,\n      })\n    );\n  };\n\n  const addCreatedComponentToDynamicZone = (\n    dynamicZoneTarget: string,\n    componentsToAdd: Internal.UID.Component[]\n  ) => {\n    dispatch(actions.addCreatedComponentToDynamicZone({ dynamicZoneTarget, componentsToAdd }));\n  };\n\n  const createSchema = (\n    data: Record<string, any>,\n    schemaType: SchemaType,\n    uid: Internal.UID.Schema,\n    componentCategory?: string,\n    shouldAddComponentToData = false\n  ) => {\n    if (schemaType === 'contentType') {\n      const payload = {\n        data,\n        uid,\n      };\n\n      dispatch(actions.createSchema(payload));\n    } else {\n      const payload = {\n        data,\n        uid,\n        componentCategory: componentCategory!,\n        shouldAddComponentToData,\n      };\n\n      dispatch(actions.createComponentSchema(payload));\n    }\n  };\n\n  const changeDynamicZoneComponents = (\n    dynamicZoneTarget: string,\n    newComponents: Internal.UID.Component[]\n  ) => {\n    dispatch(actions.changeDynamicZoneComponents({ dynamicZoneTarget, newComponents }));\n  };\n\n  const removeAttribute = (\n    mainDataKey: 'components' | 'contentType' | 'component' | 'contentTypes',\n    attributeToRemoveName: string,\n    componentUid = ''\n  ) => {\n    if (mainDataKey === 'components') {\n      dispatch(\n        actions.removeFieldFromDisplayedComponent({\n          attributeToRemoveName,\n          componentUid,\n        })\n      );\n    } else {\n      if (mainDataKey === 'contentType') {\n        trackUsage('willDeleteFieldOfContentType');\n      }\n\n      dispatch(\n        actions.removeField({\n          mainDataKey,\n          attributeToRemoveName,\n        })\n      );\n    }\n  };\n\n  const deleteCategory = async (categoryUid: string) => {\n    try {\n      const requestURL = `/${pluginId}/component-categories/${categoryUid}`;\n      // eslint-disable-next-line no-alert\n      const userConfirm = window.confirm(\n        formatMessage({\n          id: getTrad('popUpWarning.bodyMessage.category.delete'),\n        })\n      );\n      // Close the modal\n      onCloseModal();\n\n      if (userConfirm) {\n        lockAppWithAutoreload?.();\n\n        await del(requestURL);\n\n        // Make sure the server has restarted\n        await serverRestartWatcher(true);\n\n        // Unlock the app\n        unlockAppWithAutoreload?.();\n\n        await updatePermissions();\n      }\n    } catch (err) {\n      console.error({ err });\n      toggleNotification({\n        type: 'danger',\n        message: formatMessage({ id: 'notification.error', defaultMessage: 'An error occurred' }),\n      });\n    } finally {\n      unlockAppWithAutoreload?.();\n    }\n  };\n\n  const deleteData = async () => {\n    try {\n      const requestURL = `/${pluginId}/${endPoint}/${currentUid}`;\n      const isTemporary = get(modifiedData, [firstKeyToMainSchema, 'isTemporary'], false);\n\n      // eslint-disable-next-line no-alert\n      const userConfirm = window.confirm(\n        formatMessage({\n          id: getTrad(\n            `popUpWarning.bodyMessage.${isInContentTypeView ? 'contentType' : 'component'}.delete`\n          ),\n        })\n      );\n\n      // Close the modal\n      onCloseModal();\n\n      if (userConfirm) {\n        if (isTemporary) {\n          // Delete the not saved type\n          // Here we just need to reset the components to the initial ones and also the content types\n          // Doing so will trigging a url change since the type doesn't exist in either the contentTypes or the components\n          // so the modified and the initial data will also be reset in the useEffect...\n          dispatch(actions.deleteNotSavedType());\n\n          return;\n        }\n\n        lockAppWithAutoreload?.();\n\n        await del(requestURL);\n\n        // Make sure the server has restarted\n        await serverRestartWatcher(true);\n\n        // Unlock the app\n        await unlockAppWithAutoreload?.();\n\n        await getDataRef.current();\n        // Refetch the permissions\n        await updatePermissions();\n      }\n    } catch (err) {\n      console.error({ err });\n      toggleNotification({\n        type: 'danger',\n        message: formatMessage({ id: 'notification.error', defaultMessage: 'An error occurred' }),\n      });\n    } finally {\n      unlockAppWithAutoreload?.();\n    }\n  };\n\n  const editCategory = async (categoryUid: string, body: any) => {\n    try {\n      const requestURL = `/${pluginId}/component-categories/${categoryUid}`;\n\n      // Close the modal\n      onCloseModal();\n\n      // Lock the app\n      lockAppWithAutoreload?.();\n\n      // Update the category\n      await put(requestURL, body);\n\n      // Make sure the server has restarted\n      await serverRestartWatcher(true);\n\n      // Unlock the app\n      await unlockAppWithAutoreload?.();\n\n      await updatePermissions();\n    } catch (err) {\n      console.error({ err });\n      toggleNotification({\n        type: 'danger',\n        message: formatMessage({ id: 'notification.error', defaultMessage: 'An error occurred' }),\n      });\n    } finally {\n      unlockAppWithAutoreload?.();\n    }\n  };\n\n  const getAllComponentsThatHaveAComponentInTheirAttributes = () => {\n    // We need to create an object with all the non modified compos\n    // plus the ones that are created on the fly\n    const allCompos = Object.assign({}, components, modifiedData.components);\n\n    // Since we apply the modification of a specific component only in the modified data\n    // we need to update all compos with the modifications\n    if (!isInContentTypeView) {\n      const currentEditedCompo = get(modifiedData, 'component', {});\n\n      set(allCompos, get(currentEditedCompo, ['uid'], ''), currentEditedCompo);\n    }\n\n    const composWithCompos = retrieveComponentsThatHaveComponents(allCompos);\n\n    return composWithCompos;\n  };\n\n  const getAllNestedComponents = () => {\n    const appNestedCompo = retrieveNestedComponents(components);\n\n    return appNestedCompo;\n  };\n\n  const removeComponentFromDynamicZone = (dzName: string, componentToRemoveIndex: number) => {\n    dispatch(\n      actions.removeComponentFromDynamicZone({\n        dzName,\n        componentToRemoveIndex,\n      })\n    );\n  };\n\n  const setModifiedData = () => {\n    const currentSchemas = isInContentTypeView ? contentTypes : components;\n    const schemaToSet = get(currentSchemas, currentUid ?? '', {\n      schema: { attributes: [] },\n    });\n\n    const retrievedComponents = retrieveComponentsFromSchema(\n      schemaToSet.schema.attributes,\n      components\n    );\n\n    const newSchemaToSet = createModifiedDataSchema(\n      schemaToSet,\n      retrievedComponents,\n      components,\n      isInContentTypeView\n    );\n\n    const hasJustCreatedSchema =\n      get(schemaToSet, 'isTemporary', false) &&\n      size(get(schemaToSet, 'schema.attributes', [])) === 0;\n\n    dispatch(\n      actions.setModifiedData({\n        schemaToSet: newSchemaToSet,\n        hasJustCreatedSchema,\n      })\n    );\n  };\n\n  const shouldRedirect = useMemo(() => {\n    const dataSet = isInContentTypeView ? contentTypes : components;\n    if (currentUid === 'create-content-type') {\n      return false;\n    }\n\n    return !Object.keys(dataSet).includes(currentUid || '') && !isLoading;\n  }, [components, contentTypes, currentUid, isInContentTypeView, isLoading]);\n\n  const redirectEndpoint = useMemo(() => {\n    const allowedEndpoints = Object.keys(contentTypes)\n      .filter((uid) => get(contentTypes, [uid, 'schema', 'visible'], true))\n      .sort();\n\n    return get(allowedEndpoints, '0', 'create-content-type');\n  }, [contentTypes]);\n\n  if (shouldRedirect) {\n    return <Navigate to={`/plugins/${pluginId}/content-types/${redirectEndpoint}`} />;\n  }\n\n  const submitData = async (additionalContentTypeData?: Record<string, any>) => {\n    try {\n      const isCreating = get(modifiedData, [firstKeyToMainSchema, 'isTemporary'], false);\n\n      const body: {\n        components: any[];\n        contentType?: Record<string, any>;\n        component?: any;\n      } = {\n        components: getComponentsToPost(\n          modifiedData.components as Components,\n          components as Components,\n          currentUid as Internal.UID.Schema\n        ),\n      };\n\n      if (isInContentTypeView) {\n        const PluginForms = plugin?.apis?.forms as any;\n        const contentType = PluginForms.mutateContentTypeSchema(\n          {\n            ...formatMainDataType(modifiedData.contentType),\n            ...additionalContentTypeData,\n          },\n          initialData.contentType\n        ) as ContentType;\n\n        const isValidSchema = validateSchema(contentType);\n\n        if (!isValidSchema) {\n          toggleNotification({\n            type: 'danger',\n            message: formatMessage({\n              id: getTrad('notification.error.dynamiczone-min.validation'),\n              defaultMessage:\n                'At least one component is required in a dynamic zone to be able to save a content type',\n            }),\n          });\n\n          return;\n        }\n\n        body.contentType = contentType;\n\n        trackUsage('willSaveContentType');\n      } else {\n        body.component = formatMainDataType(modifiedData.component, true);\n\n        trackUsage('willSaveComponent');\n      }\n\n      // Lock the app\n      lockAppWithAutoreload?.();\n\n      const baseURL = `/${pluginId}/${endPoint}`;\n      const requestURL = isCreating ? baseURL : `${baseURL}/${currentUid}`;\n\n      if (isCreating) {\n        await post(requestURL, body);\n      } else {\n        await put(requestURL, body);\n      }\n\n      if (\n        isCreating &&\n        (initialData.contentType?.schema.kind === 'collectionType' ||\n          initialData.contentType?.schema.kind === 'singleType')\n      ) {\n        setStepState('contentTypeBuilder.success', true);\n        trackUsage('didCreateGuidedTourCollectionType');\n        setCurrentStep(null);\n      }\n\n      // Submit ct tracking success\n      if (isInContentTypeView) {\n        trackUsage('didSaveContentType');\n\n        const oldName = get(body, ['contentType', 'schema', 'name'], '');\n        const newName = get(initialData, ['contentType', 'schema', 'name'], '');\n\n        if (!isCreating && oldName !== newName) {\n          trackUsage('didEditNameOfContentType');\n        }\n      } else {\n        trackUsage('didSaveComponent');\n      }\n\n      // Make sure the server has restarted\n      await serverRestartWatcher(true);\n\n      // Unlock the app\n      unlockAppWithAutoreload?.();\n\n      // refetch and update initial state after the data has been saved\n      await getDataRef.current();\n\n      // Update the app's permissions\n      await updatePermissions();\n    } catch (err: any) {\n      if (!isInContentTypeView) {\n        trackUsage('didNotSaveComponent');\n      }\n\n      console.error({ err: err.response });\n      toggleNotification({\n        type: 'danger',\n        message: formatMessage({ id: 'notification.error', defaultMessage: 'An error occurred' }),\n      });\n    } finally {\n      unlockAppWithAutoreload?.();\n    }\n  };\n\n  const updatePermissions = async () => {\n    await refetchPermissions();\n  };\n\n  const updateSchema = (\n    data: Record<string, any>,\n    schemaType: 'contentType' | 'component',\n    componentUID: Internal.UID.Schema\n  ) => {\n    dispatch(\n      actions.updateSchema({\n        data,\n        schemaType,\n        uid: componentUID,\n      })\n    );\n  };\n\n  return (\n    <DataManagerContext.Provider\n      value={{\n        addAttribute,\n        addCustomFieldAttribute,\n        addCreatedComponentToDynamicZone,\n        allComponentsCategories: retrieveSpecificInfoFromComponents(components, ['category']),\n        changeDynamicZoneComponents,\n        components,\n        componentsGroupedByCategory: groupBy(components, 'category') as Record<string, any[]>,\n        componentsThatHaveOtherComponentInTheirAttributes:\n          getAllComponentsThatHaveAComponentInTheirAttributes(),\n        contentTypes,\n        createSchema,\n        deleteCategory,\n        deleteData,\n        editCategory,\n        editCustomFieldAttribute,\n        isInDevelopmentMode,\n        initialData,\n        isInContentTypeView,\n        modifiedData,\n        nestedComponents: getAllNestedComponents(),\n        removeAttribute,\n        removeComponentFromDynamicZone,\n        reservedNames,\n        setModifiedData,\n        sortedContentTypesList: sortContentType(contentTypes),\n        submitData,\n        updateSchema,\n      }}\n    >\n      {children}\n      {isInDevelopmentMode && <FormModal />}\n    </DataManagerContext.Provider>\n  );\n};\n\n// eslint-disable-next-line import/no-default-export\nexport default memo(DataManagerProvider);\n"],"names":["DataManagerProvider","children","dispatch","useDispatch","components","contentTypes","isLoading","initialData","modifiedData","reservedNames","useSelector","makeSelectDataManagerProvider","toggleNotification","useNotification","lockAppWithAutoreload","unlockAppWithAutoreload","useAutoReloadOverlayBlocker","setCurrentStep","setStepState","useGuidedTour","state","getPlugin","useStrapiApp","plugin","pluginId","autoReload","useAppInfo","formatMessage","useIntl","trackUsage","useTracking","refetchPermissions","useAuth","pathname","useLocation","onCloseModal","useFormModalNavigation","contentTypeMatch","useMatch","componentMatch","fetchClient","useFetchClient","put","post","del","isInDevelopmentMode","isInContentTypeView","firstKeyToMainSchema","currentUid","get","getDataRef","useRef","endPoint","current","componentsResponse","contentTypesResponse","reservedNamesResponse","Promise","all","createDataObject","data","formattedComponents","formatSchemas","formattedContentTypes","actions","init","err","console","error","type","message","id","defaultMessage","useEffect","reloadPlugin","setModifiedData","getTrad","addAttribute","attributeToSet","forTarget","targetUid","isEditing","initialAttribute","shouldAddComponentToData","payload","editAttribute","addCustomFieldAttribute","editCustomFieldAttribute","addCreatedComponentToDynamicZone","dynamicZoneTarget","componentsToAdd","createSchema","schemaType","uid","componentCategory","createComponentSchema","changeDynamicZoneComponents","newComponents","removeAttribute","mainDataKey","attributeToRemoveName","componentUid","removeFieldFromDisplayedComponent","removeField","deleteCategory","categoryUid","requestURL","userConfirm","window","confirm","serverRestartWatcher","updatePermissions","deleteData","isTemporary","deleteNotSavedType","editCategory","body","getAllComponentsThatHaveAComponentInTheirAttributes","allCompos","Object","assign","currentEditedCompo","set","composWithCompos","retrieveComponentsThatHaveComponents","getAllNestedComponents","appNestedCompo","retrieveNestedComponents","removeComponentFromDynamicZone","dzName","componentToRemoveIndex","currentSchemas","schemaToSet","schema","attributes","retrievedComponents","retrieveComponentsFromSchema","newSchemaToSet","createModifiedDataSchema","hasJustCreatedSchema","size","shouldRedirect","useMemo","dataSet","keys","includes","redirectEndpoint","allowedEndpoints","filter","sort","_jsx","Navigate","to","submitData","additionalContentTypeData","isCreating","getComponentsToPost","PluginForms","apis","forms","contentType","mutateContentTypeSchema","formatMainDataType","isValidSchema","validateSchema","component","baseURL","kind","oldName","newName","response","updateSchema","componentUID","_jsxs","DataManagerContext","Provider","value","allComponentsCategories","retrieveSpecificInfoFromComponents","componentsGroupedByCategory","groupBy","componentsThatHaveOtherComponentInTheirAttributes","nestedComponents","sortedContentTypesList","sortContentType","FormModal","memo"],"mappings":"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"}