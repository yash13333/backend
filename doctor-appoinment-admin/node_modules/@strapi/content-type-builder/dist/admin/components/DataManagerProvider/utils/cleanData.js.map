{"version":3,"file":"cleanData.js","sources":["../../../../../admin/src/components/DataManagerProvider/utils/cleanData.ts"],"sourcesContent":["import camelCase from 'lodash/camelCase';\nimport get from 'lodash/get';\nimport isEqual from 'lodash/isEqual';\nimport omit from 'lodash/omit';\nimport sortBy from 'lodash/sortBy';\n\nimport { pluginId } from '../../../pluginId';\nimport { makeUnique } from '../../../utils/makeUnique';\n\nimport type { Components, Component, AttributeType, ContentTypes } from '../../../types';\nimport type { Internal } from '@strapi/types';\n\nconst getCreatedAndModifiedComponents = (\n  allComponents: Components,\n  initialComponents: Components\n) => {\n  const componentUIDsToReturn = Object.keys(allComponents).filter((compoUid) => {\n    const currentCompo = get(allComponents, compoUid, {});\n    const initialCompo = get(initialComponents, compoUid, {});\n    const hasComponentBeenCreated = get(currentCompo, ['isTemporary'], false);\n    const hasComponentBeenModified = !isEqual(currentCompo, initialCompo);\n\n    return hasComponentBeenCreated || hasComponentBeenModified;\n  });\n\n  return makeUnique(componentUIDsToReturn);\n};\n\nconst formatComponent = (\n  component: Component | Record<string, any>,\n  mainDataUID: Internal.UID.Schema\n) => {\n  const formattedAttributes = formatAttributes(\n    get(component, 'schema.attributes', []),\n    mainDataUID\n  );\n\n  // Set tmpUID if the component has just been created\n  // Keep the uid if the component already exists\n  const compoUID = get(component, 'isTemporary', false)\n    ? { tmpUID: component.uid }\n    : { uid: component.uid };\n\n  const formattedComponent = Object.assign(\n    {},\n    compoUID,\n    { category: component.category },\n    // Omit the attributes since we want to format them\n    omit(component.schema, 'attributes'),\n    // Add the formatted attributes\n    { attributes: formattedAttributes }\n  );\n\n  return formattedComponent;\n};\n\nconst formatMainDataType = (data: any, isComponent = false) => {\n  const mainDataUID = get(data, 'uid', null);\n\n  const formattedAttributes = formatAttributes(get(data, 'schema.attributes', []), mainDataUID);\n  const initObj = isComponent ? { category: get(data, 'category', '') } : {};\n\n  const formattedContentType = Object.assign(initObj, omit(data.schema, 'attributes'), {\n    attributes: formattedAttributes,\n  });\n\n  delete formattedContentType.uid;\n  delete formattedContentType.isTemporary;\n  delete formattedContentType.visible;\n  delete formattedContentType.restrictRelationsTo;\n\n  return formattedContentType;\n};\n\n/**\n *\n * @param {Object} attributes\n * @param {String} mainDataUID uid of the main data type\n */\nconst formatAttributes = (attributes: AttributeType[], mainDataUID: Internal.UID.Schema) => {\n  return attributes.reduce((acc: Record<string, AttributeType>, { name, ...rest }) => {\n    const currentAttribute = rest;\n    const hasARelationWithMainDataUID = currentAttribute.target === mainDataUID;\n    const isRelationType = currentAttribute.type === 'relation';\n    const currentTargetAttribute = get(currentAttribute, 'targetAttribute', null);\n\n    if (!hasARelationWithMainDataUID) {\n      if (isRelationType) {\n        const relationAttr = Object.assign({}, currentAttribute, {\n          targetAttribute: formatRelationTargetAttribute(currentTargetAttribute),\n        });\n\n        acc[name as string] = removeNullKeys(relationAttr) as AttributeType;\n      } else {\n        acc[name as string] = removeNullKeys(currentAttribute) as AttributeType;\n      }\n    }\n\n    if (hasARelationWithMainDataUID) {\n      const target = currentAttribute.target;\n\n      const formattedRelationAttribute = Object.assign({}, currentAttribute, {\n        target,\n        targetAttribute: formatRelationTargetAttribute(currentTargetAttribute),\n      });\n\n      acc[name as string] = removeNullKeys(formattedRelationAttribute) as AttributeType;\n    }\n\n    if (currentAttribute.customField) {\n      const customFieldAttribute = { ...currentAttribute, type: 'customField' };\n      acc[name as string] = removeNullKeys(customFieldAttribute) as AttributeType;\n    }\n\n    return acc;\n  }, {});\n};\n\nconst formatRelationTargetAttribute = (targetAttribute: string | null) =>\n  targetAttribute === '-' ? null : targetAttribute;\n\nconst removeNullKeys = (obj: Record<string, any>) =>\n  Object.keys(obj).reduce((acc: Record<string, any>, current) => {\n    if (obj[current] !== null && current !== 'plugin') {\n      acc[current] = obj[current];\n    }\n\n    return acc;\n  }, {});\n\nconst getComponentsToPost = (\n  allComponents: Components,\n  initialComponents: Components,\n  mainDataUID: Internal.UID.Schema\n) => {\n  const componentsToFormat = getCreatedAndModifiedComponents(allComponents, initialComponents);\n  const formattedComponents = componentsToFormat.map((compoUID) => {\n    const currentCompo = get(allComponents, compoUID, {});\n    const formattedComponent = formatComponent(currentCompo, mainDataUID);\n\n    return formattedComponent;\n  });\n\n  return formattedComponents;\n};\n\nconst sortContentType = (types: ContentTypes) =>\n  sortBy(\n    Object.keys(types)\n      .map((uid) => ({\n        visible: types[uid].schema.visible,\n        name: uid,\n        title: types[uid].schema.displayName,\n        plugin: types[uid].plugin || null,\n        uid,\n        to: `/plugins/${pluginId}/content-types/${uid}`,\n        kind: types[uid].schema.kind,\n        restrictRelationsTo: types[uid].schema.restrictRelationsTo,\n      }))\n      .filter((obj) => obj !== null),\n    (obj) => camelCase(obj.title)\n  );\n\nexport {\n  formatComponent,\n  formatMainDataType,\n  getComponentsToPost,\n  getCreatedAndModifiedComponents,\n  sortContentType,\n};\n"],"names":["getCreatedAndModifiedComponents","allComponents","initialComponents","componentUIDsToReturn","Object","keys","filter","compoUid","currentCompo","get","initialCompo","hasComponentBeenCreated","hasComponentBeenModified","isEqual","makeUnique","formatComponent","component","mainDataUID","formattedAttributes","formatAttributes","compoUID","tmpUID","uid","formattedComponent","assign","category","omit","schema","attributes","formatMainDataType","data","isComponent","initObj","formattedContentType","isTemporary","visible","restrictRelationsTo","reduce","acc","name","rest","currentAttribute","hasARelationWithMainDataUID","target","isRelationType","type","currentTargetAttribute","relationAttr","targetAttribute","formatRelationTargetAttribute","removeNullKeys","formattedRelationAttribute","customField","customFieldAttribute","obj","current","getComponentsToPost","componentsToFormat","formattedComponents","map","sortContentType","types","sortBy","title","displayName","plugin","to","pluginId","kind","camelCase"],"mappings":"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"}