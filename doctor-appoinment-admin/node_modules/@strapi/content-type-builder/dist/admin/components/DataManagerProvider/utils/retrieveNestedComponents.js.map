{"version":3,"file":"retrieveNestedComponents.js","sources":["../../../../../admin/src/components/DataManagerProvider/utils/retrieveNestedComponents.ts"],"sourcesContent":["import type { Components, AttributeType } from '../../../types';\nimport type { Internal } from '@strapi/types';\n\nexport type NestedComponent = {\n  component: Internal.UID.Component;\n  uidsOfAllParents?: Internal.UID.Component[];\n  parentCompoUid?: Internal.UID.Component;\n};\n\nexport const retrieveNestedComponents = (appComponents: Components): NestedComponent[] => {\n  const nestedComponents = Object.keys(appComponents).reduce((acc: NestedComponent[], current) => {\n    const componentAttributes = appComponents?.[current]?.schema?.attributes ?? [];\n    const currentComponentNestedCompos = getComponentsNestedWithinComponent(\n      componentAttributes,\n      current as Internal.UID.Component\n    );\n    return [...acc, ...currentComponentNestedCompos];\n  }, []);\n\n  return mergeComponents(nestedComponents);\n};\n\nconst getComponentsNestedWithinComponent = (\n  componentAttributes: AttributeType[],\n  parentCompoUid: Internal.UID.Component\n) => {\n  return componentAttributes.reduce((acc: NestedComponent[], current) => {\n    const { type, component } = current;\n    if (type === 'component') {\n      acc.push({\n        component,\n        parentCompoUid,\n      });\n    }\n\n    return acc;\n  }, []);\n};\n\n// Merge duplicate components\nconst mergeComponents = (originalComponents: NestedComponent[]): NestedComponent[] => {\n  const componentMap = new Map();\n  // Populate the map with component and its parents\n  originalComponents.forEach(({ component, parentCompoUid }) => {\n    if (!componentMap.has(component)) {\n      componentMap.set(component, new Set());\n    }\n    componentMap.get(component).add(parentCompoUid);\n  });\n\n  // Convert the map to the desired array format\n  const transformedComponents: NestedComponent[] = Array.from(componentMap.entries()).map(\n    ([component, parentCompoUidSet]) => ({\n      component,\n      uidsOfAllParents: Array.from(parentCompoUidSet),\n    })\n  );\n\n  return transformedComponents;\n};\n"],"names":["retrieveNestedComponents","appComponents","nestedComponents","Object","keys","reduce","acc","current","componentAttributes","schema","attributes","currentComponentNestedCompos","getComponentsNestedWithinComponent","mergeComponents","parentCompoUid","type","component","push","originalComponents","componentMap","Map","forEach","has","set","Set","get","add","transformedComponents","Array","from","entries","map","parentCompoUidSet","uidsOfAllParents"],"mappings":";;AASO,MAAMA,2BAA2B,CAACC,aAAAA,GAAAA;IACvC,MAAMC,gBAAAA,GAAmBC,OAAOC,IAAI,CAACH,eAAeI,MAAM,CAAC,CAACC,GAAwBC,EAAAA,OAAAA,GAAAA;AAClF,QAAA,MAAMC,sBAAsBP,aAAe,GAACM,QAAQ,EAAEE,MAAAA,EAAQC,cAAc,EAAE;QAC9E,MAAMC,4BAAAA,GAA+BC,mCACnCJ,mBACAD,EAAAA,OAAAA,CAAAA;QAEF,OAAO;AAAID,YAAAA,GAAAA,GAAAA;AAAQK,YAAAA,GAAAA;AAA6B,SAAA;AAClD,KAAA,EAAG,EAAE,CAAA;AAEL,IAAA,OAAOE,eAAgBX,CAAAA,gBAAAA,CAAAA;AACzB;AAEA,MAAMU,kCAAAA,GAAqC,CACzCJ,mBACAM,EAAAA,cAAAA,GAAAA;AAEA,IAAA,OAAON,mBAAoBH,CAAAA,MAAM,CAAC,CAACC,GAAwBC,EAAAA,OAAAA,GAAAA;AACzD,QAAA,MAAM,EAAEQ,IAAI,EAAEC,SAAS,EAAE,GAAGT,OAAAA;AAC5B,QAAA,IAAIQ,SAAS,WAAa,EAAA;AACxBT,YAAAA,GAAAA,CAAIW,IAAI,CAAC;AACPD,gBAAAA,SAAAA;AACAF,gBAAAA;AACF,aAAA,CAAA;AACF;QAEA,OAAOR,GAAAA;AACT,KAAA,EAAG,EAAE,CAAA;AACP,CAAA;AAEA;AACA,MAAMO,kBAAkB,CAACK,kBAAAA,GAAAA;AACvB,IAAA,MAAMC,eAAe,IAAIC,GAAAA,EAAAA;;AAEzBF,IAAAA,kBAAAA,CAAmBG,OAAO,CAAC,CAAC,EAAEL,SAAS,EAAEF,cAAc,EAAE,GAAA;AACvD,QAAA,IAAI,CAACK,YAAAA,CAAaG,GAAG,CAACN,SAAY,CAAA,EAAA;YAChCG,YAAaI,CAAAA,GAAG,CAACP,SAAAA,EAAW,IAAIQ,GAAAA,EAAAA,CAAAA;AAClC;AACAL,QAAAA,YAAAA,CAAaM,GAAG,CAACT,SAAWU,CAAAA,CAAAA,GAAG,CAACZ,cAAAA,CAAAA;AAClC,KAAA,CAAA;;AAGA,IAAA,MAAMa,qBAA2CC,GAAAA,KAAAA,CAAMC,IAAI,CAACV,aAAaW,OAAO,EAAA,CAAA,CAAIC,GAAG,CACrF,CAAC,CAACf,SAAWgB,EAAAA,iBAAAA,CAAkB,IAAM;AACnChB,YAAAA,SAAAA;YACAiB,gBAAkBL,EAAAA,KAAAA,CAAMC,IAAI,CAACG,iBAAAA;SAC/B,CAAA,CAAA;IAGF,OAAOL,qBAAAA;AACT,CAAA;;;;"}