{"version":3,"file":"ContentTypeBuilderNav.mjs","sources":["../../../../admin/src/components/ContentTypeBuilderNav/ContentTypeBuilderNav.tsx"],"sourcesContent":["import { Fragment } from 'react';\n\nimport {\n  Box,\n  TextButton,\n  SubNav,\n  SubNavHeader,\n  SubNavLink,\n  SubNavLinkSection,\n  SubNavSection,\n  SubNavSections,\n} from '@strapi/design-system';\nimport { Plus } from '@strapi/icons';\nimport upperFirst from 'lodash/upperFirst';\nimport { useIntl } from 'react-intl';\nimport { NavLink } from 'react-router-dom';\nimport { styled } from 'styled-components';\n\nimport { getTrad } from '../../utils/getTrad';\n\nimport { useContentTypeBuilderMenu } from './useContentTypeBuilderMenu';\n\nconst SubNavLinkCustom = styled(SubNavLink)`\n  div {\n    width: inherit;\n    span:nth-child(2) {\n      white-space: nowrap;\n      overflow: hidden;\n      text-overflow: ellipsis;\n      width: inherit;\n    }\n  }\n`;\n\nexport const ContentTypeBuilderNav = () => {\n  const { menu, search } = useContentTypeBuilderMenu();\n  const { formatMessage } = useIntl();\n\n  const pluginName = formatMessage({\n    id: getTrad('plugin.name'),\n    defaultMessage: 'Content-Type Builder',\n  });\n\n  return (\n    <SubNav aria-label={pluginName}>\n      <SubNavHeader\n        searchable\n        value={search.value}\n        onClear={() => search.clear()}\n        onChange={(e) => search.onChange(e.target.value)}\n        label={pluginName}\n        searchLabel={formatMessage({\n          id: 'global.search',\n          defaultMessage: 'Search',\n        })}\n      />\n      <SubNavSections>\n        {menu.map((section) => (\n          <Fragment key={section.name}>\n            <SubNavSection\n              label={formatMessage({\n                id: section.title.id,\n                defaultMessage: section.title.defaultMessage,\n              })}\n              collapsable\n              badgeLabel={section.linksCount.toString()}\n            >\n              {section.links.map((link) => {\n                if (link.links) {\n                  return (\n                    <SubNavLinkSection key={link.name} label={upperFirst(link.title)}>\n                      {link.links.map((subLink: any) => (\n                        <SubNavLink\n                          tag={NavLink}\n                          to={subLink.to}\n                          active={subLink.active}\n                          key={subLink.name}\n                          isSubSectionChild\n                        >\n                          {upperFirst(\n                            formatMessage({ id: subLink.name, defaultMessage: subLink.title })\n                          )}\n                        </SubNavLink>\n                      ))}\n                    </SubNavLinkSection>\n                  );\n                }\n\n                return (\n                  <SubNavLinkCustom\n                    tag={NavLink}\n                    to={link.to}\n                    active={link.active}\n                    key={link.name}\n                    width=\"100%\"\n                  >\n                    {upperFirst(formatMessage({ id: link.name, defaultMessage: link.title }))}\n                  </SubNavLinkCustom>\n                );\n              })}\n            </SubNavSection>\n            {section.customLink && (\n              <Box paddingLeft={7}>\n                <TextButton\n                  onClick={section.customLink.onClick}\n                  startIcon={<Plus width=\"0.8rem\" height=\"0.8rem\" />}\n                  marginTop={2}\n                  cursor=\"pointer\"\n                >\n                  {formatMessage({\n                    id: section.customLink.id,\n                    defaultMessage: section.customLink.defaultMessage,\n                  })}\n                </TextButton>\n              </Box>\n            )}\n          </Fragment>\n        ))}\n      </SubNavSections>\n    </SubNav>\n  );\n};\n"],"names":["SubNavLinkCustom","styled","SubNavLink","ContentTypeBuilderNav","menu","search","useContentTypeBuilderMenu","formatMessage","useIntl","pluginName","id","getTrad","defaultMessage","_jsxs","SubNav","aria-label","_jsx","SubNavHeader","searchable","value","onClear","clear","onChange","e","target","label","searchLabel","SubNavSections","map","section","Fragment","SubNavSection","title","collapsable","badgeLabel","linksCount","toString","links","link","SubNavLinkSection","upperFirst","subLink","tag","NavLink","to","active","isSubSectionChild","name","width","customLink","Box","paddingLeft","TextButton","onClick","startIcon","Plus","height","marginTop","cursor"],"mappings":"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"}