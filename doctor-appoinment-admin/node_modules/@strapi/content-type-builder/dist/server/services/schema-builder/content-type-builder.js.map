{"version":3,"file":"content-type-builder.js","sources":["../../../../server/src/services/schema-builder/content-type-builder.ts"],"sourcesContent":["import path from 'path';\nimport _ from 'lodash';\n\nimport { strings, errors } from '@strapi/utils';\nimport type { Schema, Internal } from '@strapi/types';\nimport { isRelation, isConfigurable } from '../../utils/attributes';\nimport { typeKinds } from '../constants';\nimport createSchemaHandler from './schema-handler';\nimport { CreateContentTypeInput } from '../../controllers/validation/content-type';\n\nconst { ApplicationError } = errors;\n\nconst reuseUnsetPreviousProperties = (\n  newAttribute: Schema.Attribute.AnyAttribute,\n  oldAttribute: Schema.Attribute.AnyAttribute\n) => {\n  _.defaults(\n    newAttribute,\n    _.omit(oldAttribute, [\n      'configurable',\n      'required',\n      'private',\n      'unique',\n      'pluginOptions',\n      'inversedBy',\n      'mappedBy',\n    ])\n  );\n};\n\nexport default function createComponentBuilder() {\n  return {\n    setRelation(this: any, { key, uid, attribute }: any) {\n      if (!_.has(attribute, 'target')) {\n        return;\n      }\n\n      const targetCT = this.contentTypes.get(attribute.target);\n      const targetAttribute = targetCT.getAttribute(attribute.targetAttribute);\n\n      if (!attribute.targetAttribute) {\n        return;\n      }\n\n      targetCT.setAttribute(\n        attribute.targetAttribute,\n        generateRelation({ key, attribute, uid, targetAttribute })\n      );\n    },\n\n    unsetRelation(this: any, attribute: any) {\n      if (!_.has(attribute, 'target')) {\n        return;\n      }\n\n      const targetCT = this.contentTypes.get(attribute.target);\n\n      const targetAttributeName = attribute.inversedBy || attribute.mappedBy;\n      const targetAttribute = targetCT.getAttribute(targetAttributeName);\n\n      if (!targetAttribute) return;\n\n      return targetCT.deleteAttribute(targetAttributeName);\n    },\n\n    /**\n     * Creates a content type in memory to be written to files later on\n     */\n    createContentType(this: any, infos: CreateContentTypeInput) {\n      const uid = createContentTypeUID(infos);\n\n      if (this.contentTypes.has(uid)) {\n        throw new ApplicationError('contentType.alreadyExists');\n      }\n\n      const contentType = createSchemaHandler({\n        modelName: infos.singularName,\n        dir: path.join(\n          strapi.dirs.app.api,\n          infos.singularName,\n          'content-types',\n          infos.singularName\n        ),\n        filename: `schema.json`,\n      });\n\n      this.contentTypes.set(uid, contentType);\n\n      // support self referencing content type relation\n      Object.keys(infos.attributes).forEach((key) => {\n        const { target } = infos.attributes[key];\n        if (target === '__self__') {\n          infos.attributes[key].target = uid;\n        }\n      });\n\n      contentType\n        .setUID(uid)\n        .set('kind', infos.kind || typeKinds.COLLECTION_TYPE)\n        .set(\n          'collectionName',\n          infos.collectionName || strings.nameToCollectionName(infos.pluralName)\n        )\n        .set('info', {\n          singularName: infos.singularName,\n          pluralName: infos.pluralName,\n          displayName: infos.displayName,\n          description: infos.description,\n        })\n        .set('options', {\n          ...(infos.options ?? {}),\n          draftAndPublish: infos.draftAndPublish,\n        })\n        .set('pluginOptions', infos.pluginOptions)\n        .set('config', infos.config)\n        .setAttributes(this.convertAttributes(infos.attributes));\n\n      Object.keys(infos.attributes).forEach((key) => {\n        const attribute = infos.attributes[key];\n\n        if (isRelation(attribute)) {\n          if (['manyToMany', 'oneToOne'].includes(attribute.relation)) {\n            if (attribute.target === uid && attribute.targetAttribute !== undefined) {\n              // self referencing relation\n              const targetAttribute = infos.attributes[attribute.targetAttribute];\n\n              if (targetAttribute.dominant === undefined) {\n                attribute.dominant = true;\n              } else {\n                attribute.dominant = false;\n              }\n            } else {\n              attribute.dominant = true;\n            }\n          }\n\n          this.setRelation({\n            key,\n            uid,\n            attribute,\n          });\n        }\n      });\n\n      return contentType;\n    },\n\n    editContentType(this: any, infos: any) {\n      const { uid } = infos;\n\n      if (!this.contentTypes.has(uid)) {\n        throw new ApplicationError('contentType.notFound');\n      }\n\n      const contentType = this.contentTypes.get(uid);\n\n      const oldAttributes = contentType.schema.attributes;\n\n      const newAttributes = _.omitBy(infos.attributes, (attr, key) => {\n        return _.has(oldAttributes, key) && !isConfigurable(oldAttributes[key]);\n      });\n\n      const newKeys = _.difference(Object.keys(newAttributes), Object.keys(oldAttributes));\n      const deletedKeys = _.difference(Object.keys(oldAttributes), Object.keys(newAttributes));\n      const remainingKeys = _.intersection(Object.keys(oldAttributes), Object.keys(newAttributes));\n\n      // remove old relations\n      deletedKeys.forEach((key) => {\n        const attribute = oldAttributes[key];\n\n        const targetAttributeName = attribute.inversedBy || attribute.mappedBy;\n\n        // if the old relation has a target attribute. we need to remove it in the target type\n        if (isConfigurable(attribute) && isRelation(attribute) && !_.isNil(targetAttributeName)) {\n          this.unsetRelation(attribute);\n        }\n      });\n\n      remainingKeys.forEach((key) => {\n        const oldAttribute = oldAttributes[key];\n        const newAttribute = newAttributes[key];\n\n        if (!isRelation(oldAttribute) && isRelation(newAttribute)) {\n          return this.setRelation({\n            key,\n            uid,\n            attribute: newAttributes[key],\n          });\n        }\n\n        if (isRelation(oldAttribute) && !isRelation(newAttribute)) {\n          return this.unsetRelation(oldAttribute);\n        }\n\n        if (isRelation(oldAttribute) && isRelation(newAttribute)) {\n          const oldTargetAttributeName = oldAttribute.inversedBy || oldAttribute.mappedBy;\n\n          const sameRelation = oldAttribute.relation === newAttribute.relation;\n          const targetAttributeHasChanged = oldTargetAttributeName !== newAttribute.targetAttribute;\n\n          if (!sameRelation || targetAttributeHasChanged) {\n            this.unsetRelation(oldAttribute);\n          }\n\n          // keep extra options that were set manually on oldAttribute\n          reuseUnsetPreviousProperties(newAttribute, oldAttribute);\n\n          if (oldAttribute.inversedBy) {\n            newAttribute.dominant = true;\n          } else if (oldAttribute.mappedBy) {\n            newAttribute.dominant = false;\n          }\n\n          return this.setRelation({\n            key,\n            uid,\n            attribute: newAttribute,\n          });\n        }\n      });\n\n      // add new relations\n      newKeys.forEach((key) => {\n        const attribute = newAttributes[key];\n\n        if (isRelation(attribute)) {\n          if (['manyToMany', 'oneToOne'].includes(attribute.relation)) {\n            if (attribute.target === uid && attribute.targetAttribute !== undefined) {\n              // self referencing relation\n              const targetAttribute = newAttributes[attribute.targetAttribute];\n\n              if (targetAttribute.dominant === undefined) {\n                attribute.dominant = true;\n              } else {\n                attribute.dominant = false;\n              }\n            } else {\n              attribute.dominant = true;\n            }\n          }\n\n          this.setRelation({\n            key,\n            uid,\n            attribute,\n          });\n        }\n      });\n\n      contentType\n        .set('kind', infos.kind || contentType.schema.kind)\n        .set(['info', 'displayName'], infos.displayName)\n        .set(['info', 'description'], infos.description)\n        .set('options', {\n          ...(infos.options ?? {}),\n          draftAndPublish: infos.draftAndPublish,\n        })\n        .set('pluginOptions', infos.pluginOptions)\n        .setAttributes(this.convertAttributes(newAttributes));\n\n      return contentType;\n    },\n\n    deleteContentType(this: any, uid: string) {\n      if (!this.contentTypes.has(uid)) {\n        throw new ApplicationError('contentType.notFound');\n      }\n\n      this.components.forEach((compo: any) => {\n        compo.removeContentType(uid);\n      });\n\n      this.contentTypes.forEach((ct: any) => {\n        ct.removeContentType(uid);\n      });\n\n      return this.contentTypes.get(uid).delete();\n    },\n  };\n}\n\n/**\n * Returns a uid from a content type infos\n *\n * @param {object} options options\n * @param {string} options.singularName content-type singularName\n * @returns {string} uid\n */\nconst createContentTypeUID = ({\n  singularName,\n}: {\n  singularName: string;\n}): Internal.UID.ContentType => `api::${singularName}.${singularName}`;\n\nconst generateRelation = ({ key, attribute, uid, targetAttribute = {} }: any) => {\n  const opts: any = {\n    type: 'relation',\n    target: uid,\n    autoPopulate: targetAttribute.autoPopulate,\n    private: targetAttribute.private || undefined,\n    pluginOptions: targetAttribute.pluginOptions || undefined,\n  };\n\n  switch (attribute.relation) {\n    case 'oneToOne': {\n      opts.relation = 'oneToOne';\n\n      if (attribute.dominant) {\n        opts.mappedBy = key;\n      } else {\n        opts.inversedBy = key;\n      }\n      break;\n    }\n    case 'oneToMany': {\n      opts.relation = 'manyToOne';\n      opts.inversedBy = key;\n      break;\n    }\n    case 'manyToOne': {\n      opts.relation = 'oneToMany';\n      opts.mappedBy = key;\n      break;\n    }\n    case 'manyToMany': {\n      opts.relation = 'manyToMany';\n\n      if (attribute.dominant) {\n        opts.mappedBy = key;\n      } else {\n        opts.inversedBy = key;\n      }\n\n      break;\n    }\n    default:\n  }\n\n  // we do this just to make sure we have the same key order when writing to files\n  const { type, relation, target, ...restOptions } = opts;\n\n  return {\n    type,\n    relation,\n    target,\n    ...restOptions,\n  };\n};\n"],"names":["ApplicationError","errors","reuseUnsetPreviousProperties","newAttribute","oldAttribute","_","defaults","omit","createComponentBuilder","setRelation","key","uid","attribute","has","targetCT","contentTypes","get","target","targetAttribute","getAttribute","setAttribute","generateRelation","unsetRelation","targetAttributeName","inversedBy","mappedBy","deleteAttribute","createContentType","infos","createContentTypeUID","contentType","createSchemaHandler","modelName","singularName","dir","path","join","strapi","dirs","app","api","filename","set","Object","keys","attributes","forEach","setUID","kind","typeKinds","COLLECTION_TYPE","collectionName","strings","nameToCollectionName","pluralName","displayName","description","options","draftAndPublish","pluginOptions","config","setAttributes","convertAttributes","isRelation","includes","relation","undefined","dominant","editContentType","oldAttributes","schema","newAttributes","omitBy","attr","isConfigurable","newKeys","difference","deletedKeys","remainingKeys","intersection","isNil","oldTargetAttributeName","sameRelation","targetAttributeHasChanged","deleteContentType","components","compo","removeContentType","ct","delete","opts","type","autoPopulate","private","restOptions"],"mappings":"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"}