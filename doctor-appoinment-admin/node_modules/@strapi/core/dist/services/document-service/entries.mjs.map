{"version":3,"file":"entries.mjs","sources":["../../../src/services/document-service/entries.ts"],"sourcesContent":["import type { UID, Modules } from '@strapi/types';\nimport { async } from '@strapi/utils';\nimport { assoc, omit } from 'lodash/fp';\n\nimport * as components from './components';\n\nimport { transformParamsDocumentId } from './transform/id-transform';\nimport { transformParamsToQuery } from './transform/query';\nimport { pickSelectionParams } from './params';\nimport { applyTransforms } from './attributes';\nimport { transformData } from './transform/data';\n\nconst createEntriesService = (\n  uid: UID.ContentType,\n  entityValidator: Modules.EntityValidator.EntityValidator\n) => {\n  const contentType = strapi.contentType(uid);\n\n  async function createEntry(params = {} as any) {\n    const { data, ...restParams } = await transformParamsDocumentId(uid, params);\n\n    const query = transformParamsToQuery(uid, pickSelectionParams(restParams) as any); // select / populate\n\n    // Validation\n    if (!data) {\n      throw new Error('Create requires data attribute');\n    }\n\n    const validData = await entityValidator.validateEntityCreation(contentType, data, {\n      // Note: publishedAt value will always be set when DP is disabled\n      isDraft: !params?.data?.publishedAt,\n      locale: params?.locale,\n    });\n\n    // Component handling\n    const componentData = await components.createComponents(uid, validData);\n    const dataWithComponents = components.assignComponentData(\n      contentType,\n      componentData,\n      validData\n    );\n\n    const entryData = applyTransforms(contentType, dataWithComponents);\n\n    const doc = await strapi.db.query(uid).create({ ...query, data: entryData });\n\n    return doc;\n  }\n\n  async function deleteEntry(id: number) {\n    const componentsToDelete = await components.getComponents(uid, { id });\n\n    const deletedEntry = await strapi.db.query(uid).delete({ where: { id } });\n\n    await components.deleteComponents(uid, componentsToDelete as any, { loadComponents: false });\n\n    return deletedEntry;\n  }\n\n  async function updateEntry(entryToUpdate: any, params = {} as any) {\n    const { data, ...restParams } = await transformParamsDocumentId(uid, params);\n    const query = transformParamsToQuery(uid, pickSelectionParams(restParams) as any); // select / populate\n\n    const validData = await entityValidator.validateEntityUpdate(\n      contentType,\n      data,\n      {\n        isDraft: !params?.data?.publishedAt, // Always update the draft version\n        locale: params?.locale,\n      },\n      entryToUpdate\n    );\n    // Component handling\n    const componentData = await components.updateComponents(uid, entryToUpdate, validData as any);\n    const dataWithComponents = components.assignComponentData(\n      contentType,\n      componentData,\n      validData\n    );\n\n    const entryData = applyTransforms(contentType, dataWithComponents);\n\n    return strapi.db\n      .query(uid)\n      .update({ ...query, where: { id: entryToUpdate.id }, data: entryData });\n  }\n\n  async function publishEntry(entry: any, params = {} as any) {\n    return async.pipe(\n      omit('id'),\n      assoc('publishedAt', new Date()),\n      (draft) => {\n        const opts = { uid, locale: draft.locale, status: 'published', allowMissingId: true };\n        return transformData(draft, opts);\n      },\n      // Create the published entry\n      (draft) => createEntry({ ...params, data: draft, locale: draft.locale, status: 'published' })\n    )(entry);\n  }\n\n  async function discardDraftEntry(entry: any, params = {} as any) {\n    return async.pipe(\n      omit('id'),\n      assoc('publishedAt', null),\n      (entry) => {\n        const opts = { uid, locale: entry.locale, status: 'draft', allowMissingId: true };\n        return transformData(entry, opts);\n      },\n      // Create the draft entry\n      (data) => createEntry({ ...params, locale: data.locale, data, status: 'draft' })\n    )(entry);\n  }\n\n  return {\n    create: createEntry,\n    delete: deleteEntry,\n    update: updateEntry,\n    publish: publishEntry,\n    discardDraft: discardDraftEntry,\n  };\n};\n\nexport { createEntriesService };\n"],"names":["createEntriesService","uid","entityValidator","contentType","strapi","createEntry","params","data","restParams","transformParamsDocumentId","query","transformParamsToQuery","pickSelectionParams","Error","validData","validateEntityCreation","isDraft","publishedAt","locale","componentData","components","dataWithComponents","entryData","applyTransforms","doc","db","create","deleteEntry","id","componentsToDelete","deletedEntry","delete","where","loadComponents","updateEntry","entryToUpdate","validateEntityUpdate","update","publishEntry","entry","async","pipe","omit","assoc","Date","draft","opts","status","allowMissingId","transformData","discardDraftEntry","publish","discardDraft"],"mappings":";;;;;;;;;AAYMA,MAAAA,oBAAAA,GAAuB,CAC3BC,GACAC,EAAAA,eAAAA,GAAAA;IAEA,MAAMC,WAAAA,GAAcC,MAAOD,CAAAA,WAAW,CAACF,GAAAA,CAAAA;IAEvC,eAAeI,WAAAA,CAAYC,MAAS,GAAA,EAAS,EAAA;QAC3C,MAAM,EAAEC,IAAI,EAAE,GAAGC,YAAY,GAAG,MAAMC,iCAA0BR,GAAKK,EAAAA,MAAAA,CAAAA;AAErE,QAAA,MAAMI,KAAQC,GAAAA,sBAAAA,CAAuBV,GAAKW,EAAAA,mBAAAA,CAAoBJ;;AAG9D,QAAA,IAAI,CAACD,IAAM,EAAA;AACT,YAAA,MAAM,IAAIM,KAAM,CAAA,gCAAA,CAAA;AAClB;AAEA,QAAA,MAAMC,YAAY,MAAMZ,eAAAA,CAAgBa,sBAAsB,CAACZ,aAAaI,IAAM,EAAA;;YAEhFS,OAAS,EAAA,CAACV,QAAQC,IAAMU,EAAAA,WAAAA;AACxBC,YAAAA,MAAAA,EAAQZ,MAAQY,EAAAA;AAClB,SAAA,CAAA;;AAGA,QAAA,MAAMC,aAAgB,GAAA,MAAMC,gBAA2B,CAACnB,GAAKa,EAAAA,SAAAA,CAAAA;AAC7D,QAAA,MAAMO,kBAAqBD,GAAAA,mBAA8B,CACvDjB,aACAgB,aACAL,EAAAA,SAAAA,CAAAA;QAGF,MAAMQ,SAAAA,GAAYC,gBAAgBpB,WAAakB,EAAAA,kBAAAA,CAAAA;QAE/C,MAAMG,GAAAA,GAAM,MAAMpB,MAAOqB,CAAAA,EAAE,CAACf,KAAK,CAACT,GAAKyB,CAAAA,CAAAA,MAAM,CAAC;AAAE,YAAA,GAAGhB,KAAK;YAAEH,IAAMe,EAAAA;AAAU,SAAA,CAAA;QAE1E,OAAOE,GAAAA;AACT;AAEA,IAAA,eAAeG,YAAYC,EAAU,EAAA;AACnC,QAAA,MAAMC,kBAAqB,GAAA,MAAMT,aAAwB,CAACnB,GAAK,EAAA;AAAE2B,YAAAA;AAAG,SAAA,CAAA;QAEpE,MAAME,YAAAA,GAAe,MAAM1B,MAAOqB,CAAAA,EAAE,CAACf,KAAK,CAACT,GAAK8B,CAAAA,CAAAA,MAAM,CAAC;YAAEC,KAAO,EAAA;AAAEJ,gBAAAA;AAAG;AAAE,SAAA,CAAA;AAEvE,QAAA,MAAMR,gBAA2B,CAACnB,GAAAA,EAAK4B,kBAA2B,EAAA;YAAEI,cAAgB,EAAA;AAAM,SAAA,CAAA;QAE1F,OAAOH,YAAAA;AACT;AAEA,IAAA,eAAeI,WAAYC,CAAAA,aAAkB,EAAE7B,MAAAA,GAAS,EAAS,EAAA;QAC/D,MAAM,EAAEC,IAAI,EAAE,GAAGC,YAAY,GAAG,MAAMC,iCAA0BR,GAAKK,EAAAA,MAAAA,CAAAA;AACrE,QAAA,MAAMI,KAAQC,GAAAA,sBAAAA,CAAuBV,GAAKW,EAAAA,mBAAAA,CAAoBJ;AAE9D,QAAA,MAAMM,YAAY,MAAMZ,eAAAA,CAAgBkC,oBAAoB,CAC1DjC,aACAI,IACA,EAAA;YACES,OAAS,EAAA,CAACV,QAAQC,IAAMU,EAAAA,WAAAA;AACxBC,YAAAA,MAAAA,EAAQZ,MAAQY,EAAAA;SAElBiB,EAAAA,aAAAA,CAAAA;;AAGF,QAAA,MAAMhB,gBAAgB,MAAMC,gBAA2B,CAACnB,KAAKkC,aAAerB,EAAAA,SAAAA,CAAAA;AAC5E,QAAA,MAAMO,kBAAqBD,GAAAA,mBAA8B,CACvDjB,aACAgB,aACAL,EAAAA,SAAAA,CAAAA;QAGF,MAAMQ,SAAAA,GAAYC,gBAAgBpB,WAAakB,EAAAA,kBAAAA,CAAAA;AAE/C,QAAA,OAAOjB,OAAOqB,EAAE,CACbf,KAAK,CAACT,GAAAA,CAAAA,CACNoC,MAAM,CAAC;AAAE,YAAA,GAAG3B,KAAK;YAAEsB,KAAO,EAAA;AAAEJ,gBAAAA,EAAAA,EAAIO,cAAcP;AAAG,aAAA;YAAGrB,IAAMe,EAAAA;AAAU,SAAA,CAAA;AACzE;AAEA,IAAA,eAAegB,YAAaC,CAAAA,KAAU,EAAEjC,MAAAA,GAAS,EAAS,EAAA;QACxD,OAAOkC,KAAAA,CAAMC,IAAI,CACfC,IAAAA,CAAK,OACLC,KAAM,CAAA,aAAA,EAAe,IAAIC,IAAAA,EAAAA,CAAAA,EACzB,CAACC,KAAAA,GAAAA;AACC,YAAA,MAAMC,IAAO,GAAA;AAAE7C,gBAAAA,GAAAA;AAAKiB,gBAAAA,MAAAA,EAAQ2B,MAAM3B,MAAM;gBAAE6B,MAAQ,EAAA,WAAA;gBAAaC,cAAgB,EAAA;AAAK,aAAA;AACpF,YAAA,OAAOC,cAAcJ,KAAOC,EAAAA,IAAAA,CAAAA;AAC9B,SAAA;AAEA,QAAA,CAACD,QAAUxC,WAAY,CAAA;AAAE,gBAAA,GAAGC,MAAM;gBAAEC,IAAMsC,EAAAA,KAAAA;AAAO3B,gBAAAA,MAAAA,EAAQ2B,MAAM3B,MAAM;gBAAE6B,MAAQ,EAAA;aAC/ER,CAAAA,CAAAA,CAAAA,KAAAA,CAAAA;AACJ;AAEA,IAAA,eAAeW,iBAAkBX,CAAAA,KAAU,EAAEjC,MAAAA,GAAS,EAAS,EAAA;QAC7D,OAAOkC,KAAAA,CAAMC,IAAI,CACfC,IAAAA,CAAK,OACLC,KAAM,CAAA,aAAA,EAAe,OACrB,CAACJ,KAAAA,GAAAA;AACC,YAAA,MAAMO,IAAO,GAAA;AAAE7C,gBAAAA,GAAAA;AAAKiB,gBAAAA,MAAAA,EAAQqB,MAAMrB,MAAM;gBAAE6B,MAAQ,EAAA,OAAA;gBAASC,cAAgB,EAAA;AAAK,aAAA;AAChF,YAAA,OAAOC,cAAcV,KAAOO,EAAAA,IAAAA,CAAAA;AAC9B,SAAA;AAEA,QAAA,CAACvC,OAASF,WAAY,CAAA;AAAE,gBAAA,GAAGC,MAAM;AAAEY,gBAAAA,MAAAA,EAAQX,KAAKW,MAAM;AAAEX,gBAAAA,IAAAA;gBAAMwC,MAAQ,EAAA;aACtER,CAAAA,CAAAA,CAAAA,KAAAA,CAAAA;AACJ;IAEA,OAAO;QACLb,MAAQrB,EAAAA,WAAAA;QACR0B,MAAQJ,EAAAA,WAAAA;QACRU,MAAQH,EAAAA,WAAAA;QACRiB,OAASb,EAAAA,YAAAA;QACTc,YAAcF,EAAAA;AAChB,KAAA;AACF;;;;"}