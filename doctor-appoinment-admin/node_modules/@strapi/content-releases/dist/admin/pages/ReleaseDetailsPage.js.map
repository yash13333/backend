{"version":3,"file":"ReleaseDetailsPage.js","sources":["../../../admin/src/pages/ReleaseDetailsPage.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport {\n  Page,\n  Pagination,\n  Table,\n  BackButton,\n  ConfirmDialog,\n  useTracking,\n  useAPIErrorHandler,\n  useNotification,\n  useQueryParams,\n  useRBAC,\n  isFetchError,\n  useStrapiApp,\n  Layouts,\n} from '@strapi/admin/strapi-admin';\nimport {\n  Button,\n  Flex,\n  Main,\n  Tr,\n  Td,\n  Typography,\n  Badge,\n  SingleSelect,\n  SingleSelectOption,\n  EmptyStateLayout,\n  LinkButton,\n  Dialog,\n  SimpleMenu,\n  MenuItem,\n} from '@strapi/design-system';\nimport { More, Pencil, Trash } from '@strapi/icons';\nimport { EmptyDocuments } from '@strapi/icons/symbols';\nimport format from 'date-fns/format';\nimport { utcToZonedTime } from 'date-fns-tz';\nimport { useIntl } from 'react-intl';\nimport { useParams, useNavigate, Link as ReactRouterLink, Navigate } from 'react-router-dom';\nimport { styled } from 'styled-components';\n\nimport { EntryValidationPopover } from '../components/EntryValidationPopover';\nimport { RelativeTime } from '../components/RelativeTime';\nimport { ReleaseActionMenu } from '../components/ReleaseActionMenu';\nimport { ReleaseActionOptions } from '../components/ReleaseActionOptions';\nimport { ReleaseModal, FormValues } from '../components/ReleaseModal';\nimport { PERMISSIONS } from '../constants';\nimport {\n  GetReleaseActionsQueryParams,\n  useGetReleaseActionsQuery,\n  useGetReleaseQuery,\n  useGetReleaseSettingsQuery,\n  useUpdateReleaseMutation,\n  useUpdateReleaseActionMutation,\n  usePublishReleaseMutation,\n  useDeleteReleaseMutation,\n  releaseApi,\n} from '../services/release';\nimport { useTypedDispatch } from '../store/hooks';\nimport { isBaseQueryError } from '../utils/api';\nimport { getTimezoneOffset } from '../utils/time';\n\nimport { getBadgeProps } from './ReleasesPage';\n\nimport type {\n  ReleaseAction,\n  ReleaseActionGroupBy,\n} from '../../../shared/contracts/release-actions';\n\n/* -------------------------------------------------------------------------------------------------\n * ReleaseDetailsLayout\n * -----------------------------------------------------------------------------------------------*/\nconst ReleaseInfoWrapper = styled(Flex)`\n  align-self: stretch;\n  border-bottom-right-radius: ${({ theme }) => theme.borderRadius};\n  border-bottom-left-radius: ${({ theme }) => theme.borderRadius};\n  border-top: 1px solid ${({ theme }) => theme.colors.neutral150};\n`;\n\nconst StyledMenuItem = styled(MenuItem)<{\n  disabled?: boolean;\n  $variant?: 'neutral' | 'danger';\n}>`\n  svg path {\n    fill: ${({ theme, disabled }) => disabled && theme.colors.neutral500};\n  }\n  span {\n    color: ${({ theme, disabled }) => disabled && theme.colors.neutral500};\n  }\n\n  &:hover {\n    background: ${({ theme, $variant = 'neutral' }) => theme.colors[`${$variant}100`]};\n  }\n`;\n\nconst PencilIcon = styled(Pencil)`\n  width: ${({ theme }) => theme.spaces[4]};\n  height: ${({ theme }) => theme.spaces[4]};\n  path {\n    fill: ${({ theme }) => theme.colors.neutral600};\n  }\n`;\n\nconst TrashIcon = styled(Trash)`\n  width: ${({ theme }) => theme.spaces[4]};\n  height: ${({ theme }) => theme.spaces[4]};\n  path {\n    fill: ${({ theme }) => theme.colors.danger600};\n  }\n`;\n\ninterface ReleaseDetailsLayoutProps {\n  toggleEditReleaseModal: () => void;\n  toggleWarningSubmit: () => void;\n  children: React.ReactNode;\n}\n\nconst ReleaseDetailsLayout = ({\n  toggleEditReleaseModal,\n  toggleWarningSubmit,\n  children,\n}: ReleaseDetailsLayoutProps) => {\n  const { formatMessage, formatDate, formatTime } = useIntl();\n  const { releaseId } = useParams<{ releaseId: string }>();\n  const {\n    data,\n    isLoading: isLoadingDetails,\n    error,\n  } = useGetReleaseQuery(\n    { id: releaseId! },\n    {\n      skip: !releaseId,\n    }\n  );\n  const [publishRelease, { isLoading: isPublishing }] = usePublishReleaseMutation();\n  const { toggleNotification } = useNotification();\n  const { formatAPIError } = useAPIErrorHandler();\n  const { allowedActions } = useRBAC(PERMISSIONS);\n  const { canUpdate, canDelete, canPublish } = allowedActions;\n  const dispatch = useTypedDispatch();\n  const { trackUsage } = useTracking();\n\n  const release = data?.data;\n\n  const handlePublishRelease = (id: string) => async () => {\n    const response = await publishRelease({ id });\n\n    if ('data' in response) {\n      // When the response returns an object with 'data', handle success\n      toggleNotification({\n        type: 'success',\n        message: formatMessage({\n          id: 'content-releases.pages.ReleaseDetails.publish-notification-success',\n          defaultMessage: 'Release was published successfully.',\n        }),\n      });\n\n      const { totalEntries, totalPublishedEntries, totalUnpublishedEntries } = response.data.meta;\n\n      trackUsage('didPublishRelease', {\n        totalEntries,\n        totalPublishedEntries,\n        totalUnpublishedEntries,\n      });\n    } else if (isFetchError(response.error)) {\n      // When the response returns an object with 'error', handle fetch error\n      toggleNotification({\n        type: 'danger',\n        message: formatAPIError(response.error),\n      });\n    } else {\n      // Otherwise, the response returns an object with 'error', handle a generic error\n      toggleNotification({\n        type: 'danger',\n        message: formatMessage({ id: 'notification.error', defaultMessage: 'An error occurred' }),\n      });\n    }\n  };\n\n  const handleRefresh = () => {\n    dispatch(\n      releaseApi.util.invalidateTags([\n        { type: 'ReleaseAction', id: 'LIST' },\n        { type: 'Release', id: releaseId },\n      ])\n    );\n  };\n\n  const getCreatedByUser = () => {\n    if (!release?.createdBy) {\n      return null;\n    }\n\n    // Favor the username\n    if (release.createdBy.username) {\n      return release.createdBy.username;\n    }\n\n    // Firstname may not exist if created with SSO\n    if (release.createdBy.firstname) {\n      return `${release.createdBy.firstname} ${release.createdBy.lastname || ''}`.trim();\n    }\n\n    // All users must have at least an email\n    return release.createdBy.email;\n  };\n\n  if (isLoadingDetails) {\n    return <Page.Loading />;\n  }\n\n  if ((isBaseQueryError(error) && 'code' in error) || !release) {\n    return (\n      <Navigate\n        to=\"..\"\n        state={{\n          errors: [\n            {\n              // @ts-expect-error â€“ TODO: fix this weird error flow\n              code: error?.code,\n            },\n          ],\n        }}\n      />\n    );\n  }\n\n  const totalEntries = release.actions.meta.count || 0;\n  const hasCreatedByUser = Boolean(getCreatedByUser());\n\n  const isScheduled = release.scheduledAt && release.timezone;\n  const numberOfEntriesText = formatMessage(\n    {\n      id: 'content-releases.pages.Details.header-subtitle',\n      defaultMessage: '{number, plural, =0 {No entries} one {# entry} other {# entries}}',\n    },\n    { number: totalEntries }\n  );\n  const scheduledText = isScheduled\n    ? formatMessage(\n        {\n          id: 'content-releases.pages.ReleaseDetails.header-subtitle.scheduled',\n          defaultMessage: 'Scheduled for {date} at {time} ({offset})',\n        },\n        {\n          date: formatDate(new Date(release.scheduledAt!), {\n            weekday: 'long',\n            day: 'numeric',\n            month: 'long',\n            year: 'numeric',\n            timeZone: release.timezone!,\n          }),\n          time: formatTime(new Date(release.scheduledAt!), {\n            timeZone: release.timezone!,\n            hourCycle: 'h23',\n          }),\n          offset: getTimezoneOffset(release.timezone!, new Date(release.scheduledAt!)),\n        }\n      )\n    : '';\n\n  return (\n    <Main aria-busy={isLoadingDetails}>\n      <Layouts.Header\n        title={release.name}\n        subtitle={\n          <Flex gap={2} lineHeight={6}>\n            <Typography textColor=\"neutral600\" variant=\"epsilon\">\n              {numberOfEntriesText + (isScheduled ? ` - ${scheduledText}` : '')}\n            </Typography>\n            <Badge {...getBadgeProps(release.status)}>{release.status}</Badge>\n          </Flex>\n        }\n        navigationAction={<BackButton fallback=\"..\" />}\n        primaryAction={\n          !release.releasedAt && (\n            <Flex gap={2}>\n              <SimpleMenuButton\n                label={<More />}\n                variant=\"tertiary\"\n                endIcon={null}\n                paddingLeft=\"7px\"\n                paddingRight=\"7px\"\n                aria-label={formatMessage({\n                  id: 'content-releases.header.actions.open-release-actions',\n                  defaultMessage: 'Release edit and delete menu',\n                })}\n                popoverPlacement=\"bottom-end\"\n              >\n                <StyledMenuItem disabled={!canUpdate} onSelect={toggleEditReleaseModal}>\n                  <Flex alignItems=\"center\" gap={2} hasRadius width=\"100%\">\n                    <PencilIcon />\n                    <Typography ellipsis>\n                      {formatMessage({\n                        id: 'content-releases.header.actions.edit',\n                        defaultMessage: 'Edit',\n                      })}\n                    </Typography>\n                  </Flex>\n                </StyledMenuItem>\n                <StyledMenuItem\n                  disabled={!canDelete}\n                  onSelect={toggleWarningSubmit}\n                  $variant=\"danger\"\n                >\n                  <Flex alignItems=\"center\" gap={2} hasRadius width=\"100%\">\n                    <TrashIcon />\n                    <Typography ellipsis textColor=\"danger600\">\n                      {formatMessage({\n                        id: 'content-releases.header.actions.delete',\n                        defaultMessage: 'Delete',\n                      })}\n                    </Typography>\n                  </Flex>\n                </StyledMenuItem>\n                <ReleaseInfoWrapper\n                  direction=\"column\"\n                  justifyContent=\"center\"\n                  alignItems=\"flex-start\"\n                  gap={1}\n                  padding={4}\n                >\n                  <Typography variant=\"pi\" fontWeight=\"bold\">\n                    {formatMessage({\n                      id: 'content-releases.header.actions.created',\n                      defaultMessage: 'Created',\n                    })}\n                  </Typography>\n                  <Typography variant=\"pi\" color=\"neutral300\">\n                    <RelativeTime timestamp={new Date(release.createdAt)} />\n                    {formatMessage(\n                      {\n                        id: 'content-releases.header.actions.created.description',\n                        defaultMessage:\n                          '{hasCreatedByUser, select, true { by {createdBy}} other { by deleted user}}',\n                      },\n                      { createdBy: getCreatedByUser(), hasCreatedByUser }\n                    )}\n                  </Typography>\n                </ReleaseInfoWrapper>\n              </SimpleMenuButton>\n              <Button size=\"S\" variant=\"tertiary\" onClick={handleRefresh}>\n                {formatMessage({\n                  id: 'content-releases.header.actions.refresh',\n                  defaultMessage: 'Refresh',\n                })}\n              </Button>\n              {canPublish ? (\n                <Button\n                  size=\"S\"\n                  variant=\"default\"\n                  onClick={handlePublishRelease(release.id.toString())}\n                  loading={isPublishing}\n                  disabled={release.actions.meta.count === 0}\n                >\n                  {formatMessage({\n                    id: 'content-releases.header.actions.publish',\n                    defaultMessage: 'Publish',\n                  })}\n                </Button>\n              ) : null}\n            </Flex>\n          )\n        }\n      />\n      {children}\n    </Main>\n  );\n};\n\nconst SimpleMenuButton = styled(SimpleMenu)`\n  & > span {\n    display: flex;\n  }\n`;\n\n/* -------------------------------------------------------------------------------------------------\n * ReleaseDetailsBody\n * -----------------------------------------------------------------------------------------------*/\nconst GROUP_BY_OPTIONS = ['contentType', 'locale', 'action'] as const;\nconst GROUP_BY_OPTIONS_NO_LOCALE = ['contentType', 'action'] as const;\nconst getGroupByOptionLabel = (value: (typeof GROUP_BY_OPTIONS)[number]) => {\n  if (value === 'locale') {\n    return {\n      id: 'content-releases.pages.ReleaseDetails.groupBy.option.locales',\n      defaultMessage: 'Locales',\n    };\n  }\n\n  if (value === 'action') {\n    return {\n      id: 'content-releases.pages.ReleaseDetails.groupBy.option.actions',\n      defaultMessage: 'Actions',\n    };\n  }\n\n  return {\n    id: 'content-releases.pages.ReleaseDetails.groupBy.option.content-type',\n    defaultMessage: 'Content-Types',\n  };\n};\n\ninterface ReleaseDetailsBodyProps {\n  releaseId: string;\n}\n\nconst ReleaseDetailsBody = ({ releaseId }: ReleaseDetailsBodyProps) => {\n  const { formatMessage } = useIntl();\n  const [{ query }, setQuery] = useQueryParams<GetReleaseActionsQueryParams>();\n  const { toggleNotification } = useNotification();\n  const { formatAPIError } = useAPIErrorHandler();\n  const {\n    data: releaseData,\n    isLoading: isReleaseLoading,\n    error: releaseError,\n  } = useGetReleaseQuery({ id: releaseId });\n  const {\n    allowedActions: { canUpdate },\n  } = useRBAC(PERMISSIONS);\n  const runHookWaterfall = useStrapiApp('ReleaseDetailsPage', (state) => state.runHookWaterfall);\n\n  // TODO: Migrated displayedHeader to v5\n  const { displayedHeaders, hasI18nEnabled }: { displayedHeaders: any; hasI18nEnabled: boolean } =\n    runHookWaterfall('ContentReleases/pages/ReleaseDetails/add-locale-in-releases', {\n      displayedHeaders: [\n        {\n          label: {\n            id: 'content-releases.page.ReleaseDetails.table.header.label.name',\n            defaultMessage: 'name',\n          },\n          name: 'name',\n        },\n      ],\n      hasI18nEnabled: false,\n    });\n\n  const release = releaseData?.data;\n  const selectedGroupBy = query?.groupBy || 'contentType';\n\n  const {\n    isLoading,\n    isFetching,\n    isError,\n    data,\n    error: releaseActionsError,\n  } = useGetReleaseActionsQuery({\n    ...query,\n    releaseId,\n  });\n\n  const [updateReleaseAction] = useUpdateReleaseActionMutation();\n\n  const handleChangeType = async (\n    e: React.ChangeEvent<HTMLInputElement>,\n    actionId: ReleaseAction['id'],\n    actionPath: [string, number]\n  ) => {\n    const response = await updateReleaseAction({\n      params: {\n        releaseId,\n        actionId,\n      },\n      body: {\n        type: e.target.value as ReleaseAction['type'],\n      },\n      query, // We are passing the query params to make optimistic updates\n      actionPath, // We are passing the action path to found the position in the cache of the action for optimistic updates\n    });\n\n    if ('error' in response) {\n      if (isFetchError(response.error)) {\n        // When the response returns an object with 'error', handle fetch error\n        toggleNotification({\n          type: 'danger',\n          message: formatAPIError(response.error),\n        });\n      } else {\n        // Otherwise, the response returns an object with 'error', handle a generic error\n        toggleNotification({\n          type: 'danger',\n          message: formatMessage({ id: 'notification.error', defaultMessage: 'An error occurred' }),\n        });\n      }\n    }\n  };\n\n  if (isLoading || isReleaseLoading) {\n    return <Page.Loading />;\n  }\n\n  const releaseActions = data?.data;\n  const releaseMeta = data?.meta;\n  const contentTypes = releaseMeta?.contentTypes || {};\n  const components = releaseMeta?.components || {};\n\n  if (isBaseQueryError(releaseError) || !release) {\n    const errorsArray = [];\n    if (releaseError && 'code' in releaseError) {\n      errorsArray.push({\n        code: releaseError.code,\n      });\n    }\n    if (releaseActionsError && 'code' in releaseActionsError) {\n      errorsArray.push({\n        code: releaseActionsError.code,\n      });\n    }\n    return (\n      <Navigate\n        to=\"..\"\n        state={{\n          errors: errorsArray,\n        }}\n      />\n    );\n  }\n\n  if (isError || !releaseActions) {\n    return <Page.Error />;\n  }\n\n  if (Object.keys(releaseActions).length === 0) {\n    return (\n      <Layouts.Content>\n        <EmptyStateLayout\n          action={\n            <LinkButton\n              tag={ReactRouterLink}\n              to={{\n                pathname: '/content-manager',\n              }}\n              style={{ textDecoration: 'none' }}\n              variant=\"secondary\"\n            >\n              {formatMessage({\n                id: 'content-releases.page.Details.button.openContentManager',\n                defaultMessage: 'Open the Content Manager',\n              })}\n            </LinkButton>\n          }\n          icon={<EmptyDocuments width=\"16rem\" />}\n          content={formatMessage({\n            id: 'content-releases.pages.Details.tab.emptyEntries',\n            defaultMessage:\n              'This release is empty. Open the Content Manager, select an entry and add it to the release.',\n          })}\n        />\n      </Layouts.Content>\n    );\n  }\n\n  const groupByLabel = formatMessage({\n    id: 'content-releases.pages.ReleaseDetails.groupBy.aria-label',\n    defaultMessage: 'Group by',\n  });\n  const headers = [\n    ...displayedHeaders,\n    {\n      label: {\n        id: 'content-releases.page.ReleaseDetails.table.header.label.content-type',\n        defaultMessage: 'content-type',\n      },\n      name: 'content-type',\n    },\n    {\n      label: {\n        id: 'content-releases.page.ReleaseDetails.table.header.label.action',\n        defaultMessage: 'action',\n      },\n      name: 'action',\n    },\n    ...(!release.releasedAt\n      ? [\n          {\n            label: {\n              id: 'content-releases.page.ReleaseDetails.table.header.label.status',\n              defaultMessage: 'status',\n            },\n            name: 'status',\n          },\n        ]\n      : []),\n  ];\n\n  const options = hasI18nEnabled ? GROUP_BY_OPTIONS : GROUP_BY_OPTIONS_NO_LOCALE;\n\n  return (\n    <Layouts.Content>\n      <Flex gap={8} direction=\"column\" alignItems=\"stretch\">\n        <Flex>\n          <SingleSelect\n            placeholder={groupByLabel}\n            aria-label={groupByLabel}\n            customizeContent={(value) =>\n              formatMessage(\n                {\n                  id: `content-releases.pages.ReleaseDetails.groupBy.label`,\n                  defaultMessage: `Group by {groupBy}`,\n                },\n                {\n                  groupBy: value,\n                }\n              )\n            }\n            value={formatMessage(getGroupByOptionLabel(selectedGroupBy))}\n            onChange={(value) => setQuery({ groupBy: value as ReleaseActionGroupBy })}\n          >\n            {options.map((option) => (\n              <SingleSelectOption key={option} value={option}>\n                {formatMessage(getGroupByOptionLabel(option))}\n              </SingleSelectOption>\n            ))}\n          </SingleSelect>\n        </Flex>\n        {Object.keys(releaseActions).map((key) => (\n          <Flex key={`releases-group-${key}`} gap={4} direction=\"column\" alignItems=\"stretch\">\n            <Flex role=\"separator\" aria-label={key}>\n              <Badge>{key}</Badge>\n            </Flex>\n            <Table.Root\n              rows={releaseActions[key].map((item) => ({\n                ...item,\n                id: Number(item.entry.id),\n              }))}\n              headers={headers}\n              isLoading={isLoading || isFetching}\n            >\n              <Table.Content>\n                <Table.Head>\n                  {headers.map(({ label, name }) => (\n                    <Table.HeaderCell key={name} label={formatMessage(label)} name={name} />\n                  ))}\n                </Table.Head>\n                <Table.Loading />\n                <Table.Body>\n                  {releaseActions[key].map(\n                    ({ id, contentType, locale, type, entry, status }, actionIndex) => (\n                      <Tr key={id}>\n                        <Td width=\"25%\" maxWidth=\"200px\">\n                          <Typography ellipsis>{`${\n                            contentType.mainFieldValue || entry.id\n                          }`}</Typography>\n                        </Td>\n                        {hasI18nEnabled && (\n                          <Td width=\"10%\">\n                            <Typography>{`${locale?.name ? locale.name : '-'}`}</Typography>\n                          </Td>\n                        )}\n\n                        <Td width=\"10%\">\n                          <Typography>{contentType.displayName || ''}</Typography>\n                        </Td>\n                        <Td width=\"20%\">\n                          {release.releasedAt ? (\n                            <Typography>\n                              {formatMessage(\n                                {\n                                  id: 'content-releases.page.ReleaseDetails.table.action-published',\n                                  defaultMessage:\n                                    'This entry was <b>{isPublish, select, true {published} other {unpublished}}</b>.',\n                                },\n                                {\n                                  isPublish: type === 'publish',\n                                  b: (children: React.ReactNode) => (\n                                    <Typography fontWeight=\"bold\">{children}</Typography>\n                                  ),\n                                }\n                              )}\n                            </Typography>\n                          ) : (\n                            <ReleaseActionOptions\n                              selected={type}\n                              handleChange={(e) => handleChangeType(e, id, [key, actionIndex])}\n                              name={`release-action-${id}-type`}\n                              disabled={!canUpdate}\n                            />\n                          )}\n                        </Td>\n                        {!release.releasedAt && (\n                          <>\n                            <Td width=\"20%\" minWidth=\"200px\">\n                              <EntryValidationPopover\n                                action={type}\n                                schema={contentTypes?.[contentType.uid]}\n                                entry={entry}\n                                status={status}\n                              />\n                            </Td>\n                            <Td>\n                              <Flex justifyContent=\"flex-end\">\n                                <ReleaseActionMenu.Root>\n                                  <ReleaseActionMenu.ReleaseActionEntryLinkItem\n                                    contentTypeUid={contentType.uid}\n                                    documentId={entry.documentId}\n                                    locale={locale?.code}\n                                  />\n                                  <ReleaseActionMenu.DeleteReleaseActionItem\n                                    releaseId={release.id}\n                                    actionId={id}\n                                  />\n                                </ReleaseActionMenu.Root>\n                              </Flex>\n                            </Td>\n                          </>\n                        )}\n                      </Tr>\n                    )\n                  )}\n                </Table.Body>\n              </Table.Content>\n            </Table.Root>\n          </Flex>\n        ))}\n        <Pagination.Root\n          {...releaseMeta?.pagination}\n          defaultPageSize={releaseMeta?.pagination?.pageSize}\n        >\n          <Pagination.PageSize />\n          <Pagination.Links />\n        </Pagination.Root>\n      </Flex>\n    </Layouts.Content>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * ReleaseDetailsPage\n * -----------------------------------------------------------------------------------------------*/\nconst ReleaseDetailsPage = () => {\n  const { formatMessage } = useIntl();\n  const { releaseId } = useParams<{ releaseId: string }>();\n  const { toggleNotification } = useNotification();\n  const { formatAPIError } = useAPIErrorHandler();\n  const navigate = useNavigate();\n  const [releaseModalShown, setReleaseModalShown] = React.useState(false);\n  const [showWarningSubmit, setWarningSubmit] = React.useState(false);\n\n  const {\n    isLoading: isLoadingDetails,\n    data,\n    isSuccess: isSuccessDetails,\n  } = useGetReleaseQuery(\n    { id: releaseId! },\n    {\n      skip: !releaseId,\n    }\n  );\n  const { data: dataTimezone, isLoading: isLoadingTimezone } = useGetReleaseSettingsQuery();\n  const [updateRelease, { isLoading: isSubmittingForm }] = useUpdateReleaseMutation();\n  const [deleteRelease] = useDeleteReleaseMutation();\n\n  const toggleEditReleaseModal = () => {\n    setReleaseModalShown((prev) => !prev);\n  };\n\n  const getTimezoneValue = () => {\n    if (releaseData?.timezone) {\n      return releaseData.timezone;\n    } else {\n      if (dataTimezone?.data.defaultTimezone) {\n        return dataTimezone.data.defaultTimezone;\n      }\n      return null;\n    }\n  };\n\n  const toggleWarningSubmit = () => setWarningSubmit((prevState) => !prevState);\n\n  if (isLoadingDetails || isLoadingTimezone) {\n    return (\n      <ReleaseDetailsLayout\n        toggleEditReleaseModal={toggleEditReleaseModal}\n        toggleWarningSubmit={toggleWarningSubmit}\n      >\n        <Page.Loading />\n      </ReleaseDetailsLayout>\n    );\n  }\n\n  if (!releaseId) {\n    return <Navigate to=\"..\" />;\n  }\n\n  const releaseData = (isSuccessDetails && data?.data) || null;\n\n  const title = releaseData?.name || '';\n  const timezone = getTimezoneValue();\n  const scheduledAt =\n    releaseData?.scheduledAt && timezone ? utcToZonedTime(releaseData.scheduledAt, timezone) : null;\n  // Just get the date and time to display without considering updated timezone time\n  const date = scheduledAt ? format(scheduledAt, 'yyyy-MM-dd') : undefined;\n  const time = scheduledAt ? format(scheduledAt, 'HH:mm') : '';\n\n  const handleEditRelease = async (values: FormValues) => {\n    const response = await updateRelease({\n      id: releaseId,\n      name: values.name,\n      scheduledAt: values.scheduledAt,\n      timezone: values.timezone,\n    });\n\n    if ('data' in response) {\n      // When the response returns an object with 'data', handle success\n      toggleNotification({\n        type: 'success',\n        message: formatMessage({\n          id: 'content-releases.modal.release-updated-notification-success',\n          defaultMessage: 'Release updated.',\n        }),\n      });\n      toggleEditReleaseModal();\n    } else if (isFetchError(response.error)) {\n      // When the response returns an object with 'error', handle fetch error\n      toggleNotification({\n        type: 'danger',\n        message: formatAPIError(response.error),\n      });\n    } else {\n      // Otherwise, the response returns an object with 'error', handle a generic error\n      toggleNotification({\n        type: 'danger',\n        message: formatMessage({ id: 'notification.error', defaultMessage: 'An error occurred' }),\n      });\n    }\n  };\n\n  const handleDeleteRelease = async () => {\n    const response = await deleteRelease({\n      id: releaseId,\n    });\n\n    if ('data' in response) {\n      navigate('..');\n    } else if (isFetchError(response.error)) {\n      // When the response returns an object with 'error', handle fetch error\n      toggleNotification({\n        type: 'danger',\n        message: formatAPIError(response.error),\n      });\n    } else {\n      // Otherwise, the response returns an object with 'error', handle a generic error\n      toggleNotification({\n        type: 'danger',\n        message: formatMessage({ id: 'notification.error', defaultMessage: 'An error occurred' }),\n      });\n    }\n  };\n\n  return (\n    <ReleaseDetailsLayout\n      toggleEditReleaseModal={toggleEditReleaseModal}\n      toggleWarningSubmit={toggleWarningSubmit}\n    >\n      <ReleaseDetailsBody releaseId={releaseId} />\n      <ReleaseModal\n        open={releaseModalShown}\n        handleClose={toggleEditReleaseModal}\n        handleSubmit={handleEditRelease}\n        isLoading={isLoadingDetails || isSubmittingForm}\n        initialValues={{\n          name: title || '',\n          scheduledAt,\n          date,\n          time,\n          isScheduled: Boolean(scheduledAt),\n          timezone,\n        }}\n      />\n      <Dialog.Root open={showWarningSubmit} onOpenChange={toggleWarningSubmit}>\n        <ConfirmDialog onConfirm={handleDeleteRelease}>\n          {formatMessage({\n            id: 'content-releases.dialog.confirmation-message',\n            defaultMessage: 'Are you sure you want to delete this release?',\n          })}\n        </ConfirmDialog>\n      </Dialog.Root>\n    </ReleaseDetailsLayout>\n  );\n};\n\nexport { ReleaseDetailsPage };\n"],"names":["ReleaseInfoWrapper","styled","Flex","theme","borderRadius","colors","neutral150","StyledMenuItem","MenuItem","disabled","neutral500","$variant","PencilIcon","Pencil","spaces","neutral600","TrashIcon","Trash","danger600","ReleaseDetailsLayout","toggleEditReleaseModal","toggleWarningSubmit","children","formatMessage","formatDate","formatTime","useIntl","releaseId","useParams","data","isLoading","isLoadingDetails","error","useGetReleaseQuery","id","skip","publishRelease","isPublishing","usePublishReleaseMutation","toggleNotification","useNotification","formatAPIError","useAPIErrorHandler","allowedActions","useRBAC","PERMISSIONS","canUpdate","canDelete","canPublish","dispatch","useTypedDispatch","trackUsage","useTracking","release","handlePublishRelease","response","type","message","defaultMessage","totalEntries","totalPublishedEntries","totalUnpublishedEntries","meta","isFetchError","handleRefresh","releaseApi","util","invalidateTags","getCreatedByUser","createdBy","username","firstname","lastname","trim","email","_jsx","Page","Loading","isBaseQueryError","Navigate","to","state","errors","code","actions","count","hasCreatedByUser","Boolean","isScheduled","scheduledAt","timezone","numberOfEntriesText","number","scheduledText","date","Date","weekday","day","month","year","timeZone","time","hourCycle","offset","getTimezoneOffset","_jsxs","Main","aria-busy","Layouts","Header","title","name","subtitle","gap","lineHeight","Typography","textColor","variant","Badge","getBadgeProps","status","navigationAction","BackButton","fallback","primaryAction","releasedAt","SimpleMenuButton","label","More","endIcon","paddingLeft","paddingRight","aria-label","popoverPlacement","onSelect","alignItems","hasRadius","width","ellipsis","direction","justifyContent","padding","fontWeight","color","RelativeTime","timestamp","createdAt","Button","size","onClick","toString","loading","SimpleMenu","GROUP_BY_OPTIONS","GROUP_BY_OPTIONS_NO_LOCALE","getGroupByOptionLabel","value","ReleaseDetailsBody","query","setQuery","useQueryParams","releaseData","isReleaseLoading","releaseError","runHookWaterfall","useStrapiApp","displayedHeaders","hasI18nEnabled","selectedGroupBy","groupBy","isFetching","isError","releaseActionsError","useGetReleaseActionsQuery","updateReleaseAction","useUpdateReleaseActionMutation","handleChangeType","e","actionId","actionPath","params","body","target","releaseActions","releaseMeta","contentTypes","components","errorsArray","push","Error","Object","keys","length","Content","EmptyStateLayout","action","LinkButton","tag","ReactRouterLink","pathname","style","textDecoration","icon","EmptyDocuments","content","groupByLabel","headers","options","SingleSelect","placeholder","customizeContent","onChange","map","option","SingleSelectOption","key","role","Table","Root","rows","item","Number","entry","Head","HeaderCell","Body","contentType","locale","actionIndex","Tr","Td","maxWidth","mainFieldValue","displayName","isPublish","b","ReleaseActionOptions","selected","handleChange","_Fragment","minWidth","EntryValidationPopover","schema","uid","ReleaseActionMenu","ReleaseActionEntryLinkItem","contentTypeUid","documentId","DeleteReleaseActionItem","Pagination","pagination","defaultPageSize","pageSize","PageSize","Links","ReleaseDetailsPage","navigate","useNavigate","releaseModalShown","setReleaseModalShown","React","useState","showWarningSubmit","setWarningSubmit","isSuccess","isSuccessDetails","dataTimezone","isLoadingTimezone","useGetReleaseSettingsQuery","updateRelease","isSubmittingForm","useUpdateReleaseMutation","deleteRelease","useDeleteReleaseMutation","prev","getTimezoneValue","defaultTimezone","prevState","utcToZonedTime","format","undefined","handleEditRelease","values","handleDeleteRelease","ReleaseModal","open","handleClose","handleSubmit","initialValues","Dialog","onOpenChange","ConfirmDialog","onConfirm"],"mappings":"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"}