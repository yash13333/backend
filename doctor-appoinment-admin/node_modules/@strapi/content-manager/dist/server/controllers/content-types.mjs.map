{"version":3,"file":"content-types.mjs","sources":["../../../server/src/controllers/content-types.ts"],"sourcesContent":["import { has, assoc, mapValues, prop } from 'lodash/fp';\nimport { getService } from '../utils';\nimport { createModelConfigurationSchema, validateKind } from './validation';\n\nconst hasEditMainField = has('edit.mainField');\nconst getEditMainField = prop('edit.mainField');\nconst assocListMainField = assoc('list.mainField');\n\nconst assocMainField = (metadata: any) =>\n  hasEditMainField(metadata) ? assocListMainField(getEditMainField(metadata), metadata) : metadata;\n\nexport default {\n  async findContentTypes(ctx: any) {\n    const { kind } = ctx.query;\n\n    try {\n      await validateKind(kind);\n    } catch (error) {\n      return ctx.send({ error }, 400);\n    }\n\n    const contentTypes = getService('content-types').findContentTypesByKind(kind);\n    const { toDto } = getService('data-mapper');\n\n    ctx.body = { data: contentTypes.map(toDto) };\n  },\n\n  async findContentTypesSettings(ctx: any) {\n    const { findAllContentTypes, findConfiguration } = getService('content-types');\n\n    const contentTypes = await findAllContentTypes();\n    const configurations = await Promise.all(\n      contentTypes.map(async (contentType: any) => {\n        const { uid, settings } = await findConfiguration(contentType);\n        return { uid, settings };\n      })\n    );\n\n    ctx.body = {\n      data: configurations,\n    };\n  },\n\n  async findContentTypeConfiguration(ctx: any) {\n    const { uid } = ctx.params;\n\n    const contentTypeService = getService('content-types');\n\n    const contentType = await contentTypeService.findContentType(uid);\n\n    if (!contentType) {\n      return ctx.notFound('contentType.notFound');\n    }\n\n    const configuration = await contentTypeService.findConfiguration(contentType);\n\n    const confWithUpdatedMetadata = {\n      ...configuration,\n      metadatas: mapValues(assocMainField, configuration.metadatas),\n    };\n\n    const components = await contentTypeService.findComponentsConfigurations(contentType);\n\n    ctx.body = {\n      data: {\n        contentType: confWithUpdatedMetadata,\n        components,\n      },\n    };\n  },\n\n  async updateContentTypeConfiguration(ctx: any) {\n    const { userAbility } = ctx.state;\n    const { uid } = ctx.params;\n    const { body } = ctx.request;\n\n    const contentTypeService = getService('content-types');\n    const metricsService = getService('metrics');\n\n    const contentType = await contentTypeService.findContentType(uid);\n\n    if (!contentType) {\n      return ctx.notFound('contentType.notFound');\n    }\n\n    if (!getService('permission').canConfigureContentType({ userAbility, contentType })) {\n      return ctx.forbidden();\n    }\n\n    let input;\n    try {\n      input = await createModelConfigurationSchema(contentType).validate(body, {\n        abortEarly: false,\n        stripUnknown: true,\n        strict: true,\n      });\n    } catch (error: any) {\n      return ctx.badRequest(null, {\n        name: 'validationError',\n        errors: error.errors,\n      });\n    }\n\n    const newConfiguration = await contentTypeService.updateConfiguration(contentType, input);\n\n    await metricsService.sendDidConfigureListView(contentType, newConfiguration);\n\n    const confWithUpdatedMetadata = {\n      ...newConfiguration,\n      metadatas: mapValues(assocMainField, newConfiguration.metadatas),\n    };\n\n    const components = await contentTypeService.findComponentsConfigurations(contentType);\n\n    ctx.body = {\n      data: {\n        contentType: confWithUpdatedMetadata,\n        components,\n      },\n    };\n  },\n};\n"],"names":["hasEditMainField","has","getEditMainField","prop","assocListMainField","assoc","assocMainField","metadata","findContentTypes","ctx","kind","query","validateKind","error","send","contentTypes","getService","findContentTypesByKind","toDto","body","data","map","findContentTypesSettings","findAllContentTypes","findConfiguration","configurations","Promise","all","contentType","uid","settings","findContentTypeConfiguration","params","contentTypeService","findContentType","notFound","configuration","confWithUpdatedMetadata","metadatas","mapValues","components","findComponentsConfigurations","updateContentTypeConfiguration","userAbility","state","request","metricsService","canConfigureContentType","forbidden","input","createModelConfigurationSchema","validate","abortEarly","stripUnknown","strict","badRequest","name","errors","newConfiguration","updateConfiguration","sendDidConfigureListView"],"mappings":"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"}