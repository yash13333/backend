{"version":3,"file":"DocumentActions.mjs","sources":["../../../../../admin/src/pages/EditView/components/DocumentActions.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport {\n  useForm,\n  useNotification,\n  NotificationConfig,\n  useAPIErrorHandler,\n  useQueryParams,\n} from '@strapi/admin/strapi-admin';\nimport {\n  Button,\n  Dialog,\n  Flex,\n  Modal,\n  Radio,\n  Typography,\n  VisuallyHidden,\n  Menu,\n  ButtonProps,\n} from '@strapi/design-system';\nimport { Cross, More, WarningCircle } from '@strapi/icons';\nimport mapValues from 'lodash/fp/mapValues';\nimport { useIntl } from 'react-intl';\nimport { useMatch, useNavigate, useParams } from 'react-router-dom';\nimport { DefaultTheme, styled } from 'styled-components';\n\nimport { PUBLISHED_AT_ATTRIBUTE_NAME } from '../../../constants/attributes';\nimport { SINGLE_TYPES } from '../../../constants/collections';\nimport { useDocumentRBAC } from '../../../features/DocumentRBAC';\nimport { useDoc } from '../../../hooks/useDocument';\nimport { useDocumentActions } from '../../../hooks/useDocumentActions';\nimport { useDocumentContext } from '../../../hooks/useDocumentContext';\nimport { usePreviewContext } from '../../../preview/pages/Preview';\nimport { CLONE_PATH, LIST_PATH } from '../../../router';\nimport { useGetDraftRelationCountQuery } from '../../../services/documents';\nimport { isBaseQueryError, buildValidParams } from '../../../utils/api';\nimport { getTranslation } from '../../../utils/translations';\n\nimport type { RelationsFormValue } from './FormInputs/Relations/Relations';\nimport type { DocumentActionComponent } from '../../../content-manager';\n\n/* -------------------------------------------------------------------------------------------------\n * Types\n * -----------------------------------------------------------------------------------------------*/\ntype DocumentActionPosition = 'panel' | 'header' | 'table-row' | 'preview' | 'relation-modal';\n\ninterface DocumentActionDescription {\n  label: string;\n  onClick?: (event: React.SyntheticEvent) => Promise<boolean | void> | boolean | void;\n  icon?: React.ReactNode;\n  /**\n   * @default false\n   */\n  disabled?: boolean;\n  /**\n   * @default 'panel'\n   * @description Where the action should be rendered.\n   */\n  position?: DocumentActionPosition | DocumentActionPosition[];\n  dialog?: DialogOptions | NotificationOptions | ModalOptions;\n  /**\n   * @default 'secondary'\n   */\n  variant?: ButtonProps['variant'];\n  loading?: ButtonProps['loading'];\n}\n\ninterface DialogOptions {\n  type: 'dialog';\n  title: string;\n  content?: React.ReactNode;\n  variant?: ButtonProps['variant'];\n  onConfirm?: () => void | Promise<void>;\n  onCancel?: () => void | Promise<void>;\n}\n\ninterface NotificationOptions {\n  type: 'notification';\n  title: string;\n  link?: {\n    label: string;\n    url: string;\n    target?: string;\n  };\n  content?: string;\n  onClose?: () => void;\n  status?: NotificationConfig['type'];\n  timeout?: number;\n}\n\ninterface ModalOptions {\n  type: 'modal';\n  title: string;\n  content: React.ComponentType<{ onClose: () => void }> | React.ReactNode;\n  footer?: React.ComponentType<{ onClose: () => void }> | React.ReactNode;\n  onClose?: () => void;\n}\n\n/* -------------------------------------------------------------------------------------------------\n * DocumentActions\n * -----------------------------------------------------------------------------------------------*/\n\ninterface Action extends DocumentActionDescription {\n  id: string;\n}\n\ninterface DocumentActionsProps {\n  actions: Action[];\n}\n\nconst DocumentActions = ({ actions }: DocumentActionsProps) => {\n  const { formatMessage } = useIntl();\n  const [primaryAction, secondaryAction, ...restActions] = actions.filter((action) => {\n    if (action.position === undefined) {\n      return true;\n    }\n\n    const positions = Array.isArray(action.position) ? action.position : [action.position];\n    return positions.includes('panel');\n  });\n\n  if (!primaryAction) {\n    return null;\n  }\n\n  return (\n    <Flex direction=\"column\" gap={2} alignItems=\"stretch\" width=\"100%\">\n      <Flex gap={2}>\n        <DocumentActionButton {...primaryAction} variant={primaryAction.variant || 'default'} />\n        {restActions.length > 0 ? (\n          <DocumentActionsMenu\n            actions={restActions}\n            label={formatMessage({\n              id: 'content-manager.containers.edit.panels.default.more-actions',\n              defaultMessage: 'More document actions',\n            })}\n          />\n        ) : null}\n      </Flex>\n      {secondaryAction ? (\n        <DocumentActionButton\n          {...secondaryAction}\n          variant={secondaryAction.variant || 'secondary'}\n        />\n      ) : null}\n    </Flex>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * DocumentActionButton\n * -----------------------------------------------------------------------------------------------*/\n\ninterface DocumentActionButtonProps extends Action {}\n\nconst DocumentActionButton = (action: DocumentActionButtonProps) => {\n  const [dialogId, setDialogId] = React.useState<string | null>(null);\n  const { toggleNotification } = useNotification();\n\n  const handleClick = (action: Action) => async (e: React.MouseEvent) => {\n    const { onClick = () => false, dialog, id } = action;\n\n    const muteDialog = await onClick(e);\n\n    if (dialog && !muteDialog) {\n      switch (dialog.type) {\n        case 'notification':\n          toggleNotification({\n            title: dialog.title,\n            message: dialog.content,\n            type: dialog.status,\n            timeout: dialog.timeout,\n            onClose: dialog.onClose,\n          });\n          break;\n        case 'dialog':\n        case 'modal':\n          e.preventDefault();\n          setDialogId(id);\n      }\n    }\n  };\n\n  const handleClose = () => {\n    setDialogId(null);\n  };\n\n  return (\n    <>\n      <Button\n        flex=\"auto\"\n        startIcon={action.icon}\n        disabled={action.disabled}\n        onClick={handleClick(action)}\n        justifyContent=\"center\"\n        variant={action.variant || 'default'}\n        paddingTop=\"7px\"\n        paddingBottom=\"7px\"\n        loading={action.loading}\n      >\n        {action.label}\n      </Button>\n      {action.dialog?.type === 'dialog' ? (\n        <DocumentActionConfirmDialog\n          {...action.dialog}\n          variant={action.dialog?.variant ?? action.variant}\n          isOpen={dialogId === action.id}\n          onClose={handleClose}\n        />\n      ) : null}\n      {action.dialog?.type === 'modal' ? (\n        <DocumentActionModal\n          {...action.dialog}\n          onModalClose={handleClose}\n          isOpen={dialogId === action.id}\n        />\n      ) : null}\n    </>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * DocumentActionMenu\n * -----------------------------------------------------------------------------------------------*/\ninterface DocumentActionsMenuProps {\n  actions: Action[];\n  children?: React.ReactNode;\n  label?: string;\n  variant?: 'ghost' | 'tertiary';\n}\n\nconst MenuItem = styled(Menu.Item)<{ isVariantDanger?: boolean; isDisabled?: boolean }>`\n  &:hover {\n    background: ${({ theme, isVariantDanger, isDisabled }) =>\n      isVariantDanger && !isDisabled ? theme.colors.danger100 : 'neutral'};\n  }\n`;\n\nconst DocumentActionsMenu = ({\n  actions,\n  children,\n  label,\n  variant = 'tertiary',\n}: DocumentActionsMenuProps) => {\n  const [isOpen, setIsOpen] = React.useState(false);\n  const [dialogId, setDialogId] = React.useState<string | null>(null);\n  const { formatMessage } = useIntl();\n  const { toggleNotification } = useNotification();\n  const isDisabled = actions.every((action) => action.disabled) || actions.length === 0;\n\n  const handleClick = (action: Action) => async (e: React.SyntheticEvent) => {\n    const { onClick = () => false, dialog, id } = action;\n\n    const muteDialog = await onClick(e);\n\n    if (dialog && !muteDialog) {\n      switch (dialog.type) {\n        case 'notification':\n          toggleNotification({\n            title: dialog.title,\n            message: dialog.content,\n            type: dialog.status,\n            timeout: dialog.timeout,\n            onClose: dialog.onClose,\n          });\n          break;\n        case 'dialog':\n        case 'modal':\n          setDialogId(id);\n      }\n    }\n  };\n\n  const handleClose = () => {\n    setDialogId(null);\n    setIsOpen(false);\n  };\n\n  return (\n    <Menu.Root open={isOpen} onOpenChange={setIsOpen}>\n      <Menu.Trigger\n        disabled={isDisabled}\n        size=\"S\"\n        endIcon={null}\n        paddingTop=\"4px\"\n        paddingLeft=\"7px\"\n        paddingRight=\"7px\"\n        variant={variant}\n      >\n        <More aria-hidden focusable={false} />\n        <VisuallyHidden tag=\"span\">\n          {label ||\n            formatMessage({\n              id: 'content-manager.containers.edit.panels.default.more-actions',\n              defaultMessage: 'More document actions',\n            })}\n        </VisuallyHidden>\n      </Menu.Trigger>\n      <Menu.Content maxHeight={undefined} popoverPlacement=\"bottom-end\">\n        {actions.map((action) => {\n          return (\n            <MenuItem\n              disabled={action.disabled}\n              /* @ts-expect-error â€“ TODO: this is an error in the DS where it is most likely a synthetic event, not regular. */\n              onSelect={handleClick(action)}\n              display=\"block\"\n              key={action.id}\n              isVariantDanger={action.variant === 'danger'}\n              isDisabled={action.disabled}\n            >\n              <Flex justifyContent=\"space-between\" gap={4}>\n                <Flex\n                  color={!action.disabled ? convertActionVariantToColor(action.variant) : 'inherit'}\n                  gap={2}\n                  tag=\"span\"\n                >\n                  <Flex\n                    tag=\"span\"\n                    color={\n                      !action.disabled ? convertActionVariantToIconColor(action.variant) : 'inherit'\n                    }\n                  >\n                    {action.icon}\n                  </Flex>\n                  {action.label}\n                </Flex>\n              </Flex>\n            </MenuItem>\n          );\n        })}\n        {children}\n      </Menu.Content>\n      {actions.map((action) => {\n        return (\n          <React.Fragment key={action.id}>\n            {action.dialog?.type === 'dialog' ? (\n              <DocumentActionConfirmDialog\n                {...action.dialog}\n                variant={action.variant}\n                isOpen={dialogId === action.id}\n                onClose={handleClose}\n              />\n            ) : null}\n            {action.dialog?.type === 'modal' ? (\n              <DocumentActionModal\n                {...action.dialog}\n                onModalClose={handleClose}\n                isOpen={dialogId === action.id}\n              />\n            ) : null}\n          </React.Fragment>\n        );\n      })}\n    </Menu.Root>\n  );\n};\n\nconst convertActionVariantToColor = (\n  variant: DocumentActionDescription['variant'] = 'secondary'\n): keyof DefaultTheme['colors'] | undefined => {\n  switch (variant) {\n    case 'danger':\n      return 'danger600';\n    case 'secondary':\n      return undefined;\n    case 'success':\n      return 'success600';\n    default:\n      return 'primary600';\n  }\n};\n\nconst convertActionVariantToIconColor = (\n  variant: DocumentActionDescription['variant'] = 'secondary'\n): keyof DefaultTheme['colors'] | undefined => {\n  switch (variant) {\n    case 'danger':\n      return 'danger600';\n    case 'secondary':\n      return 'neutral500';\n    case 'success':\n      return 'success600';\n    default:\n      return 'primary600';\n  }\n};\n\n/* -------------------------------------------------------------------------------------------------\n * DocumentActionConfirmDialog\n * -----------------------------------------------------------------------------------------------*/\n\ninterface DocumentActionConfirmDialogProps extends DialogOptions, Pick<Action, 'variant'> {\n  onClose: () => void;\n  isOpen: Dialog.Props['open'];\n  loading?: ButtonProps['loading'];\n}\n\nconst DocumentActionConfirmDialog = ({\n  onClose,\n  onCancel,\n  onConfirm,\n  title,\n  content,\n  isOpen,\n  variant = 'secondary',\n  loading,\n}: DocumentActionConfirmDialogProps) => {\n  const { formatMessage } = useIntl();\n\n  const handleClose = async () => {\n    if (onCancel) {\n      await onCancel();\n    }\n\n    onClose();\n  };\n\n  const handleConfirm = async () => {\n    if (onConfirm) {\n      await onConfirm();\n    }\n\n    onClose();\n  };\n\n  return (\n    <Dialog.Root open={isOpen} onOpenChange={handleClose}>\n      <Dialog.Content>\n        <Dialog.Header>{title}</Dialog.Header>\n        <Dialog.Body>{content}</Dialog.Body>\n        <Dialog.Footer>\n          <Dialog.Cancel>\n            <Button variant=\"tertiary\" fullWidth>\n              {formatMessage({\n                id: 'app.components.Button.cancel',\n                defaultMessage: 'Cancel',\n              })}\n            </Button>\n          </Dialog.Cancel>\n          <Button onClick={handleConfirm} variant={variant} fullWidth loading={loading}>\n            {formatMessage({\n              id: 'app.components.Button.confirm',\n              defaultMessage: 'Confirm',\n            })}\n          </Button>\n        </Dialog.Footer>\n      </Dialog.Content>\n    </Dialog.Root>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * DocumentActionModal\n * -----------------------------------------------------------------------------------------------*/\n\ninterface DocumentActionModalProps extends ModalOptions {\n  onModalClose: () => void;\n  isOpen?: boolean;\n}\n\nconst DocumentActionModal = ({\n  isOpen,\n  title,\n  onClose,\n  footer: Footer,\n  content: Content,\n  onModalClose,\n}: DocumentActionModalProps) => {\n  const handleClose = () => {\n    if (onClose) {\n      onClose();\n    }\n\n    onModalClose();\n  };\n\n  return (\n    <Modal.Root open={isOpen} onOpenChange={handleClose}>\n      <Modal.Content>\n        <Modal.Header>\n          <Modal.Title>{title}</Modal.Title>\n        </Modal.Header>\n        {typeof Content === 'function' ? (\n          <Content onClose={handleClose} />\n        ) : (\n          <Modal.Body>{Content}</Modal.Body>\n        )}\n        {typeof Footer === 'function' ? <Footer onClose={handleClose} /> : Footer}\n      </Modal.Content>\n    </Modal.Root>\n  );\n};\n\nconst transformData = (data: Record<string, any>): any => {\n  if (Array.isArray(data)) {\n    return data.map(transformData);\n  }\n\n  if (typeof data === 'object' && data !== null) {\n    if ('apiData' in data) {\n      return data.apiData;\n    }\n\n    return mapValues(transformData)(data);\n  }\n\n  return data;\n};\n\n/* -------------------------------------------------------------------------------------------------\n * DocumentActionComponents\n * -----------------------------------------------------------------------------------------------*/\n\nconst PublishAction: DocumentActionComponent = ({\n  activeTab,\n  documentId,\n  model,\n  collectionType,\n  meta,\n  document,\n}) => {\n  const {\n    currentDocument: { schema },\n  } = useDocumentContext('PublishAction');\n\n  const navigate = useNavigate();\n  const { toggleNotification } = useNotification();\n  const { _unstableFormatValidationErrors: formatValidationErrors } = useAPIErrorHandler();\n  const isListView = useMatch(LIST_PATH) !== null;\n  const isCloning = useMatch(CLONE_PATH) !== null;\n  const { id } = useParams();\n  const { formatMessage } = useIntl();\n  const canPublish = useDocumentRBAC('PublishAction', ({ canPublish }) => canPublish);\n  const { publish, isLoading } = useDocumentActions();\n  const onPreview = usePreviewContext('UpdateAction', (state) => state.onPreview, false);\n  const [\n    countDraftRelations,\n    { isLoading: isLoadingDraftRelations, isError: isErrorDraftRelations },\n  ] = useGetDraftRelationCountQuery();\n  const [localCountOfDraftRelations, setLocalCountOfDraftRelations] = React.useState(0);\n  const [serverCountOfDraftRelations, setServerCountOfDraftRelations] = React.useState(0);\n\n  const [{ rawQuery }] = useQueryParams();\n\n  const modified = useForm('PublishAction', ({ modified }) => modified);\n  const setSubmitting = useForm('PublishAction', ({ setSubmitting }) => setSubmitting);\n  const isSubmitting = useForm('PublishAction', ({ isSubmitting }) => isSubmitting);\n  const validate = useForm('PublishAction', (state) => state.validate);\n  const setErrors = useForm('PublishAction', (state) => state.setErrors);\n  const formValues = useForm('PublishAction', ({ values }) => values);\n  const resetForm = useForm('PublishAction', ({ resetForm }) => resetForm);\n\n  const { currentDocumentMeta } = useDocumentContext('PublishAction');\n\n  const idToPublish = currentDocumentMeta.documentId || id;\n\n  React.useEffect(() => {\n    if (isErrorDraftRelations) {\n      toggleNotification({\n        type: 'danger',\n        message: formatMessage({\n          id: getTranslation('error.records.fetch-draft-relatons'),\n          defaultMessage: 'An error occurred while fetching draft relations on this document.',\n        }),\n      });\n    }\n  }, [isErrorDraftRelations, toggleNotification, formatMessage]);\n\n  React.useEffect(() => {\n    const localDraftRelations = new Set();\n\n    /**\n     * Extracts draft relations from the provided data object.\n     * It checks for a connect array of relations.\n     * If a relation has a status of 'draft', its id is added to the localDraftRelations set.\n     */\n    const extractDraftRelations = (data: Omit<RelationsFormValue, 'disconnect'>) => {\n      const relations = data.connect || [];\n      relations.forEach((relation) => {\n        if (relation.status === 'draft') {\n          localDraftRelations.add(relation.id);\n        }\n      });\n    };\n\n    /**\n     * Recursively traverses the provided data object to extract draft relations from arrays within 'connect' keys.\n     * If the data is an object, it looks for 'connect' keys to pass their array values to extractDraftRelations.\n     * It recursively calls itself for any non-null objects it contains.\n     */\n    const traverseAndExtract = (data: { [field: string]: any }) => {\n      Object.entries(data).forEach(([key, value]) => {\n        if (key === 'connect' && Array.isArray(value)) {\n          extractDraftRelations({ connect: value });\n        } else if (typeof value === 'object' && value !== null) {\n          traverseAndExtract(value);\n        }\n      });\n    };\n\n    if (!documentId || modified) {\n      traverseAndExtract(formValues);\n      setLocalCountOfDraftRelations(localDraftRelations.size);\n    }\n  }, [documentId, modified, formValues, setLocalCountOfDraftRelations]);\n\n  React.useEffect(() => {\n    if (!document || !document.documentId || isListView) {\n      return;\n    }\n\n    const fetchDraftRelationsCount = async () => {\n      const { data, error } = await countDraftRelations({\n        collectionType,\n        model,\n        documentId,\n        params: currentDocumentMeta.params,\n      });\n\n      if (error) {\n        throw error;\n      }\n\n      if (data) {\n        setServerCountOfDraftRelations(data.data);\n      }\n    };\n\n    fetchDraftRelationsCount();\n  }, [\n    isListView,\n    document,\n    documentId,\n    countDraftRelations,\n    collectionType,\n    model,\n    currentDocumentMeta.params,\n  ]);\n\n  const isDocumentPublished =\n    (document?.[PUBLISHED_AT_ATTRIBUTE_NAME] ||\n      meta?.availableStatus.some((doc) => doc[PUBLISHED_AT_ATTRIBUTE_NAME] !== null)) &&\n    document?.status !== 'modified';\n\n  if (!schema?.options?.draftAndPublish) {\n    return null;\n  }\n\n  const performPublish = async () => {\n    setSubmitting(true);\n\n    try {\n      const { errors } = await validate(true, {\n        status: 'published',\n      });\n      if (errors) {\n        toggleNotification({\n          type: 'danger',\n          message: formatMessage({\n            id: 'content-manager.validation.error',\n            defaultMessage:\n              'There are validation errors in your document. Please fix them before saving.',\n          }),\n        });\n        return;\n      }\n      const res = await publish(\n        {\n          collectionType,\n          model,\n          documentId,\n          params: currentDocumentMeta.params,\n        },\n        transformData(formValues)\n      );\n\n      // Reset form if successful\n      if ('data' in res) {\n        resetForm();\n      }\n\n      if ('data' in res && collectionType !== SINGLE_TYPES) {\n        /**\n         * TODO: refactor the router so we can just do `../${res.data.documentId}` instead of this.\n         */\n        if (idToPublish === 'create') {\n          navigate({\n            pathname: `../${collectionType}/${model}/${res.data.documentId}`,\n            search: rawQuery,\n          });\n        }\n      } else if (\n        'error' in res &&\n        isBaseQueryError(res.error) &&\n        res.error.name === 'ValidationError'\n      ) {\n        setErrors(formatValidationErrors(res.error));\n      }\n    } finally {\n      setSubmitting(false);\n      if (onPreview) {\n        onPreview();\n      }\n    }\n  };\n\n  const totalDraftRelations = localCountOfDraftRelations + serverCountOfDraftRelations;\n  // TODO skipping this for now as there is a bug with the draft relation count that will be worked on separately\n  // see RFC \"Count draft relations\" in Notion\n  const enableDraftRelationsCount = false;\n  const hasDraftRelations = enableDraftRelationsCount && totalDraftRelations > 0;\n\n  return {\n    loading: isLoading,\n    position: ['panel', 'preview', 'relation-modal'],\n    /**\n     * Disabled when:\n     *  - currently if you're cloning a document we don't support publish & clone at the same time.\n     *  - the form is submitting\n     *  - the active tab is the published tab\n     *  - the document is already published & not modified\n     *  - the document is being created & not modified\n     *  - the user doesn't have the permission to publish\n     */\n    disabled:\n      isCloning ||\n      isSubmitting ||\n      isLoadingDraftRelations ||\n      activeTab === 'published' ||\n      (!modified && isDocumentPublished) ||\n      (!modified && !document?.documentId) ||\n      !canPublish,\n    label: formatMessage({\n      id: 'app.utils.publish',\n      defaultMessage: 'Publish',\n    }),\n    onClick: async () => {\n      if (hasDraftRelations) {\n        // In this case we need to show the user a confirmation dialog.\n        // Return from the onClick and let the dialog handle the process.\n        return;\n      }\n\n      await performPublish();\n    },\n    dialog: hasDraftRelations\n      ? {\n          type: 'dialog',\n          variant: 'danger',\n          footer: null,\n          title: formatMessage({\n            id: getTranslation(`popUpwarning.warning.bulk-has-draft-relations.title`),\n            defaultMessage: 'Confirmation',\n          }),\n          content: formatMessage(\n            {\n              id: getTranslation(`popUpwarning.warning.bulk-has-draft-relations.message`),\n              defaultMessage:\n                'This entry is related to {count, plural, one {# draft entry} other {# draft entries}}. Publishing it could leave broken links in your app.',\n            },\n            {\n              count: totalDraftRelations,\n            }\n          ),\n          onConfirm: async () => {\n            await performPublish();\n          },\n        }\n      : undefined,\n  };\n};\n\nPublishAction.type = 'publish';\nPublishAction.position = ['panel', 'preview', 'relation-modal'];\n\nconst UpdateAction: DocumentActionComponent = ({\n  activeTab,\n  documentId,\n  model,\n  collectionType,\n}) => {\n  const navigate = useNavigate();\n  const { toggleNotification } = useNotification();\n  const { _unstableFormatValidationErrors: formatValidationErrors } = useAPIErrorHandler();\n  const cloneMatch = useMatch(CLONE_PATH);\n  const isCloning = cloneMatch !== null;\n  const { formatMessage } = useIntl();\n  const { create, update, clone, isLoading } = useDocumentActions();\n  const [{ rawQuery }] = useQueryParams();\n  const onPreview = usePreviewContext('UpdateAction', (state) => state.onPreview, false);\n\n  const isSubmitting = useForm('UpdateAction', ({ isSubmitting }) => isSubmitting);\n  const modified = useForm('UpdateAction', ({ modified }) => modified);\n  const setSubmitting = useForm('UpdateAction', ({ setSubmitting }) => setSubmitting);\n  const document = useForm('UpdateAction', ({ values }) => values);\n  const validate = useForm('UpdateAction', (state) => state.validate);\n  const setErrors = useForm('UpdateAction', (state) => state.setErrors);\n  const resetForm = useForm('PublishAction', ({ resetForm }) => resetForm);\n\n  const { currentDocumentMeta } = useDocumentContext('UpdateAction');\n\n  const handleUpdate = React.useCallback(async () => {\n    setSubmitting(true);\n\n    try {\n      if (!modified) {\n        return;\n      }\n\n      const { errors } = await validate(true, {\n        status: 'draft',\n      });\n\n      if (errors) {\n        toggleNotification({\n          type: 'danger',\n          message: formatMessage({\n            id: 'content-manager.validation.error',\n            defaultMessage:\n              'There are validation errors in your document. Please fix them before saving.',\n          }),\n        });\n\n        return;\n      }\n\n      if (isCloning) {\n        const res = await clone(\n          {\n            model,\n            documentId: cloneMatch.params.origin!,\n            params: currentDocumentMeta.params,\n          },\n          transformData(document)\n        );\n\n        if ('data' in res) {\n          navigate(\n            {\n              pathname: `../${res.data.documentId}`,\n              search: rawQuery,\n            },\n            { relative: 'path' }\n          );\n        } else if (\n          'error' in res &&\n          isBaseQueryError(res.error) &&\n          res.error.name === 'ValidationError'\n        ) {\n          setErrors(formatValidationErrors(res.error));\n        }\n      } else if (documentId || collectionType === SINGLE_TYPES) {\n        const res = await update(\n          {\n            collectionType,\n            model,\n            documentId,\n            params: currentDocumentMeta.params,\n          },\n          transformData(document)\n        );\n\n        if ('error' in res && isBaseQueryError(res.error) && res.error.name === 'ValidationError') {\n          setErrors(formatValidationErrors(res.error));\n        } else {\n          resetForm();\n        }\n      } else {\n        const res = await create(\n          {\n            model,\n            params: currentDocumentMeta.params,\n          },\n          transformData(document)\n        );\n\n        if ('data' in res && collectionType !== SINGLE_TYPES) {\n          navigate(\n            {\n              pathname: `../${res.data.documentId}`,\n              search: rawQuery,\n            },\n            { replace: true, relative: 'path' }\n          );\n        } else if (\n          'error' in res &&\n          isBaseQueryError(res.error) &&\n          res.error.name === 'ValidationError'\n        ) {\n          setErrors(formatValidationErrors(res.error));\n        }\n      }\n    } finally {\n      setSubmitting(false);\n      if (onPreview) {\n        onPreview();\n      }\n    }\n  }, [\n    clone,\n    cloneMatch?.params.origin,\n    collectionType,\n    create,\n    currentDocumentMeta.params,\n    document,\n    documentId,\n    formatMessage,\n    formatValidationErrors,\n    isCloning,\n    model,\n    modified,\n    navigate,\n    rawQuery,\n    resetForm,\n    setErrors,\n    setSubmitting,\n    toggleNotification,\n    update,\n    validate,\n    onPreview,\n  ]);\n\n  // Auto-save on CMD+S or CMD+Enter on macOS, and CTRL+S or CTRL+Enter on Windows/Linux\n  React.useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.key === 'Enter' && (e.metaKey || e.ctrlKey)) {\n        e.preventDefault();\n        handleUpdate();\n      }\n    };\n\n    window.addEventListener('keydown', handleKeyDown);\n\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [handleUpdate]);\n\n  return {\n    loading: isLoading,\n    /**\n     * Disabled when:\n     * - the form is submitting\n     * - the document is not modified & we're not cloning (you can save a clone entity straight away)\n     * - the active tab is the published tab\n     */\n    disabled: isSubmitting || (!modified && !isCloning) || activeTab === 'published',\n    label: formatMessage({\n      id: 'global.save',\n      defaultMessage: 'Save',\n    }),\n    onClick: handleUpdate,\n    position: ['panel', 'preview', 'relation-modal'],\n  };\n};\n\nUpdateAction.type = 'update';\nUpdateAction.position = ['panel', 'preview', 'relation-modal'];\n\nconst UNPUBLISH_DRAFT_OPTIONS = {\n  KEEP: 'keep',\n  DISCARD: 'discard',\n};\n\nconst UnpublishAction: DocumentActionComponent = ({\n  activeTab,\n  documentId,\n  model,\n  collectionType,\n  document,\n}) => {\n  const { formatMessage } = useIntl();\n  const { schema } = useDoc();\n  const canPublish = useDocumentRBAC('UnpublishAction', ({ canPublish }) => canPublish);\n  const { unpublish } = useDocumentActions();\n  const [{ query }] = useQueryParams();\n  const params = React.useMemo(() => buildValidParams(query), [query]);\n  const { toggleNotification } = useNotification();\n  const [shouldKeepDraft, setShouldKeepDraft] = React.useState(true);\n\n  const isDocumentModified = document?.status === 'modified';\n\n  const handleChange = (value: string) => {\n    setShouldKeepDraft(value === UNPUBLISH_DRAFT_OPTIONS.KEEP);\n  };\n\n  if (!schema?.options?.draftAndPublish) {\n    return null;\n  }\n\n  return {\n    disabled:\n      !canPublish ||\n      activeTab === 'published' ||\n      (document?.status !== 'published' && document?.status !== 'modified'),\n    label: formatMessage({\n      id: 'app.utils.unpublish',\n      defaultMessage: 'Unpublish',\n    }),\n    icon: <Cross />,\n    onClick: async () => {\n      /**\n       * return if there's no id & we're in a collection type, or the status modified\n       * for either collection type because we use a dialog to handle the process in\n       * the latter case.\n       */\n      if ((!documentId && collectionType !== SINGLE_TYPES) || isDocumentModified) {\n        if (!documentId) {\n          // This should never, ever, happen.\n          console.error(\n            \"You're trying to unpublish a document without an id, this is likely a bug with Strapi. Please open an issue.\"\n          );\n\n          toggleNotification({\n            message: formatMessage({\n              id: 'content-manager.actions.unpublish.error',\n              defaultMessage: 'An error occurred while trying to unpublish the document.',\n            }),\n            type: 'danger',\n          });\n        }\n\n        return;\n      }\n\n      await unpublish({\n        collectionType,\n        model,\n        documentId,\n        params,\n      });\n    },\n    dialog: isDocumentModified\n      ? {\n          type: 'dialog',\n          title: formatMessage({\n            id: 'app.components.ConfirmDialog.title',\n            defaultMessage: 'Confirmation',\n          }),\n          content: (\n            <Flex alignItems=\"flex-start\" direction=\"column\" gap={6}>\n              <Flex width=\"100%\" direction=\"column\" gap={2}>\n                <WarningCircle width=\"24px\" height=\"24px\" fill=\"danger600\" />\n                <Typography tag=\"p\" variant=\"omega\" textAlign=\"center\">\n                  {formatMessage({\n                    id: 'content-manager.actions.unpublish.dialog.body',\n                    defaultMessage: 'Are you sure?',\n                  })}\n                </Typography>\n              </Flex>\n              <Radio.Group\n                defaultValue={UNPUBLISH_DRAFT_OPTIONS.KEEP}\n                name=\"discard-options\"\n                aria-label={formatMessage({\n                  id: 'content-manager.actions.unpublish.dialog.radio-label',\n                  defaultMessage: 'Choose an option to unpublish the document.',\n                })}\n                onValueChange={handleChange}\n              >\n                <Radio.Item checked={shouldKeepDraft} value={UNPUBLISH_DRAFT_OPTIONS.KEEP}>\n                  {formatMessage({\n                    id: 'content-manager.actions.unpublish.dialog.option.keep-draft',\n                    defaultMessage: 'Keep draft',\n                  })}\n                </Radio.Item>\n                <Radio.Item checked={!shouldKeepDraft} value={UNPUBLISH_DRAFT_OPTIONS.DISCARD}>\n                  {formatMessage({\n                    id: 'content-manager.actions.unpublish.dialog.option.replace-draft',\n                    defaultMessage: 'Replace draft',\n                  })}\n                </Radio.Item>\n              </Radio.Group>\n            </Flex>\n          ),\n          onConfirm: async () => {\n            if (!documentId && collectionType !== SINGLE_TYPES) {\n              // This should never, ever, happen.\n              console.error(\n                \"You're trying to unpublish a document without an id, this is likely a bug with Strapi. Please open an issue.\"\n              );\n\n              toggleNotification({\n                message: formatMessage({\n                  id: 'content-manager.actions.unpublish.error',\n                  defaultMessage: 'An error occurred while trying to unpublish the document.',\n                }),\n                type: 'danger',\n              });\n            }\n\n            await unpublish(\n              {\n                collectionType,\n                model,\n                documentId,\n                params,\n              },\n              !shouldKeepDraft\n            );\n          },\n        }\n      : undefined,\n    variant: 'danger',\n    position: ['panel', 'table-row'],\n  };\n};\n\nUnpublishAction.type = 'unpublish';\nUnpublishAction.position = 'panel';\n\nconst DiscardAction: DocumentActionComponent = ({\n  activeTab,\n  documentId,\n  model,\n  collectionType,\n  document,\n}) => {\n  const { formatMessage } = useIntl();\n  const { schema } = useDoc();\n  const canUpdate = useDocumentRBAC('DiscardAction', ({ canUpdate }) => canUpdate);\n  const { discard, isLoading } = useDocumentActions();\n  const [{ query }] = useQueryParams();\n  const params = React.useMemo(() => buildValidParams(query), [query]);\n\n  if (!schema?.options?.draftAndPublish) {\n    return null;\n  }\n\n  return {\n    disabled: !canUpdate || activeTab === 'published' || document?.status !== 'modified',\n    label: formatMessage({\n      id: 'content-manager.actions.discard.label',\n      defaultMessage: 'Discard changes',\n    }),\n    icon: <Cross />,\n    position: ['panel', 'table-row'],\n    variant: 'danger',\n    dialog: {\n      type: 'dialog',\n      title: formatMessage({\n        id: 'app.components.ConfirmDialog.title',\n        defaultMessage: 'Confirmation',\n      }),\n      content: (\n        <Flex direction=\"column\" gap={2}>\n          <WarningCircle width=\"24px\" height=\"24px\" fill=\"danger600\" />\n          <Typography tag=\"p\" variant=\"omega\" textAlign=\"center\">\n            {formatMessage({\n              id: 'content-manager.actions.discard.dialog.body',\n              defaultMessage: 'Are you sure?',\n            })}\n          </Typography>\n        </Flex>\n      ),\n      loading: isLoading,\n      onConfirm: async () => {\n        await discard({\n          collectionType,\n          model,\n          documentId,\n          params,\n        });\n      },\n    },\n  };\n};\n\nDiscardAction.type = 'discard';\nDiscardAction.position = 'panel';\n\nconst DEFAULT_ACTIONS = [PublishAction, UpdateAction, UnpublishAction, DiscardAction];\n\nexport { DocumentActions, DocumentActionsMenu, DocumentActionButton, DEFAULT_ACTIONS };\nexport type {\n  DocumentActionDescription,\n  DocumentActionPosition,\n  DialogOptions,\n  NotificationOptions,\n  ModalOptions,\n};\n"],"names":["DocumentActions","actions","formatMessage","useIntl","primaryAction","secondaryAction","restActions","filter","action","position","undefined","positions","Array","isArray","includes","_jsxs","Flex","direction","gap","alignItems","width","_jsx","DocumentActionButton","variant","length","DocumentActionsMenu","label","id","defaultMessage","dialogId","setDialogId","React","useState","toggleNotification","useNotification","handleClick","e","onClick","dialog","muteDialog","type","title","message","content","status","timeout","onClose","preventDefault","handleClose","_Fragment","Button","flex","startIcon","icon","disabled","justifyContent","paddingTop","paddingBottom","loading","DocumentActionConfirmDialog","isOpen","DocumentActionModal","onModalClose","MenuItem","styled","Menu","Item","theme","isVariantDanger","isDisabled","colors","danger100","children","setIsOpen","every","Root","open","onOpenChange","Trigger","size","endIcon","paddingLeft","paddingRight","More","aria-hidden","focusable","VisuallyHidden","tag","Content","maxHeight","popoverPlacement","map","onSelect","display","color","convertActionVariantToColor","convertActionVariantToIconColor","Fragment","onCancel","onConfirm","handleConfirm","Dialog","Header","Body","Footer","Cancel","fullWidth","footer","Modal","Title","transformData","data","apiData","mapValues","PublishAction","activeTab","documentId","model","collectionType","meta","document","currentDocument","schema","useDocumentContext","navigate","useNavigate","_unstableFormatValidationErrors","formatValidationErrors","useAPIErrorHandler","isListView","useMatch","LIST_PATH","isCloning","CLONE_PATH","useParams","canPublish","useDocumentRBAC","publish","isLoading","useDocumentActions","onPreview","usePreviewContext","state","countDraftRelations","isLoadingDraftRelations","isError","isErrorDraftRelations","useGetDraftRelationCountQuery","localCountOfDraftRelations","setLocalCountOfDraftRelations","serverCountOfDraftRelations","setServerCountOfDraftRelations","rawQuery","useQueryParams","modified","useForm","setSubmitting","isSubmitting","validate","setErrors","formValues","values","resetForm","currentDocumentMeta","idToPublish","useEffect","getTranslation","localDraftRelations","Set","extractDraftRelations","relations","connect","forEach","relation","add","traverseAndExtract","Object","entries","key","value","fetchDraftRelationsCount","error","params","isDocumentPublished","PUBLISHED_AT_ATTRIBUTE_NAME","availableStatus","some","doc","options","draftAndPublish","performPublish","errors","res","SINGLE_TYPES","pathname","search","isBaseQueryError","name","totalDraftRelations","enableDraftRelationsCount","hasDraftRelations","count","UpdateAction","cloneMatch","create","update","clone","handleUpdate","useCallback","origin","relative","replace","handleKeyDown","metaKey","ctrlKey","window","addEventListener","removeEventListener","UNPUBLISH_DRAFT_OPTIONS","KEEP","DISCARD","UnpublishAction","useDoc","unpublish","query","useMemo","buildValidParams","shouldKeepDraft","setShouldKeepDraft","isDocumentModified","handleChange","Cross","console","WarningCircle","height","fill","Typography","textAlign","Radio","Group","defaultValue","aria-label","onValueChange","checked","DiscardAction","canUpdate","discard","DEFAULT_ACTIONS"],"mappings":"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"}