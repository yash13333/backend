{"version":3,"file":"Relations.mjs","sources":["../../../../../../../admin/src/pages/EditView/components/FormInputs/Relations/Relations.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport {\n  type InputProps,\n  useField,\n  useForm,\n  useNotification,\n  useFocusInputField,\n} from '@strapi/admin/strapi-admin';\nimport {\n  Box,\n  Combobox,\n  ComboboxOption,\n  Flex,\n  IconButton,\n  TextButton,\n  Typography,\n  VisuallyHidden,\n  useComposedRefs,\n  Link,\n  Field,\n  FlexComponent,\n  BoxComponent,\n} from '@strapi/design-system';\nimport { Cross, Drag, ArrowClockwise } from '@strapi/icons';\nimport { generateNKeysBetween } from 'fractional-indexing';\nimport pipe from 'lodash/fp/pipe';\nimport { getEmptyImage } from 'react-dnd-html5-backend';\nimport { useIntl } from 'react-intl';\nimport { FixedSizeList, ListChildComponentProps } from 'react-window';\nimport { styled } from 'styled-components';\n\nimport { RelationDragPreviewProps } from '../../../../../components/DragPreviews/RelationDragPreview';\nimport { COLLECTION_TYPES } from '../../../../../constants/collections';\nimport { ItemTypes } from '../../../../../constants/dragAndDrop';\nimport { useDebounce } from '../../../../../hooks/useDebounce';\nimport { useDocument } from '../../../../../hooks/useDocument';\nimport { type DocumentMeta, useDocumentContext } from '../../../../../hooks/useDocumentContext';\nimport { type EditFieldLayout } from '../../../../../hooks/useDocumentLayout';\nimport {\n  DROP_SENSITIVITY,\n  UseDragAndDropOptions,\n  useDragAndDrop,\n} from '../../../../../hooks/useDragAndDrop';\nimport {\n  useGetRelationsQuery,\n  useLazySearchRelationsQuery,\n  RelationResult,\n} from '../../../../../services/relations';\nimport { type MainField } from '../../../../../utils/attributes';\nimport { getRelationLabel } from '../../../../../utils/relations';\nimport { getTranslation } from '../../../../../utils/translations';\nimport { DocumentStatus } from '../../DocumentStatus';\nimport { useComponent } from '../ComponentContext';\nimport { RelationModal, getCollectionType } from '../Relations/RelationModal';\n\nimport type { Schema } from '@strapi/types';\n\n/**\n * Remove a relation, whether it's been already saved or not.\n * It's used both in RelationsList, where the \"remove relation\" button is, and in the input,\n * because we sometimes need to remove a previous relation when selecting a new one.\n */\nfunction useHandleDisconnect(fieldName: string, consumerName: string) {\n  const field = useField(fieldName);\n  const removeFieldRow = useForm(consumerName, (state) => state.removeFieldRow);\n  const addFieldRow = useForm(consumerName, (state) => state.addFieldRow);\n\n  const handleDisconnect: ListItemProps['data']['handleDisconnect'] = (relation) => {\n    if (field.value && field.value.connect) {\n      /**\n       * A relation will exist in the `connect` array _if_ it has\n       * been added without saving. In this case, we just remove it\n       * from the connect array\n       */\n      const indexOfRelationInConnectArray = field.value.connect.findIndex(\n        (rel: NonNullable<RelationsFormValue['connect']>[number]) => rel.id === relation.id\n      );\n\n      if (indexOfRelationInConnectArray >= 0) {\n        removeFieldRow(`${fieldName}.connect`, indexOfRelationInConnectArray);\n        return;\n      }\n    }\n\n    addFieldRow(`${fieldName}.disconnect`, {\n      id: relation.id,\n      apiData: {\n        id: relation.id,\n        documentId: relation.documentId,\n        locale: relation.locale,\n      },\n    });\n  };\n\n  return handleDisconnect;\n}\n\n/* -------------------------------------------------------------------------------------------------\n * RelationsField\n * -----------------------------------------------------------------------------------------------*/\n\nconst RELATIONS_TO_DISPLAY = 5;\nconst ONE_WAY_RELATIONS = ['oneWay', 'oneToOne', 'manyToOne', 'oneToManyMorph', 'oneToOneMorph'];\n\ntype RelationPosition =\n  | (Pick<RelationResult, 'status' | 'locale'> & {\n      before: string;\n      end?: never;\n    })\n  | { end: boolean; before?: never; status?: never; locale?: never };\n\ninterface Relation extends Pick<RelationResult, 'documentId' | 'id' | 'locale' | 'status'> {\n  href: string;\n  label: string;\n  position?: RelationPosition;\n  __temp_key__: string;\n  apiData?: {\n    documentId: RelationResult['documentId'];\n    id: RelationResult['id'];\n    locale?: RelationResult['locale'];\n    position: RelationPosition;\n    // Added this property to prevent call useDocument with a not temporary relation (one already saved in the database)\n    isTemporary?: boolean;\n  };\n}\n\ninterface RelationsFieldProps\n  extends Omit<Extract<EditFieldLayout, { type: 'relation' }>, 'size' | 'hint'>,\n    Pick<InputProps, 'hint'> {}\n\nexport interface RelationsFormValue {\n  connect?: Relation[];\n  disconnect?: Pick<Relation, 'id'>[];\n}\n\n/**\n * TODO: we get a rather ugly flash when we remove a single relation from the list leaving\n * no other relations when we press save. The initial relation re-renders, probably because\n * of the lag in the Form cleaning it's \"disconnect\" array, whilst our data has not been invalidated.\n *\n * Could we invalidate relation data on the document actions? Should we?\n */\n\n/**\n * @internal\n * @description The relations field holds a lot of domain logic for handling relations which is rather complicated\n * At present we do not expose this to plugin developers, however, they are able to overwrite it themselves should\n * they wish to do so.\n */\nconst RelationsField = React.forwardRef<HTMLDivElement, RelationsFieldProps>(\n  ({ disabled, label, ...props }, ref) => {\n    const { currentDocument, currentDocumentMeta } = useDocumentContext('RelationsField');\n\n    const [currentPage, setCurrentPage] = React.useState(1);\n\n    // Use the documentId from the actual document, not the params (meta)\n    const documentId = currentDocument.document?.documentId;\n\n    const { formatMessage } = useIntl();\n\n    const isMorph = props.attribute.relation.toLowerCase().includes('morph');\n    const isDisabled = isMorph || disabled;\n\n    const { componentId, componentUID } = useComponent('RelationsField', ({ uid, id }) => ({\n      componentId: id,\n      componentUID: uid,\n    }));\n\n    const isSubmitting = useForm('RelationsList', (state) => state.isSubmitting);\n\n    React.useEffect(() => {\n      setCurrentPage(1);\n    }, [isSubmitting]);\n\n    const component = componentUID && currentDocument.components[componentUID];\n    /**\n     * We'll always have a documentId in a created entry, so we look for a componentId first.\n     * Same with `uid` and `documentModel`.\n     */\n    const model = component ? component.uid : currentDocumentMeta.model;\n    const id = component && componentId ? componentId.toString() : documentId;\n\n    /**\n     * The `name` prop is a complete path to the field, e.g. `field1.field2.field3`.\n     * Where the above example would a nested field within two components, however\n     * we only require the field on the component not the complete path since we query\n     * individual components. Therefore we split the string and take the last item.\n     */\n    const [targetField] = props.name.split('.').slice(-1);\n\n    const schemaAttributes = component\n      ? (component.attributes ?? {})\n      : (currentDocument.schema?.attributes ?? {});\n\n    /**\n     * Confirm the target field is related to the current document.\n     * Since relations can exist in a modal on top of the root document,\n     * we need to ensure we are fetching relations for the correct document (root document vs related document),\n     */\n    const isRelatedToCurrentDocument =\n      Object.values(schemaAttributes).filter(\n        (attribute) =>\n          attribute.type === 'relation' &&\n          'target' in attribute &&\n          'target' in props.attribute &&\n          attribute.target === props.attribute.target\n      ).length > 0;\n\n    const { data, isLoading, isFetching } = useGetRelationsQuery(\n      {\n        model,\n        targetField,\n        // below we don't run the query if there is no id.\n        id,\n        params: {\n          ...currentDocumentMeta.params,\n          pageSize: RELATIONS_TO_DISPLAY,\n          page: currentPage,\n        },\n      },\n      {\n        refetchOnMountOrArgChange: true,\n        skip: !id || !isRelatedToCurrentDocument,\n        selectFromResult: (result) => {\n          return {\n            ...result,\n            data: {\n              ...result.data,\n              results: result.data?.results ? result.data.results : [],\n            },\n          };\n        },\n      }\n    );\n\n    const handleLoadMore = () => {\n      setCurrentPage((prev) => prev + 1);\n    };\n\n    const field = useField(props.name);\n\n    const isFetchingMoreRelations = isLoading || isFetching;\n\n    const realServerRelationsCount =\n      'pagination' in data && data.pagination ? data.pagination.total : 0;\n\n    /**\n     * Items that are already connected, but reordered would be in\n     * this list, so to get an accurate figure, we remove them.\n     */\n    const relationsConnected =\n      (field.value?.connect ?? []).filter(\n        (rel: Relation) => data.results.findIndex((relation) => relation.id === rel.id) === -1\n      ).length ?? 0;\n    const relationsDisconnected = field.value?.disconnect?.length ?? 0;\n\n    const relationsCount = realServerRelationsCount + relationsConnected - relationsDisconnected;\n\n    /**\n     * This is it, the source of truth for reordering in conjunction with partial loading & updating\n     * of relations. Relations on load are given __temp_key__ when fetched, because we don't want to\n     * create brand new keys everytime the data updates, just keep adding them onto the newly loaded ones.\n     */\n    const relations = React.useMemo(() => {\n      const ctx = {\n        field: field.value,\n        // @ts-expect-error – targetModel does exist on the attribute. But it's not typed.\n        href: `../${COLLECTION_TYPES}/${props.attribute.targetModel}`,\n        mainField: props.mainField,\n      };\n\n      /**\n       * Tidy up our data.\n       */\n      const transformations = pipe(\n        removeConnected(ctx),\n        removeDisconnected(ctx),\n        addLabelAndHref(ctx)\n      );\n\n      const transformedRels = transformations([...data.results]);\n\n      /**\n       * THIS IS CRUCIAL. If you don't sort by the __temp_key__ which comes from fractional indexing\n       * then the list will be in the wrong order.\n       */\n      return [...transformedRels, ...(field.value?.connect ?? [])].sort((a, b) => {\n        if (a.__temp_key__ < b.__temp_key__) return -1;\n        if (a.__temp_key__ > b.__temp_key__) return 1;\n        return 0;\n      });\n    }, [\n      data.results,\n      field.value,\n      // @ts-expect-error – targetModel does exist on the attribute. But it's not typed.\n      props.attribute.targetModel,\n      props.mainField,\n    ]);\n\n    const handleDisconnect = useHandleDisconnect(props.name, 'RelationsField');\n\n    const handleConnect: RelationsInputProps['onChange'] = (relation) => {\n      const [lastItemInList] = relations.slice(-1);\n\n      const item = {\n        id: relation.id,\n        apiData: {\n          id: relation.id,\n          documentId: relation.documentId,\n          locale: relation.locale,\n          isTemporary: true,\n        },\n        status: relation.status,\n        /**\n         * If there's a last item, that's the first key we use to generate out next one.\n         */\n        __temp_key__: generateNKeysBetween(lastItemInList?.__temp_key__ ?? null, null, 1)[0],\n        // Fallback to `id` if there is no `mainField` value, which will overwrite the above `id` property with the exact same data.\n        [props.mainField?.name ?? 'documentId']: relation[props.mainField?.name ?? 'documentId'],\n        label: getRelationLabel(relation, props.mainField),\n        // @ts-expect-error – targetModel does exist on the attribute, but it's not typed.\n        href: `../${COLLECTION_TYPES}/${props.attribute.targetModel}/${relation.documentId}?${relation.locale ? `plugins[i18n][locale]=${relation.locale}` : ''}`,\n      };\n\n      if (ONE_WAY_RELATIONS.includes(props.attribute.relation)) {\n        // Remove any existing relation so they can be replaced with the new one\n        field.value?.connect?.forEach(handleDisconnect);\n        relations.forEach(handleDisconnect);\n\n        field.onChange(`${props.name}.connect`, [item]);\n      } else {\n        field.onChange(`${props.name}.connect`, [...(field.value?.connect ?? []), item]);\n      }\n    };\n\n    return (\n      <Flex\n        ref={ref}\n        direction=\"column\"\n        gap={3}\n        justifyContent=\"space-between\"\n        alignItems=\"stretch\"\n        wrap=\"wrap\"\n      >\n        <StyledFlex direction=\"column\" alignItems=\"start\" gap={2} width=\"100%\">\n          <RelationsInput\n            disabled={isDisabled}\n            // NOTE: we should not default to using the documentId if the component is being created (componentUID is undefined)\n            id={componentUID && component ? (componentId ? `${componentId}` : '') : documentId}\n            label={`${label} ${relationsCount > 0 ? `(${relationsCount})` : ''}`}\n            model={model}\n            onChange={handleConnect}\n            isRelatedToCurrentDocument={isRelatedToCurrentDocument}\n            {...props}\n          />\n          {'pagination' in data &&\n          data.pagination &&\n          data.pagination.pageCount > data.pagination.page ? (\n            <TextButton\n              disabled={isFetchingMoreRelations}\n              onClick={handleLoadMore}\n              loading={isFetchingMoreRelations}\n              startIcon={<ArrowClockwise />}\n              // prevent the label from line-wrapping\n              shrink={0}\n            >\n              {formatMessage({\n                id: getTranslation('relation.loadMore'),\n                defaultMessage: 'Load More',\n              })}\n            </TextButton>\n          ) : null}\n        </StyledFlex>\n        <RelationsList\n          data={relations}\n          serverData={data.results}\n          disabled={isDisabled}\n          name={props.name}\n          isLoading={isFetchingMoreRelations}\n          relationType={props.attribute.relation}\n          // @ts-expect-error – targetModel does exist on the attribute. But it's not typed.\n          targetModel={props.attribute.targetModel}\n          mainField={props.mainField}\n        />\n      </Flex>\n    );\n  }\n);\n\n/**\n * TODO: this can be removed once we stop shipping Inputs with\n * labels wrapped round in DS@2.\n */\nconst StyledFlex = styled<FlexComponent>(Flex)`\n  & > div {\n    width: 100%;\n  }\n`;\n\n/* -------------------------------------------------------------------------------------------------\n * Relation Transformations\n * -----------------------------------------------------------------------------------------------*/\n\ninterface TransformationContext extends Pick<RelationsFieldProps, 'mainField'> {\n  field?: RelationsFormValue;\n  href: string;\n}\n\n/**\n * If it's in the connected array, it can get out of our data array,\n * we'll be putting it back in later and sorting it anyway.\n */\nconst removeConnected =\n  ({ field }: TransformationContext) =>\n  (relations: RelationResult[]) => {\n    return relations.filter((relation) => {\n      const connectedRelations = field?.connect ?? [];\n\n      return connectedRelations.findIndex((rel) => rel.id === relation.id) === -1;\n    });\n  };\n\n/**\n * @description Removes relations that are in the `disconnect` array of the field\n */\nconst removeDisconnected =\n  ({ field }: TransformationContext) =>\n  (relations: RelationResult[]): RelationResult[] =>\n    relations.filter((relation) => {\n      const disconnectedRelations = field?.disconnect ?? [];\n\n      return disconnectedRelations.findIndex((rel) => rel.id === relation.id) === -1;\n    });\n\n/**\n * @description Adds a label and href to the relation object we use this to render\n * a better UI where we can link to the relation and display a human-readable label.\n */\nconst addLabelAndHref =\n  ({ mainField, href }: TransformationContext) =>\n  (relations: RelationResult[]): Relation[] =>\n    relations.map((relation) => {\n      return {\n        ...relation,\n        // Fallback to `id` if there is no `mainField` value, which will overwrite the above `documentId` property with the exact same data.\n        [mainField?.name ?? 'documentId']: relation[mainField?.name ?? 'documentId'],\n        label: getRelationLabel(relation, mainField),\n        href: `${href}/${relation.documentId}?${relation.locale ? `plugins[i18n][locale]=${relation.locale}` : ''}`,\n      };\n    });\n\n/* -------------------------------------------------------------------------------------------------\n * RelationsInput\n * -----------------------------------------------------------------------------------------------*/\ninterface RelationsInputProps extends Omit<RelationsFieldProps, 'type'> {\n  id?: string;\n  model: string;\n  isRelatedToCurrentDocument: boolean;\n  onChange: (\n    relation: Pick<RelationResult, 'documentId' | 'id' | 'locale' | 'status'> & {\n      [key: string]: any;\n    }\n  ) => void;\n}\n\n/**\n * @description Contains all the logic for the combobox that can search\n * for relations and then add them to the field's connect array.\n */\nconst RelationsInput = ({\n  hint,\n  id,\n  model,\n  label,\n  labelAction,\n  name,\n  mainField,\n  placeholder,\n  required,\n  unique: _unique,\n  'aria-label': _ariaLabel,\n  onChange,\n  isRelatedToCurrentDocument,\n  ...props\n}: RelationsInputProps) => {\n  const [textValue, setTextValue] = React.useState<string | undefined>('');\n  const [searchParams, setSearchParams] = React.useState({\n    _q: '',\n    page: 1,\n  });\n  const { toggleNotification } = useNotification();\n  const { currentDocumentMeta } = useDocumentContext('RelationsInput');\n\n  const { formatMessage } = useIntl();\n  const fieldRef = useFocusInputField<HTMLInputElement>(name);\n  const field = useField<RelationsFormValue>(name);\n\n  const searchParamsDebounced = useDebounce(searchParams, 300);\n  const [searchForTrigger, { data, isLoading }] = useLazySearchRelationsQuery();\n\n  /**\n   * Because we're using a lazy query, we need to trigger the search\n   * when the component mounts and when the search params change.\n   * We also need to trigger the search when the field value changes\n   * so that we can filter out the relations that are already connected.\n   */\n  React.useEffect(() => {\n    /**\n     * The `name` prop is a complete path to the field, e.g. `field1.field2.field3`.\n     * Where the above example would a nested field within two components, however\n     * we only require the field on the component not the complete path since we query\n     * individual components. Therefore we split the string and take the last item.\n     */\n    const [targetField] = name.split('.').slice(-1);\n\n    // Return early if there is no relation to the document\n    if (!isRelatedToCurrentDocument) return;\n\n    searchForTrigger({\n      model,\n      targetField,\n      params: {\n        ...currentDocumentMeta.params,\n        id: id ?? '',\n        pageSize: 10,\n        idsToInclude: field.value?.disconnect?.map((rel) => rel.id.toString()) ?? [],\n        idsToOmit: field.value?.connect?.map((rel) => rel.id.toString()) ?? [],\n        ...searchParamsDebounced,\n      },\n    });\n  }, [\n    field.value?.connect,\n    field.value?.disconnect,\n    id,\n    model,\n    name,\n    searchForTrigger,\n    searchParamsDebounced,\n    isRelatedToCurrentDocument,\n    currentDocumentMeta.params,\n  ]);\n\n  const handleSearch = async (search: string) => {\n    setSearchParams((s) => ({ ...s, _q: search, page: 1 }));\n  };\n\n  const hasNextPage = data?.pagination ? data.pagination.page < data.pagination.pageCount : false;\n\n  const options = data?.results ?? [];\n\n  const handleChange = (relationId?: string) => {\n    if (!relationId) {\n      return;\n    }\n\n    const relation = options.find((opt) => opt.id.toString() === relationId);\n\n    if (!relation) {\n      // This is very unlikely to happen, but it ensures we don't have any data for.\n      console.error(\n        \"You've tried to add a relation with an id that does not exist in the options you can see, this is likely a bug with Strapi. Please open an issue.\"\n      );\n\n      toggleNotification({\n        message: formatMessage({\n          id: getTranslation('relation.error-adding-relation'),\n          defaultMessage: 'An error occurred while trying to add the relation.',\n        }),\n        type: 'danger',\n      });\n\n      return;\n    }\n\n    /**\n     * You need to give this relation a correct _temp_key_ but\n     * this component doesn't know about those ones, you can't rely\n     * on the connect array because that doesn't hold items that haven't\n     * moved. So use a callback to fill in the gaps when connecting.\n     *\n     */\n    onChange(relation);\n  };\n\n  const handleLoadMore = () => {\n    if (!data || !data.pagination) {\n      return;\n    } else if (data.pagination.page < data.pagination.pageCount) {\n      setSearchParams((s) => ({ ...s, page: s.page + 1 }));\n    }\n  };\n\n  React.useLayoutEffect(() => {\n    setTextValue('');\n  }, [field.value]);\n\n  return (\n    <Field.Root error={field.error} hint={hint} name={name} required={required}>\n      <Field.Label action={labelAction}>{label}</Field.Label>\n      <Combobox\n        ref={fieldRef}\n        name={name}\n        autocomplete=\"list\"\n        placeholder={\n          placeholder ||\n          formatMessage({\n            id: getTranslation('relation.add'),\n            defaultMessage: 'Add relation',\n          })\n        }\n        hasMoreItems={hasNextPage}\n        loading={isLoading}\n        onOpenChange={() => {\n          handleSearch(textValue ?? '');\n        }}\n        noOptionsMessage={() =>\n          formatMessage({\n            id: getTranslation('relation.notAvailable'),\n            defaultMessage: 'No relations available',\n          })\n        }\n        loadingMessage={formatMessage({\n          id: getTranslation('relation.isLoading'),\n          defaultMessage: 'Relations are loading',\n        })}\n        onLoadMore={handleLoadMore}\n        textValue={textValue}\n        onChange={handleChange}\n        onTextValueChange={(text) => {\n          setTextValue(text);\n        }}\n        onInputChange={(event) => {\n          handleSearch(event.currentTarget.value);\n        }}\n        {...props}\n      >\n        {options.map((opt) => {\n          const textValue = getRelationLabel(opt, mainField);\n\n          return (\n            <ComboboxOption key={opt.id} value={opt.id.toString()} textValue={textValue}>\n              <Flex gap={2} justifyContent=\"space-between\">\n                <Typography ellipsis>{textValue}</Typography>\n                {opt.status ? <DocumentStatus status={opt.status} /> : null}\n              </Flex>\n            </ComboboxOption>\n          );\n        })}\n      </Combobox>\n      <Field.Error />\n      <Field.Hint />\n    </Field.Root>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * RelationsList\n * -----------------------------------------------------------------------------------------------*/\nconst RELATION_ITEM_HEIGHT = 50;\nconst RELATION_GUTTER = 4;\n\ninterface RelationsListProps extends Pick<RelationsFieldProps, 'disabled' | 'name'> {\n  data: Relation[];\n  isLoading?: boolean;\n  relationType: Schema.Attribute.RelationKind.Any;\n  /**\n   * The existing relations connected on the server. We need these to diff against.\n   */\n  serverData: RelationResult[];\n  targetModel: string;\n  mainField?: MainField;\n}\n\nconst RelationsList = ({\n  data,\n  serverData,\n  disabled,\n  name,\n  isLoading,\n  relationType,\n  targetModel,\n  mainField,\n}: RelationsListProps) => {\n  const ariaDescriptionId = React.useId();\n  const { formatMessage } = useIntl();\n  const listRef = React.useRef<FixedSizeList>(null);\n  const outerListRef = React.useRef<HTMLUListElement>(null);\n  const [overflow, setOverflow] = React.useState<'top' | 'bottom' | 'top-bottom'>();\n  const [liveText, setLiveText] = React.useState('');\n  const field = useField(name);\n\n  React.useEffect(() => {\n    if (data.length <= RELATIONS_TO_DISPLAY) {\n      return setOverflow(undefined);\n    }\n\n    const handleNativeScroll = (e: Event) => {\n      const el = e.target as HTMLUListElement;\n      const parentScrollContainerHeight = (el.parentNode as HTMLDivElement).scrollHeight;\n      const maxScrollBottom = el.scrollHeight - el.scrollTop;\n\n      if (el.scrollTop === 0) {\n        return setOverflow('bottom');\n      }\n\n      if (maxScrollBottom === parentScrollContainerHeight) {\n        return setOverflow('top');\n      }\n\n      return setOverflow('top-bottom');\n    };\n\n    const outerListRefCurrent = outerListRef?.current;\n\n    if (!isLoading && data.length > 0 && outerListRefCurrent) {\n      outerListRef.current.addEventListener('scroll', handleNativeScroll);\n    }\n\n    return () => {\n      if (outerListRefCurrent) {\n        outerListRefCurrent.removeEventListener('scroll', handleNativeScroll);\n      }\n    };\n  }, [isLoading, data.length]);\n\n  const getItemPos = (index: number) => `${index + 1} of ${data.length}`;\n\n  const handleMoveItem: UseDragAndDropOptions['onMoveItem'] = (newIndex, oldIndex) => {\n    const item = data[oldIndex];\n\n    setLiveText(\n      formatMessage(\n        {\n          id: getTranslation('dnd.reorder'),\n          defaultMessage: '{item}, moved. New position in list: {position}.',\n        },\n        {\n          item: item.label ?? item.documentId,\n          position: getItemPos(newIndex),\n        }\n      )\n    );\n\n    /**\n     * Splicing mutates the array, so we need to create a new array\n     */\n    const newData = [...data];\n    const currentRow = data[oldIndex];\n\n    const startKey =\n      oldIndex > newIndex ? newData[newIndex - 1]?.__temp_key__ : newData[newIndex]?.__temp_key__;\n    const endKey =\n      oldIndex > newIndex ? newData[newIndex]?.__temp_key__ : newData[newIndex + 1]?.__temp_key__;\n\n    /**\n     * We're moving the relation between two other relations, so\n     * we need to generate a new key that keeps the order\n     */\n    const [newKey] = generateNKeysBetween(startKey, endKey, 1);\n\n    newData.splice(oldIndex, 1);\n    newData.splice(newIndex, 0, { ...currentRow, __temp_key__: newKey });\n\n    /**\n     * Now we diff against the server to understand what's different so we\n     * can keep the connect array nice and tidy. It also needs reversing because\n     * we reverse the relations from the server in the first place.\n     */\n    const connectedRelations = newData\n      .reduce<Relation[]>((acc, relation, currentIndex, array) => {\n        const relationOnServer = serverData.find((oldRelation) => oldRelation.id === relation.id);\n\n        const relationInFront = array[currentIndex + 1];\n\n        if (!relationOnServer || relationOnServer.__temp_key__ !== relation.__temp_key__) {\n          const position = relationInFront\n            ? {\n                before: relationInFront.documentId,\n                locale: relationInFront.locale,\n                status:\n                  'publishedAt' in relationInFront && relationInFront.publishedAt\n                    ? ('published' as Relation['status'])\n                    : ('draft' as Relation['status']),\n              }\n            : { end: true };\n\n          const relationWithPosition: Relation = {\n            ...relation,\n            ...{\n              apiData: {\n                id: relation.id,\n                documentId: relation.documentId ?? relation.apiData?.documentId ?? '',\n                locale: relation.locale || relation.apiData?.locale,\n                isTemporary: relation.apiData?.isTemporary,\n                position,\n              },\n            },\n          };\n\n          return [...acc, relationWithPosition];\n        }\n\n        return acc;\n      }, [])\n      .toReversed();\n\n    field.onChange(`${name}.connect`, connectedRelations);\n  };\n\n  const handleGrabItem: UseDragAndDropOptions['onGrabItem'] = (index) => {\n    const item = data[index];\n\n    setLiveText(\n      formatMessage(\n        {\n          id: getTranslation('dnd.grab-item'),\n          defaultMessage: `{item}, grabbed. Current position in list: {position}. Press up and down arrow to change position, Spacebar to drop, Escape to cancel.`,\n        },\n        {\n          item: item.label ?? item.documentId,\n          position: getItemPos(index),\n        }\n      )\n    );\n  };\n\n  const handleDropItem: UseDragAndDropOptions['onDropItem'] = (index) => {\n    const { href: _href, label, ...item } = data[index];\n\n    setLiveText(\n      formatMessage(\n        {\n          id: getTranslation('dnd.drop-item'),\n          defaultMessage: `{item}, dropped. Final position in list: {position}.`,\n        },\n        {\n          item: label ?? item.documentId,\n          position: getItemPos(index),\n        }\n      )\n    );\n  };\n\n  const handleCancel: UseDragAndDropOptions['onCancel'] = (index) => {\n    const item = data[index];\n\n    setLiveText(\n      formatMessage(\n        {\n          id: getTranslation('dnd.cancel-item'),\n          defaultMessage: '{item}, dropped. Re-order cancelled.',\n        },\n        {\n          item: item.label ?? item.documentId,\n        }\n      )\n    );\n  };\n\n  const handleDisconnect = useHandleDisconnect(name, 'RelationsList');\n\n  /**\n   * These relation types will only ever have one item\n   * in their list, so you can't reorder a single item!\n   */\n  const canReorder = !ONE_WAY_RELATIONS.includes(relationType);\n\n  const dynamicListHeight =\n    data.length > RELATIONS_TO_DISPLAY\n      ? Math.min(data.length, RELATIONS_TO_DISPLAY) * (RELATION_ITEM_HEIGHT + RELATION_GUTTER) +\n        RELATION_ITEM_HEIGHT / 2\n      : Math.min(data.length, RELATIONS_TO_DISPLAY) * (RELATION_ITEM_HEIGHT + RELATION_GUTTER);\n\n  return (\n    <ShadowBox $overflowDirection={overflow}>\n      <VisuallyHidden id={ariaDescriptionId}>\n        {formatMessage({\n          id: getTranslation('dnd.instructions'),\n          defaultMessage: `Press spacebar to grab and re-order`,\n        })}\n      </VisuallyHidden>\n      <VisuallyHidden aria-live=\"assertive\">{liveText}</VisuallyHidden>\n      {/* @ts-expect-error – width is expected, but we've not needed to pass it before. */}\n      <FixedSizeList\n        height={dynamicListHeight}\n        ref={listRef}\n        outerRef={outerListRef}\n        itemCount={data.length}\n        itemSize={RELATION_ITEM_HEIGHT + RELATION_GUTTER}\n        itemData={{\n          ariaDescribedBy: ariaDescriptionId,\n          canDrag: canReorder,\n          disabled,\n          handleCancel,\n          handleDropItem,\n          handleGrabItem,\n          handleMoveItem,\n          name,\n          handleDisconnect,\n          relations: data,\n          targetModel,\n          mainField,\n        }}\n        itemKey={(index) => data[index].id}\n        innerElementType=\"ol\"\n      >\n        {ListItem}\n      </FixedSizeList>\n    </ShadowBox>\n  );\n};\n\nconst ShadowBox = styled<BoxComponent>(Box)<{\n  $overflowDirection?: 'top-bottom' | 'top' | 'bottom';\n}>`\n  position: relative;\n  overflow: hidden;\n  flex: 1;\n\n  &:before,\n  &:after {\n    position: absolute;\n    width: 100%;\n    height: 4px;\n    z-index: 1;\n  }\n\n  &:before {\n    /* TODO: as for DS Table component we would need this to be handled by the DS theme */\n    content: '';\n    background: linear-gradient(rgba(3, 3, 5, 0.2) 0%, rgba(0, 0, 0, 0) 100%);\n    top: 0;\n    opacity: ${({ $overflowDirection }) =>\n      $overflowDirection === 'top-bottom' || $overflowDirection === 'top' ? 1 : 0};\n    transition: opacity 0.2s ease-in-out;\n  }\n\n  &:after {\n    /* TODO: as for DS Table component we would need this to be handled by the DS theme */\n    content: '';\n    background: linear-gradient(0deg, rgba(3, 3, 5, 0.2) 0%, rgba(0, 0, 0, 0) 100%);\n    bottom: 0;\n    opacity: ${({ $overflowDirection }) =>\n      $overflowDirection === 'top-bottom' || $overflowDirection === 'bottom' ? 1 : 0};\n    transition: opacity 0.2s ease-in-out;\n  }\n`;\n\n/* -------------------------------------------------------------------------------------------------\n * ListItem\n * -----------------------------------------------------------------------------------------------*/\n\ninterface ListItemProps extends Pick<ListChildComponentProps, 'style' | 'index'> {\n  data: {\n    ariaDescribedBy: string;\n    canDrag?: boolean;\n    disabled?: boolean;\n    handleCancel: UseDragAndDropOptions['onCancel'];\n    handleDropItem: UseDragAndDropOptions['onDropItem'];\n    handleGrabItem: UseDragAndDropOptions['onGrabItem'];\n    handleMoveItem: UseDragAndDropOptions['onMoveItem'];\n    handleDisconnect: (relation: Relation) => void;\n    name: string;\n    relations: Relation[];\n    targetModel: string;\n    mainField?: MainField;\n  };\n}\n\nconst ListItem = ({ data, index, style }: ListItemProps) => {\n  const {\n    ariaDescribedBy,\n    canDrag = false,\n    disabled = false,\n    handleCancel,\n    handleDisconnect,\n    handleDropItem,\n    handleGrabItem,\n    handleMoveItem,\n    name,\n    relations,\n    targetModel,\n    mainField,\n  } = data;\n  const { currentDocumentMeta } = useDocumentContext('RelationsField');\n\n  const { formatMessage } = useIntl();\n\n  const {\n    href,\n    id,\n    label: originalLabel,\n    status: originalStatus,\n    documentId,\n    apiData,\n    locale,\n  } = relations[index];\n\n  /**\n   * The code above attempts to retrieve the updated value of a relation that has not yet been saved.\n   * This is necessary when a relation modal is opened, and the mainField or its status is updated.\n   * These changes need to be reflected in the initial relation field.\n   */\n  const collectionType = getCollectionType(href)!;\n  const isTemporary = apiData?.isTemporary ?? false;\n  const { document } = useDocument(\n    {\n      collectionType,\n      model: targetModel,\n      documentId: documentId ?? apiData?.documentId,\n      params: currentDocumentMeta.params,\n    },\n    { skip: !isTemporary }\n  );\n  const label = isTemporary && document ? getRelationLabel(document, mainField) : originalLabel;\n  const status = isTemporary && document ? document?.status : originalStatus;\n\n  const [{ handlerId, isDragging, handleKeyDown }, relationRef, dropRef, dragRef, dragPreviewRef] =\n    useDragAndDrop<number, Omit<RelationDragPreviewProps, 'width'>, HTMLDivElement>(\n      canDrag && !disabled,\n      {\n        type: `${ItemTypes.RELATION}_${name}`,\n        index,\n        item: {\n          displayedValue: label,\n          status,\n          id: id,\n          index,\n        },\n        onMoveItem: handleMoveItem,\n        onDropItem: handleDropItem,\n        onGrabItem: handleGrabItem,\n        onCancel: handleCancel,\n        dropSensitivity: DROP_SENSITIVITY.REGULAR,\n      }\n    );\n\n  const composedRefs = useComposedRefs<HTMLDivElement>(relationRef, dragRef);\n\n  React.useEffect(() => {\n    dragPreviewRef(getEmptyImage());\n  }, [dragPreviewRef]);\n\n  const safeDocumentId = documentId ?? apiData?.documentId;\n  const safeLocale = locale ?? apiData?.locale ?? null;\n  const documentMeta = React.useMemo(\n    () =>\n      ({\n        documentId: safeDocumentId,\n        model: targetModel,\n        collectionType: getCollectionType(href)!,\n        params: {\n          locale: safeLocale,\n        },\n      }) as DocumentMeta,\n    [safeDocumentId, href, safeLocale, targetModel]\n  );\n\n  return (\n    <Box\n      style={style}\n      tag=\"li\"\n      ref={dropRef}\n      aria-describedby={ariaDescribedBy}\n      cursor={canDrag ? 'all-scroll' : 'default'}\n    >\n      {isDragging ? (\n        <RelationItemPlaceholder />\n      ) : (\n        <Flex\n          paddingTop={2}\n          paddingBottom={2}\n          paddingLeft={canDrag ? 2 : 4}\n          paddingRight={4}\n          hasRadius\n          borderColor=\"neutral200\"\n          background={disabled ? 'neutral150' : 'neutral0'}\n          justifyContent=\"space-between\"\n          ref={composedRefs}\n          data-handler-id={handlerId}\n        >\n          <FlexWrapper gap={1}>\n            {canDrag ? (\n              <IconButton\n                tag=\"div\"\n                role=\"button\"\n                tabIndex={0}\n                withTooltip={false}\n                label={formatMessage({\n                  id: getTranslation('components.RelationInput.icon-button-aria-label'),\n                  defaultMessage: 'Drag',\n                })}\n                variant=\"ghost\"\n                onKeyDown={handleKeyDown}\n                disabled={disabled}\n              >\n                <Drag />\n              </IconButton>\n            ) : null}\n            <Flex width=\"100%\" minWidth={0} gap={4} justifyContent=\"space-between\">\n              <Box flex={1} minWidth={0} paddingTop={1} paddingBottom={1}>\n                <RelationModal relation={documentMeta}>{label}</RelationModal>\n              </Box>\n              {status ? <DocumentStatus status={status} /> : null}\n            </Flex>\n          </FlexWrapper>\n          <Box paddingLeft={4}>\n            <IconButton\n              onClick={() => handleDisconnect(relations[index])}\n              disabled={disabled}\n              label={formatMessage({\n                id: getTranslation('relation.disconnect'),\n                defaultMessage: 'Remove',\n              })}\n              variant=\"ghost\"\n              size=\"S\"\n            >\n              <Cross />\n            </IconButton>\n          </Box>\n        </Flex>\n      )}\n    </Box>\n  );\n};\n\nconst FlexWrapper = styled<FlexComponent>(Flex)`\n  width: 100%;\n  /* Used to prevent endAction to be pushed out of container */\n  min-width: 0;\n\n  & > div[role='button'] {\n    cursor: all-scroll;\n  }\n`;\n\nconst DisconnectButton = styled.button`\n  svg path {\n    fill: ${({ theme, disabled }) =>\n      disabled ? theme.colors.neutral600 : theme.colors.neutral500};\n  }\n\n  &:hover svg path,\n  &:focus svg path {\n    fill: ${({ theme, disabled }) => !disabled && theme.colors.neutral600};\n  }\n`;\n\nconst LinkEllipsis = styled(Link)`\n  display: block;\n\n  & > span {\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    display: block;\n  }\n`;\n\nconst RelationItemPlaceholder = () => (\n  <Box\n    paddingTop={2}\n    paddingBottom={2}\n    paddingLeft={4}\n    paddingRight={4}\n    hasRadius\n    borderStyle=\"dashed\"\n    borderColor=\"primary600\"\n    borderWidth=\"1px\"\n    background=\"primary100\"\n    height={`calc(100% - ${RELATION_GUTTER}px)`}\n  />\n);\n\nconst MemoizedRelationsField = React.memo(RelationsField);\n\nexport { MemoizedRelationsField as RelationsInput, FlexWrapper, DisconnectButton, LinkEllipsis };\nexport type { RelationsFieldProps };\n"],"names":["useHandleDisconnect","fieldName","consumerName","field","useField","removeFieldRow","useForm","state","addFieldRow","handleDisconnect","relation","value","connect","indexOfRelationInConnectArray","findIndex","rel","id","apiData","documentId","locale","RELATIONS_TO_DISPLAY","ONE_WAY_RELATIONS","RelationsField","React","forwardRef","disabled","label","props","ref","currentDocument","currentDocumentMeta","useDocumentContext","currentPage","setCurrentPage","useState","document","formatMessage","useIntl","isMorph","attribute","toLowerCase","includes","isDisabled","componentId","componentUID","useComponent","uid","isSubmitting","useEffect","component","components","model","toString","targetField","name","split","slice","schemaAttributes","attributes","schema","isRelatedToCurrentDocument","Object","values","filter","type","target","length","data","isLoading","isFetching","useGetRelationsQuery","params","pageSize","page","refetchOnMountOrArgChange","skip","selectFromResult","result","results","handleLoadMore","prev","isFetchingMoreRelations","realServerRelationsCount","pagination","total","relationsConnected","relationsDisconnected","disconnect","relationsCount","relations","useMemo","ctx","href","COLLECTION_TYPES","targetModel","mainField","transformations","pipe","removeConnected","removeDisconnected","addLabelAndHref","transformedRels","sort","a","b","__temp_key__","handleConnect","lastItemInList","item","isTemporary","status","generateNKeysBetween","getRelationLabel","forEach","onChange","_jsxs","Flex","direction","gap","justifyContent","alignItems","wrap","StyledFlex","width","_jsx","RelationsInput","pageCount","TextButton","onClick","loading","startIcon","ArrowClockwise","shrink","getTranslation","defaultMessage","RelationsList","serverData","relationType","styled","connectedRelations","disconnectedRelations","map","hint","labelAction","placeholder","required","unique","_unique","_ariaLabel","textValue","setTextValue","searchParams","setSearchParams","_q","toggleNotification","useNotification","fieldRef","useFocusInputField","searchParamsDebounced","useDebounce","searchForTrigger","useLazySearchRelationsQuery","idsToInclude","idsToOmit","handleSearch","search","s","hasNextPage","options","handleChange","relationId","find","opt","console","error","message","useLayoutEffect","Field","Root","Label","action","Combobox","autocomplete","hasMoreItems","onOpenChange","noOptionsMessage","loadingMessage","onLoadMore","onTextValueChange","text","onInputChange","event","currentTarget","ComboboxOption","Typography","ellipsis","DocumentStatus","Error","Hint","RELATION_ITEM_HEIGHT","RELATION_GUTTER","ariaDescriptionId","useId","listRef","useRef","outerListRef","overflow","setOverflow","liveText","setLiveText","undefined","handleNativeScroll","e","el","parentScrollContainerHeight","parentNode","scrollHeight","maxScrollBottom","scrollTop","outerListRefCurrent","current","addEventListener","removeEventListener","getItemPos","index","handleMoveItem","newIndex","oldIndex","position","newData","currentRow","startKey","endKey","newKey","splice","reduce","acc","currentIndex","array","relationOnServer","oldRelation","relationInFront","before","publishedAt","end","relationWithPosition","toReversed","handleGrabItem","handleDropItem","_href","handleCancel","canReorder","dynamicListHeight","Math","min","ShadowBox","$overflowDirection","VisuallyHidden","aria-live","FixedSizeList","height","outerRef","itemCount","itemSize","itemData","ariaDescribedBy","canDrag","itemKey","innerElementType","ListItem","Box","style","originalLabel","originalStatus","collectionType","getCollectionType","useDocument","handlerId","isDragging","handleKeyDown","relationRef","dropRef","dragRef","dragPreviewRef","useDragAndDrop","ItemTypes","RELATION","displayedValue","onMoveItem","onDropItem","onGrabItem","onCancel","dropSensitivity","DROP_SENSITIVITY","REGULAR","composedRefs","useComposedRefs","getEmptyImage","safeDocumentId","safeLocale","documentMeta","tag","aria-describedby","cursor","RelationItemPlaceholder","paddingTop","paddingBottom","paddingLeft","paddingRight","hasRadius","borderColor","background","data-handler-id","FlexWrapper","IconButton","role","tabIndex","withTooltip","variant","onKeyDown","Drag","minWidth","flex","RelationModal","size","Cross","DisconnectButton","button","theme","colors","neutral600","neutral500","LinkEllipsis","Link","borderStyle","borderWidth","MemoizedRelationsField","memo"],"mappings":"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"}