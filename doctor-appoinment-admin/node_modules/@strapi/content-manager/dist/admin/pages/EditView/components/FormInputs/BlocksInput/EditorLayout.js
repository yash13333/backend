'use strict';

var jsxRuntime = require('react/jsx-runtime');
var React = require('react');
var designSystem = require('@strapi/design-system');
var Icons = require('@strapi/icons');
var reactIntl = require('react-intl');
var styledComponents = require('styled-components');
var translations = require('../../../../../utils/translations.js');
var BlocksEditor = require('./BlocksEditor.js');

function _interopNamespaceDefault(e) {
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n.default = e;
  return Object.freeze(n);
}

var React__namespace = /*#__PURE__*/_interopNamespaceDefault(React);

const CollapseIconButton = styledComponents.styled(designSystem.IconButton)`
  position: absolute;
  bottom: 1.2rem;
  right: 1.2rem;
`;
const ExpandWrapper = styledComponents.styled(designSystem.Flex)`
  // Background with 20% opacity
  background: ${({ theme })=>`${theme.colors.neutral800}1F`};
`;
const EditorLayout = ({ children, error, disabled, onCollapse, ariaDescriptionId })=>{
    const { formatMessage } = reactIntl.useIntl();
    const { isExpandedMode } = BlocksEditor.useBlocksEditorContext('editorLayout');
    React__namespace.useEffect(()=>{
        if (isExpandedMode) {
            document.body.classList.add('lock-body-scroll');
        }
        return ()=>{
            document.body.classList.remove('lock-body-scroll');
        };
    }, [
        isExpandedMode
    ]);
    if (isExpandedMode) {
        return /*#__PURE__*/ jsxRuntime.jsx(designSystem.Portal, {
            role: "dialog",
            "aria-modal": false,
            children: /*#__PURE__*/ jsxRuntime.jsx(designSystem.FocusTrap, {
                onEscape: onCollapse,
                children: /*#__PURE__*/ jsxRuntime.jsx(ExpandWrapper, {
                    position: "fixed",
                    top: 0,
                    left: 0,
                    right: 0,
                    bottom: 0,
                    zIndex: 4,
                    justifyContent: "center",
                    onClick: onCollapse,
                    children: /*#__PURE__*/ jsxRuntime.jsx(designSystem.Box, {
                        background: "neutral0",
                        hasRadius: true,
                        shadow: "popupShadow",
                        overflow: "hidden",
                        width: "90%",
                        height: "90%",
                        onClick: (e)=>e.stopPropagation(),
                        "aria-describedby": ariaDescriptionId,
                        position: "relative",
                        children: /*#__PURE__*/ jsxRuntime.jsxs(designSystem.Flex, {
                            height: "100%",
                            alignItems: "flex-start",
                            direction: "column",
                            children: [
                                children,
                                /*#__PURE__*/ jsxRuntime.jsx(CollapseIconButton, {
                                    label: formatMessage({
                                        id: translations.getTranslation('components.Blocks.collapse'),
                                        defaultMessage: 'Collapse'
                                    }),
                                    onClick: onCollapse,
                                    children: /*#__PURE__*/ jsxRuntime.jsx(Icons.Collapse, {})
                                })
                            ]
                        })
                    })
                })
            })
        });
    }
    return /*#__PURE__*/ jsxRuntime.jsx(InputWrapper, {
        direction: "column",
        alignItems: "flex-start",
        height: "512px",
        $disabled: disabled,
        $hasError: Boolean(error),
        style: {
            overflow: 'hidden'
        },
        "aria-describedby": ariaDescriptionId,
        position: "relative",
        children: children
    });
};
const InputWrapper = styledComponents.styled(designSystem.Flex)`
  border: 1px solid
    ${({ theme, $hasError })=>$hasError ? theme.colors.danger600 : theme.colors.neutral200};
  border-radius: ${({ theme })=>theme.borderRadius};
  background: ${({ theme })=>theme.colors.neutral0};

  ${({ theme, $hasError = false })=>styledComponents.css`
    outline: none;
    box-shadow: 0;
    transition-property: border-color, box-shadow, fill;
    transition-duration: 0.2s;

    &:focus-within {
      border: 1px solid ${$hasError ? theme.colors.danger600 : theme.colors.primary600};
      box-shadow: ${$hasError ? theme.colors.danger600 : theme.colors.primary600} 0px 0px 0px 2px;
    }
  `}

  ${({ theme, $disabled })=>$disabled ? styledComponents.css`
          color: ${theme.colors.neutral600};
          background: ${theme.colors.neutral150};
        ` : undefined}
`;

exports.EditorLayout = EditorLayout;
//# sourceMappingURL=EditorLayout.js.map
